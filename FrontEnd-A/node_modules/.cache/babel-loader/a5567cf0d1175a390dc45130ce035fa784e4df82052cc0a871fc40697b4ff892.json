{"ast":null,"code":"var _jsxFileName = \"/Users/maibupash/Desktop/MastersProjects/resuME/ResumeApp/Resume-FrontEnd/src/components/ResumeGeneration.js\",\n  _s = $RefreshSig$();\n// // src/components/ResumeGeneration.js\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../CSS/ResumeGeneration.css\"; // We'll create this CSS file\n\n// // Function to extract only the content we need for our backend\n// function processGeminiData(rawData) {\n//   const processed = {};\n\n//   // Extract Professional Summary items (remove \\begin{itemize} and \\end{itemize})\n//   if (rawData.PROFESSIONAL_SUMMARY) {\n//     let summary = rawData.PROFESSIONAL_SUMMARY;\n//     // Remove the itemize wrapper\n//     summary = summary.replace(/\\\\begin\\{itemize\\}.*?\\]/g, \"\");\n//     summary = summary.replace(/\\\\end\\{itemize\\}/g, \"\");\n//     // Clean up extra whitespace and ensure proper formatting\n//     summary = summary.trim();\n//     processed.PROFESSIONAL_SUMMARY = summary;\n//   }\n\n//   // Extract Technical Skills table content (remove tabular wrapper)\n//   if (rawData.TECHNICAL_SKILLS) {\n//     let skills = rawData.TECHNICAL_SKILLS;\n//     // Remove everything before the actual table content\n//     skills = skills.replace(/.*\\\\begin\\{tabular\\}[^}]*\\}/s, \"\");\n//     // Remove the end tabular\n//     skills = skills.replace(/\\\\end\\{tabular\\}.*/s, \"\");\n//     // Clean up\n//     skills = skills.trim();\n//     processed.TECHNICAL_SKILLS = skills;\n//   }\n\n//   // Extract MetLife bullet points (remove everything except \\item content)\n//   if (rawData.METLIFE_BULLET_POINTS) {\n//     let metlife = rawData.METLIFE_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     metlife = metlife.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     metlife = metlife.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     metlife = metlife.trim();\n//     processed.METLIFE_BULLET_POINTS = metlife;\n//   }\n\n//   // Extract Adons bullet points (remove everything except \\item content)\n//   if (rawData.ADONS_BULLET_POINTS) {\n//     let adons = rawData.ADONS_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     adons = adons.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     adons = adons.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     adons = adons.trim();\n//     processed.ADONS_BULLET_POINTS = adons;\n//   }\n\n//   console.log(\"🔄 Raw data:\", rawData);\n//   console.log(\"🔄 Processed data for backend:\", processed);\n//   return processed;\n// }\n\n// function ResumeGeneration() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n\n//   // Get the data passed from JDInput\n//   const { resumeData, jobDescription, companyName } = location.state || {};\n\n//   // State for PDF generation\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n//   const [pdfUrl, setPdfUrl] = useState(null);\n//   const [showPDFViewer, setShowPDFViewer] = useState(false);\n\n//   // Check if we have the required data\n//   useEffect(() => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data found. Please generate content first.\");\n//     } else {\n//       setMessage(\"✅ Resume data loaded successfully! Ready to generate PDF.\");\n//     }\n//   }, [resumeData]);\n\n//   // Generate PDF using our Spring Boot backend\n//   const handleGeneratePDF = async () => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data available\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     setMessage(\"\");\n\n//     try {\n//       // Process the Gemini data to extract only what our backend needs\n//       const processedData = processGeminiData(resumeData);\n\n//       console.log(\"🚀 Original Gemini data:\", resumeData);\n//       console.log(\"🔄 Processed data for backend:\", processedData);\n\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/resume/generate\",\n//         processedData,\n//         {\n//           responseType: \"blob\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Create blob and URL for viewing\n//       const blob = new Blob([response.data], { type: \"application/pdf\" });\n//       const url = window.URL.createObjectURL(blob);\n\n//       setPdfUrl(url);\n//       setShowPDFViewer(true);\n\n//       setMessage(\"✅ Resume PDF generated successfully!\");\n//     } catch (error) {\n//       console.error(\"❌ Error generating PDF:\", error);\n//       setMessage(\n//         \"❌ Error generating PDF. Make sure the backend is running on port 8080.\"\n//       );\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Download PDF\n//   const handleDownloadPDF = () => {\n//     if (pdfUrl) {\n//       const link = document.createElement(\"a\");\n//       link.href = pdfUrl;\n//       link.download = `${companyName || \"resume\"}.pdf`;\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//       setMessage(\"📄 PDF downloaded successfully!\");\n//     }\n//   };\n\n//   // Print PDF\n//   const handlePrintPDF = () => {\n//     if (pdfUrl) {\n//       const printWindow = window.open(pdfUrl, \"_blank\");\n//       printWindow.onload = () => {\n//         printWindow.print();\n//       };\n//     }\n//   };\n\n//   // Go back to JDInput\n//   const handleGoBack = () => {\n//     navigate(\"/jdinput\");\n//   };\n\n//   return (\n//     <div className=\"resume-generation-container\">\n//       {/* Header */}\n//       <header className=\"resume-header\">\n//         <h1>ResuMe</h1>\n\n//         <button onClick={handleGoBack} className=\"back-btn\">\n//           ← Back to Job Analysis\n//         </button>\n//       </header>\n\n//       <div className=\"main-content\">\n//         {/* Left Panel - Data Preview */}\n//         <div className=\"data-panel\">\n//           <h2>📋 Generated Content Preview</h2>\n\n//           {companyName && (\n//             <div className=\"info-box\">\n//               <h3>🏢 Target Company</h3>\n//               <p>{companyName}</p>\n//             </div>\n//           )}\n\n//           {resumeData ? (\n//             <>\n//               <div className=\"content-section\">\n//                 <h3>📝 Professional Summary</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.PROFESSIONAL_SUMMARY || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🛠️ Technical Skills</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.TECHNICAL_SKILLS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏢 MetLife Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.METLIFE_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏭 Adons Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.ADONS_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n//             </>\n//           ) : (\n//             <div className=\"no-data\">\n//               <p>\n//                 ❌ No resume data available. Please go back and generate content\n//                 first.\n//               </p>\n//             </div>\n//           )}\n\n//           {/* Action Buttons */}\n//           <div className=\"action-buttons\">\n//             <button\n//               onClick={handleGeneratePDF}\n//               disabled={!resumeData || isLoading}\n//               className=\"generate-btn\"\n//             >\n//               {isLoading ? \"⏳ Generating...\" : \"🎯 Generate PDF Resume\"}\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Right Panel - PDF Viewer */}\n//         {showPDFViewer && (\n//           <div className=\"pdf-panel\">\n//             <div className=\"pdf-header\">\n//               <h2>📄 Generated Resume</h2>\n//               <div className=\"pdf-actions\">\n//                 <button\n//                   onClick={handleDownloadPDF}\n//                   className=\"action-btn download\"\n//                 >\n//                   💾 Download\n//                 </button>\n//                 <button onClick={handlePrintPDF} className=\"action-btn print\">\n//                   🖨️ Print\n//                 </button>\n//                 <button\n//                   onClick={() => setShowPDFViewer(false)}\n//                   className=\"action-btn close\"\n//                 >\n//                   ✕ Close\n//                 </button>\n//               </div>\n//             </div>\n//             <div className=\"pdf-viewer\">\n//               <iframe\n//                 src={pdfUrl}\n//                 width=\"100%\"\n//                 height=\"100%\"\n//                 title=\"Generated Resume\"\n//                 frameBorder=\"0\"\n//               />\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Status Message */}\n//       {message && (\n//         <div\n//           className={`status-message ${\n//             message.includes(\"✅\") ? \"success\" : \"error\"\n//           }`}\n//         >\n//           {message}\n//         </div>\n//       )}\n\n//       {/* Loading Overlay */}\n//       {isLoading && (\n//         <div className=\"loading-overlay\">\n//           <div className=\"loading-content\">\n//             <div className=\"spinner\"></div>\n//             <p>Generating your professional resume... Please wait</p>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ResumeGeneration;\n// src/components/ResumeGeneration.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../CSS/ResumeGeneration.css\";\nimport { useResume } from \"../context/ResumeContext\"; // ✅ new line\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResumeGeneration() {\n  _s();\n  const navigate = useNavigate();\n\n  // const location = useLocation();\n  // const { resumeData, companyName } = location.state || {};\n\n  const [selectedField, setSelectedField] = useState(\"PROFESSIONAL_SUMMARY\");\n  const [editableData, setEditableData] = useState(resumeData || {});\n  const [pdfUrl, setPdfUrl] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const fieldLabels = {\n    PROFESSIONAL_SUMMARY: \"Professional Summary\",\n    TECHNICAL_SKILLS: \"Technical Skills\",\n    METLIFE_BULLET_POINTS: \"MetLife Experience\",\n    ADONS_BULLET_POINTS: \"Adons Experience\"\n  };\n  const handleFieldChange = (field, value) => {\n    setEditableData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const handleGeneratePDF = async () => {\n    try {\n      setIsLoading(true);\n      setMessage(\"⏳ Generating PDF...\");\n      const response = await axios.post(\"http://localhost:8080/api/resume/generate\", editableData, {\n        responseType: \"blob\"\n      });\n      const blob = new Blob([response.data], {\n        type: \"application/pdf\"\n      });\n      const url = URL.createObjectURL(blob);\n      setPdfUrl(url);\n      setMessage(\"✅ PDF generated successfully!\");\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      setMessage(\"❌ Failed to generate PDF.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleDownloadPDF = () => {\n    if (pdfUrl) {\n      const link = document.createElement(\"a\");\n      link.href = pdfUrl;\n      link.download = `${companyName || \"resume\"}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const handlePrintPDF = () => {\n    if (pdfUrl) {\n      const printWindow = window.open(pdfUrl);\n      printWindow.onload = () => printWindow.print();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"rheader\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ResuMe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Resume Update | Cover Letter | Cold Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          localStorage.removeItem(\"loggedIn\");\n          navigate(\"/login\");\n        },\n        children: \"\\uD83D\\uDEAA Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resume-generation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rleft-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resume Fields\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"field-list\",\n          children: [Object.keys(fieldLabels).map(field => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedField === field ? \"active\" : \"\",\n            onClick: () => setSelectedField(field),\n            children: fieldLabels[field]\n          }, field, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"generate-btn\",\n            onClick: handleGeneratePDF,\n            disabled: isLoading,\n            children: isLoading ? \"⏳ Generating...\" : \" MAKE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"generate-btn\",\n            onClick: () => navigate(\"/jdinput\"),\n            children: \"HOME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rmiddle-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: fieldLabels[selectedField]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: editableData[selectedField] || \"\",\n          onChange: e => handleFieldChange(selectedField, e.target.value),\n          rows: 20,\n          placeholder: \"Edit the LaTeX content here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status ${message.includes(\"✅\") ? \"success\" : \"error\"}`,\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rright-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resume Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), pdfUrl ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: pdfUrl,\n          title: \"Resume PDF\",\n          frameBorder: \"0\",\n          width: \"100%\",\n          height: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-preview\",\n          children: \"No resume generated yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Generating your resume PDF...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n}\n_s(ResumeGeneration, \"DUFV6k9fvJIiiEAdn5egH6zTAZ0=\", false, function () {\n  return [useNavigate];\n});\n_c = ResumeGeneration;\nexport default ResumeGeneration;\nvar _c;\n$RefreshReg$(_c, \"ResumeGeneration\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","axios","useResume","jsxDEV","_jsxDEV","ResumeGeneration","_s","navigate","selectedField","setSelectedField","editableData","setEditableData","resumeData","pdfUrl","setPdfUrl","message","setMessage","isLoading","setIsLoading","fieldLabels","PROFESSIONAL_SUMMARY","TECHNICAL_SKILLS","METLIFE_BULLET_POINTS","ADONS_BULLET_POINTS","handleFieldChange","field","value","prev","handleGeneratePDF","response","post","responseType","blob","Blob","data","type","url","URL","createObjectURL","error","console","handleDownloadPDF","link","document","createElement","href","download","companyName","body","appendChild","click","removeChild","handlePrintPDF","printWindow","window","open","onload","print","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","localStorage","removeItem","Object","keys","map","disabled","onChange","e","target","rows","placeholder","includes","src","title","frameBorder","width","height","_c","$RefreshReg$"],"sources":["/Users/maibupash/Desktop/MastersProjects/resuME/ResumeApp/Resume-FrontEnd/src/components/ResumeGeneration.js"],"sourcesContent":["// // src/components/ResumeGeneration.js\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../CSS/ResumeGeneration.css\"; // We'll create this CSS file\n\n// // Function to extract only the content we need for our backend\n// function processGeminiData(rawData) {\n//   const processed = {};\n\n//   // Extract Professional Summary items (remove \\begin{itemize} and \\end{itemize})\n//   if (rawData.PROFESSIONAL_SUMMARY) {\n//     let summary = rawData.PROFESSIONAL_SUMMARY;\n//     // Remove the itemize wrapper\n//     summary = summary.replace(/\\\\begin\\{itemize\\}.*?\\]/g, \"\");\n//     summary = summary.replace(/\\\\end\\{itemize\\}/g, \"\");\n//     // Clean up extra whitespace and ensure proper formatting\n//     summary = summary.trim();\n//     processed.PROFESSIONAL_SUMMARY = summary;\n//   }\n\n//   // Extract Technical Skills table content (remove tabular wrapper)\n//   if (rawData.TECHNICAL_SKILLS) {\n//     let skills = rawData.TECHNICAL_SKILLS;\n//     // Remove everything before the actual table content\n//     skills = skills.replace(/.*\\\\begin\\{tabular\\}[^}]*\\}/s, \"\");\n//     // Remove the end tabular\n//     skills = skills.replace(/\\\\end\\{tabular\\}.*/s, \"\");\n//     // Clean up\n//     skills = skills.trim();\n//     processed.TECHNICAL_SKILLS = skills;\n//   }\n\n//   // Extract MetLife bullet points (remove everything except \\item content)\n//   if (rawData.METLIFE_BULLET_POINTS) {\n//     let metlife = rawData.METLIFE_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     metlife = metlife.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     metlife = metlife.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     metlife = metlife.trim();\n//     processed.METLIFE_BULLET_POINTS = metlife;\n//   }\n\n//   // Extract Adons bullet points (remove everything except \\item content)\n//   if (rawData.ADONS_BULLET_POINTS) {\n//     let adons = rawData.ADONS_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     adons = adons.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     adons = adons.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     adons = adons.trim();\n//     processed.ADONS_BULLET_POINTS = adons;\n//   }\n\n//   console.log(\"🔄 Raw data:\", rawData);\n//   console.log(\"🔄 Processed data for backend:\", processed);\n//   return processed;\n// }\n\n// function ResumeGeneration() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n\n//   // Get the data passed from JDInput\n//   const { resumeData, jobDescription, companyName } = location.state || {};\n\n//   // State for PDF generation\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n//   const [pdfUrl, setPdfUrl] = useState(null);\n//   const [showPDFViewer, setShowPDFViewer] = useState(false);\n\n//   // Check if we have the required data\n//   useEffect(() => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data found. Please generate content first.\");\n//     } else {\n//       setMessage(\"✅ Resume data loaded successfully! Ready to generate PDF.\");\n//     }\n//   }, [resumeData]);\n\n//   // Generate PDF using our Spring Boot backend\n//   const handleGeneratePDF = async () => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data available\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     setMessage(\"\");\n\n//     try {\n//       // Process the Gemini data to extract only what our backend needs\n//       const processedData = processGeminiData(resumeData);\n\n//       console.log(\"🚀 Original Gemini data:\", resumeData);\n//       console.log(\"🔄 Processed data for backend:\", processedData);\n\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/resume/generate\",\n//         processedData,\n//         {\n//           responseType: \"blob\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Create blob and URL for viewing\n//       const blob = new Blob([response.data], { type: \"application/pdf\" });\n//       const url = window.URL.createObjectURL(blob);\n\n//       setPdfUrl(url);\n//       setShowPDFViewer(true);\n\n//       setMessage(\"✅ Resume PDF generated successfully!\");\n//     } catch (error) {\n//       console.error(\"❌ Error generating PDF:\", error);\n//       setMessage(\n//         \"❌ Error generating PDF. Make sure the backend is running on port 8080.\"\n//       );\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Download PDF\n//   const handleDownloadPDF = () => {\n//     if (pdfUrl) {\n//       const link = document.createElement(\"a\");\n//       link.href = pdfUrl;\n//       link.download = `${companyName || \"resume\"}.pdf`;\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//       setMessage(\"📄 PDF downloaded successfully!\");\n//     }\n//   };\n\n//   // Print PDF\n//   const handlePrintPDF = () => {\n//     if (pdfUrl) {\n//       const printWindow = window.open(pdfUrl, \"_blank\");\n//       printWindow.onload = () => {\n//         printWindow.print();\n//       };\n//     }\n//   };\n\n//   // Go back to JDInput\n//   const handleGoBack = () => {\n//     navigate(\"/jdinput\");\n//   };\n\n//   return (\n//     <div className=\"resume-generation-container\">\n//       {/* Header */}\n//       <header className=\"resume-header\">\n//         <h1>ResuMe</h1>\n\n//         <button onClick={handleGoBack} className=\"back-btn\">\n//           ← Back to Job Analysis\n//         </button>\n//       </header>\n\n//       <div className=\"main-content\">\n//         {/* Left Panel - Data Preview */}\n//         <div className=\"data-panel\">\n//           <h2>📋 Generated Content Preview</h2>\n\n//           {companyName && (\n//             <div className=\"info-box\">\n//               <h3>🏢 Target Company</h3>\n//               <p>{companyName}</p>\n//             </div>\n//           )}\n\n//           {resumeData ? (\n//             <>\n//               <div className=\"content-section\">\n//                 <h3>📝 Professional Summary</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.PROFESSIONAL_SUMMARY || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🛠️ Technical Skills</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.TECHNICAL_SKILLS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏢 MetLife Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.METLIFE_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏭 Adons Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.ADONS_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n//             </>\n//           ) : (\n//             <div className=\"no-data\">\n//               <p>\n//                 ❌ No resume data available. Please go back and generate content\n//                 first.\n//               </p>\n//             </div>\n//           )}\n\n//           {/* Action Buttons */}\n//           <div className=\"action-buttons\">\n//             <button\n//               onClick={handleGeneratePDF}\n//               disabled={!resumeData || isLoading}\n//               className=\"generate-btn\"\n//             >\n//               {isLoading ? \"⏳ Generating...\" : \"🎯 Generate PDF Resume\"}\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Right Panel - PDF Viewer */}\n//         {showPDFViewer && (\n//           <div className=\"pdf-panel\">\n//             <div className=\"pdf-header\">\n//               <h2>📄 Generated Resume</h2>\n//               <div className=\"pdf-actions\">\n//                 <button\n//                   onClick={handleDownloadPDF}\n//                   className=\"action-btn download\"\n//                 >\n//                   💾 Download\n//                 </button>\n//                 <button onClick={handlePrintPDF} className=\"action-btn print\">\n//                   🖨️ Print\n//                 </button>\n//                 <button\n//                   onClick={() => setShowPDFViewer(false)}\n//                   className=\"action-btn close\"\n//                 >\n//                   ✕ Close\n//                 </button>\n//               </div>\n//             </div>\n//             <div className=\"pdf-viewer\">\n//               <iframe\n//                 src={pdfUrl}\n//                 width=\"100%\"\n//                 height=\"100%\"\n//                 title=\"Generated Resume\"\n//                 frameBorder=\"0\"\n//               />\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Status Message */}\n//       {message && (\n//         <div\n//           className={`status-message ${\n//             message.includes(\"✅\") ? \"success\" : \"error\"\n//           }`}\n//         >\n//           {message}\n//         </div>\n//       )}\n\n//       {/* Loading Overlay */}\n//       {isLoading && (\n//         <div className=\"loading-overlay\">\n//           <div className=\"loading-content\">\n//             <div className=\"spinner\"></div>\n//             <p>Generating your professional resume... Please wait</p>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ResumeGeneration;\n// src/components/ResumeGeneration.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../CSS/ResumeGeneration.css\";\nimport { useResume } from \"../context/ResumeContext\"; // ✅ new line\n\nfunction ResumeGeneration() {\n  const navigate = useNavigate();\n\n  // const location = useLocation();\n  // const { resumeData, companyName } = location.state || {};\n\n  const [selectedField, setSelectedField] = useState(\"PROFESSIONAL_SUMMARY\");\n  const [editableData, setEditableData] = useState(resumeData || {});\n  const [pdfUrl, setPdfUrl] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fieldLabels = {\n    PROFESSIONAL_SUMMARY: \"Professional Summary\",\n    TECHNICAL_SKILLS: \"Technical Skills\",\n    METLIFE_BULLET_POINTS: \"MetLife Experience\",\n    ADONS_BULLET_POINTS: \"Adons Experience\",\n  };\n\n  const handleFieldChange = (field, value) => {\n    setEditableData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleGeneratePDF = async () => {\n    try {\n      setIsLoading(true);\n      setMessage(\"⏳ Generating PDF...\");\n      const response = await axios.post(\n        \"http://localhost:8080/api/resume/generate\",\n        editableData,\n        { responseType: \"blob\" }\n      );\n      const blob = new Blob([response.data], { type: \"application/pdf\" });\n      const url = URL.createObjectURL(blob);\n      setPdfUrl(url);\n      setMessage(\"✅ PDF generated successfully!\");\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      setMessage(\"❌ Failed to generate PDF.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDownloadPDF = () => {\n    if (pdfUrl) {\n      const link = document.createElement(\"a\");\n      link.href = pdfUrl;\n      link.download = `${companyName || \"resume\"}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handlePrintPDF = () => {\n    if (pdfUrl) {\n      const printWindow = window.open(pdfUrl);\n      printWindow.onload = () => printWindow.print();\n    }\n  };\n\n  return (\n    <div>\n      <header className=\"rheader\">\n        <h1>ResuMe</h1>\n        <p>\n          <strong>Resume Update | Cover Letter | Cold Mail</strong>\n        </p>\n        <button\n          onClick={() => {\n            localStorage.removeItem(\"loggedIn\");\n            navigate(\"/login\");\n          }}\n        >\n          🚪 Logout\n        </button>\n      </header>\n\n      <div className=\"resume-generation-container\">\n        <div className=\"rleft-panel\">\n          <h2>Resume Fields</h2>\n          <ul className=\"field-list\">\n            {Object.keys(fieldLabels).map((field) => (\n              <li\n                key={field}\n                className={selectedField === field ? \"active\" : \"\"}\n                onClick={() => setSelectedField(field)}\n              >\n                {fieldLabels[field]}\n              </li>\n            ))}\n            <button\n              className=\"generate-btn\"\n              onClick={handleGeneratePDF}\n              disabled={isLoading}\n            >\n              {isLoading ? \"⏳ Generating...\" : \" MAKE\"}\n            </button>\n            <button\n              className=\"generate-btn\"\n              onClick={() => navigate(\"/jdinput\")}\n            >\n              HOME\n            </button>\n          </ul>\n        </div>\n\n        <div className=\"rmiddle-panel\">\n          <h2>{fieldLabels[selectedField]}</h2>\n          <textarea\n            value={editableData[selectedField] || \"\"}\n            onChange={(e) => handleFieldChange(selectedField, e.target.value)}\n            rows={20}\n            placeholder=\"Edit the LaTeX content here...\"\n          />\n          {/* <div className=\"editor-actions\">\n          <button onClick={handleGeneratePDF}>🎯 Regenerate PDF</button>\n          <button onClick={handleDownloadPDF} disabled={!pdfUrl}>\n            💾 Download\n          </button>\n          <button onClick={handlePrintPDF} disabled={!pdfUrl}>\n            🖨️ Print\n          </button>\n        </div> */}\n          {message && (\n            <div\n              className={`status ${\n                message.includes(\"✅\") ? \"success\" : \"error\"\n              }`}\n            >\n              {message}\n            </div>\n          )}\n        </div>\n\n        <div className=\"rright-panel\">\n          <h2>Resume Preview</h2>\n          {pdfUrl ? (\n            <iframe\n              src={pdfUrl}\n              title=\"Resume PDF\"\n              frameBorder=\"0\"\n              width=\"100%\"\n              height=\"100%\"\n            />\n          ) : (\n            <p className=\"no-preview\">No resume generated yet</p>\n          )}\n        </div>\n\n        {isLoading && (\n          <div className=\"loading-overlay\">\n            <div className=\"loading-spinner\" />\n            <p>Generating your resume PDF...</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ResumeGeneration;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}