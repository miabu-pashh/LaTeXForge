{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../CSS/ResumeGeneration.css\";\n// import { useResume } from \"../context/ResumeContext\"; // ✅ new line\n\n// function ResumeGeneration() {\n//   const navigate = useNavigate();\n\n//   const location = useLocation();\n//   const { resumeData, companyName } = location.state || {};\n\n//   const [selectedField, setSelectedField] = useState(\"PROFESSIONAL_SUMMARY\");\n//   const [editableData, setEditableData] = useState(resumeData || {});\n//   const [pdfUrl, setPdfUrl] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const fieldLabels = {\n//     PROFESSIONAL_SUMMARY: \"Professional Summary\",\n//     TECHNICAL_SKILLS: \"Technical Skills\",\n//     METLIFE_BULLET_POINTS: \"MetLife Experience\",\n//     ADONS_BULLET_POINTS: \"Adons Experience\",\n//   };\n\n//   const handleFieldChange = (field, value) => {\n//     setEditableData((prev) => ({\n//       ...prev,\n//       [field]: value,\n//     }));\n//   };\n\n//   const handleGeneratePDF = async () => {\n//     try {\n//       setIsLoading(true);\n//       setMessage(\"⏳ Generating PDF...\");\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/resume/generate\",\n//         editableData,\n//         { responseType: \"blob\" }\n//       );\n//       const blob = new Blob([response.data], { type: \"application/pdf\" });\n//       const url = URL.createObjectURL(blob);\n//       setPdfUrl(url);\n//       setMessage(\"✅ PDF generated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error generating PDF:\", error);\n//       setMessage(\"❌ Failed to generate PDF.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleDownloadPDF = () => {\n//     if (pdfUrl) {\n//       const link = document.createElement(\"a\");\n//       link.href = pdfUrl;\n//       link.download = `${companyName || \"resume\"}.pdf`;\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//     }\n//   };\n\n//   const handlePrintPDF = () => {\n//     if (pdfUrl) {\n//       const printWindow = window.open(pdfUrl);\n//       printWindow.onload = () => printWindow.print();\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <header className=\"rheader\">\n//         <h1>ResuMe</h1>\n//         <p>\n//           <strong>Resume Update | Cover Letter | Cold Mail</strong>\n//         </p>\n//         <button\n//           onClick={() => {\n//             localStorage.removeItem(\"loggedIn\");\n//             navigate(\"/login\");\n//           }}\n//         >\n//           🚪 Logout\n//         </button>\n//       </header>\n\n//       <div className=\"resume-generation-container\">\n//         <div className=\"rleft-panel\">\n//           <h2>Resume Fields</h2>\n//           <ul className=\"field-list\">\n//             {Object.keys(fieldLabels).map((field) => (\n//               <li\n//                 key={field}\n//                 className={selectedField === field ? \"active\" : \"\"}\n//                 onClick={() => setSelectedField(field)}\n//               >\n//                 {fieldLabels[field]}\n//               </li>\n//             ))}\n//             <button\n//               className=\"generate-btn\"\n//               onClick={handleGeneratePDF}\n//               disabled={isLoading}\n//             >\n//               {isLoading ? \"⏳ Generating...\" : \" MAKE\"}\n//             </button>\n//             <button\n//               className=\"generate-btn\"\n//               onClick={() => navigate(\"/jdinput\")}\n//             >\n//               HOME\n//             </button>\n//           </ul>\n//         </div>\n\n//         <div className=\"rmiddle-panel\">\n//           <h2>{fieldLabels[selectedField]}</h2>\n//           <textarea\n//             value={editableData[selectedField] || \"\"}\n//             onChange={(e) => handleFieldChange(selectedField, e.target.value)}\n//             rows={20}\n//             placeholder=\"Edit the LaTeX content here...\"\n//           />\n//           {/* <div className=\"editor-actions\">\n//           <button onClick={handleGeneratePDF}>🎯 Regenerate PDF</button>\n//           <button onClick={handleDownloadPDF} disabled={!pdfUrl}>\n//             💾 Download\n//           </button>\n//           <button onClick={handlePrintPDF} disabled={!pdfUrl}>\n//             🖨️ Print\n//           </button>\n//         </div> */}\n//           {message && (\n//             <div\n//               className={`status ${\n//                 message.includes(\"✅\") ? \"success\" : \"error\"\n//               }`}\n//             >\n//               {message}\n//             </div>\n//           )}\n//         </div>\n\n//         <div className=\"rright-panel\">\n//           <h2>Resume Preview</h2>\n//           {pdfUrl ? (\n//             <iframe\n//               src={pdfUrl}\n//               title=\"Resume PDF\"\n//               frameBorder=\"0\"\n//               width=\"100%\"\n//               height=\"100%\"\n//             />\n//           ) : (\n//             <p className=\"no-preview\">No resume generated yet</p>\n//           )}\n//         </div>\n\n//         {isLoading && (\n//           <div className=\"loading-overlay\">\n//             <div className=\"loading-spinner\" />\n//             <p>Generating your resume PDF...</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ResumeGeneration;","map":{"version":3,"names":[],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/components/ResumeGeneration.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../CSS/ResumeGeneration.css\";\n// import { useResume } from \"../context/ResumeContext\"; // ✅ new line\n\n// function ResumeGeneration() {\n//   const navigate = useNavigate();\n\n//   const location = useLocation();\n//   const { resumeData, companyName } = location.state || {};\n\n//   const [selectedField, setSelectedField] = useState(\"PROFESSIONAL_SUMMARY\");\n//   const [editableData, setEditableData] = useState(resumeData || {});\n//   const [pdfUrl, setPdfUrl] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const fieldLabels = {\n//     PROFESSIONAL_SUMMARY: \"Professional Summary\",\n//     TECHNICAL_SKILLS: \"Technical Skills\",\n//     METLIFE_BULLET_POINTS: \"MetLife Experience\",\n//     ADONS_BULLET_POINTS: \"Adons Experience\",\n//   };\n\n//   const handleFieldChange = (field, value) => {\n//     setEditableData((prev) => ({\n//       ...prev,\n//       [field]: value,\n//     }));\n//   };\n\n//   const handleGeneratePDF = async () => {\n//     try {\n//       setIsLoading(true);\n//       setMessage(\"⏳ Generating PDF...\");\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/resume/generate\",\n//         editableData,\n//         { responseType: \"blob\" }\n//       );\n//       const blob = new Blob([response.data], { type: \"application/pdf\" });\n//       const url = URL.createObjectURL(blob);\n//       setPdfUrl(url);\n//       setMessage(\"✅ PDF generated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error generating PDF:\", error);\n//       setMessage(\"❌ Failed to generate PDF.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleDownloadPDF = () => {\n//     if (pdfUrl) {\n//       const link = document.createElement(\"a\");\n//       link.href = pdfUrl;\n//       link.download = `${companyName || \"resume\"}.pdf`;\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//     }\n//   };\n\n//   const handlePrintPDF = () => {\n//     if (pdfUrl) {\n//       const printWindow = window.open(pdfUrl);\n//       printWindow.onload = () => printWindow.print();\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <header className=\"rheader\">\n//         <h1>ResuMe</h1>\n//         <p>\n//           <strong>Resume Update | Cover Letter | Cold Mail</strong>\n//         </p>\n//         <button\n//           onClick={() => {\n//             localStorage.removeItem(\"loggedIn\");\n//             navigate(\"/login\");\n//           }}\n//         >\n//           🚪 Logout\n//         </button>\n//       </header>\n\n//       <div className=\"resume-generation-container\">\n//         <div className=\"rleft-panel\">\n//           <h2>Resume Fields</h2>\n//           <ul className=\"field-list\">\n//             {Object.keys(fieldLabels).map((field) => (\n//               <li\n//                 key={field}\n//                 className={selectedField === field ? \"active\" : \"\"}\n//                 onClick={() => setSelectedField(field)}\n//               >\n//                 {fieldLabels[field]}\n//               </li>\n//             ))}\n//             <button\n//               className=\"generate-btn\"\n//               onClick={handleGeneratePDF}\n//               disabled={isLoading}\n//             >\n//               {isLoading ? \"⏳ Generating...\" : \" MAKE\"}\n//             </button>\n//             <button\n//               className=\"generate-btn\"\n//               onClick={() => navigate(\"/jdinput\")}\n//             >\n//               HOME\n//             </button>\n//           </ul>\n//         </div>\n\n//         <div className=\"rmiddle-panel\">\n//           <h2>{fieldLabels[selectedField]}</h2>\n//           <textarea\n//             value={editableData[selectedField] || \"\"}\n//             onChange={(e) => handleFieldChange(selectedField, e.target.value)}\n//             rows={20}\n//             placeholder=\"Edit the LaTeX content here...\"\n//           />\n//           {/* <div className=\"editor-actions\">\n//           <button onClick={handleGeneratePDF}>🎯 Regenerate PDF</button>\n//           <button onClick={handleDownloadPDF} disabled={!pdfUrl}>\n//             💾 Download\n//           </button>\n//           <button onClick={handlePrintPDF} disabled={!pdfUrl}>\n//             🖨️ Print\n//           </button>\n//         </div> */}\n//           {message && (\n//             <div\n//               className={`status ${\n//                 message.includes(\"✅\") ? \"success\" : \"error\"\n//               }`}\n//             >\n//               {message}\n//             </div>\n//           )}\n//         </div>\n\n//         <div className=\"rright-panel\">\n//           <h2>Resume Preview</h2>\n//           {pdfUrl ? (\n//             <iframe\n//               src={pdfUrl}\n//               title=\"Resume PDF\"\n//               frameBorder=\"0\"\n//               width=\"100%\"\n//               height=\"100%\"\n//             />\n//           ) : (\n//             <p className=\"no-preview\">No resume generated yet</p>\n//           )}\n//         </div>\n\n//         {isLoading && (\n//           <div className=\"loading-overlay\">\n//             <div className=\"loading-spinner\" />\n//             <p>Generating your resume PDF...</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ResumeGeneration;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}