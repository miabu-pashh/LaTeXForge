{"ast":null,"code":"var _jsxFileName = \"/Users/maibupash/Desktop/MastersProjects/resuME/ResumeApp/Resume-FrontEnd/src/components/ColdEmailModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { sendCustomEmails } from \"../services/coldEmailService\";\n\n// const ColdEmailModal = ({ isOpen, onClose, coldEmail, companyName }) => {\n//   const [contacts, setContacts] = useState([]);\n//   const [newContact, setNewContact] = useState({\n//     name: \"\",\n//     email: \"\",\n//     title: \"\",\n//   });\n//   const [candidateInfo, setCandidateInfo] = useState({\n//     candidateName: \"Mahaboob Pasha Mohammad\",\n//     candidateEmail: \"mahaboobpashamohammad8@gmail.com\",\n//     candidatePhone: \"3143056056\",\n//   });\n//   const [emailData, setEmailData] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     companyName: companyName || \"\",\n//     hiringManagerName: \"Hiring Manager\",\n//   });\n//   const [attachments, setAttachments] = useState([]);\n//   const [sending, setSending] = useState(false);\n\n//   // Initialize email data when modal opens\n//   useEffect(() => {\n//     if (isOpen && coldEmail) {\n//       const emailSubject =\n//         coldEmail.match(/Subject:\\s*(.*)/i)?.[1]?.trim() || \"Job Application\";\n//       const emailBody = coldEmail.replace(/Subject:.*\\n?/i, \"\").trim();\n\n//       setEmailData({\n//         subject: emailSubject,\n//         body: emailBody,\n//         companyName: companyName || \"\",\n//         hiringManagerName: \"Hiring Manager\",\n//       });\n//     }\n//   }, [isOpen, coldEmail, companyName]);\n\n//   const addContact = () => {\n//     if (newContact.name && newContact.email) {\n//       const contact = {\n//         name: newContact.title\n//           ? `${newContact.name} (${newContact.title})`\n//           : newContact.name,\n//         email: newContact.email,\n//         company: emailData.companyName,\n//       };\n\n//       setContacts([...contacts, contact]);\n//       setNewContact({ name: \"\", email: \"\", title: \"\" });\n//     }\n//   };\n\n//   const removeContact = (index) => {\n//     setContacts(contacts.filter((_, i) => i !== index));\n//   };\n\n//   const handleFileAttachment = (event) => {\n//     const files = Array.from(event.target.files);\n//     const maxSize = 25 * 1024 * 1024; // 25MB limit\n//     const allowedTypes = [\n//       \"application/pdf\",\n//       \"application/msword\",\n//       \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       \"text/plain\",\n//     ];\n\n//     const validFiles = files.filter((file) => {\n//       if (file.size > maxSize) {\n//         alert(`File \"${file.name}\" is too large. Maximum size is 25MB.`);\n//         return false;\n//       }\n//       if (!allowedTypes.includes(file.type)) {\n//         alert(\n//           `File \"${file.name}\" type not supported. Please use PDF, DOC, DOCX, or TXT files.`\n//         );\n//         return false;\n//       }\n//       return true;\n//     });\n\n//     validFiles.forEach((file) => {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         const base64 = reader.result.split(\",\")[1];\n//         setAttachments((prev) => [\n//           ...prev,\n//           {\n//             name: file.name,\n//             type: file.type,\n//             size: file.size,\n//             base64: base64,\n//           },\n//         ]);\n//       };\n//       reader.readAsDataURL(file);\n//     });\n//   };\n\n//   const removeAttachment = (index) => {\n//     setAttachments(attachments.filter((_, i) => i !== index));\n//   };\n\n//   const formatFileSize = (bytes) => {\n//     if (bytes === 0) return \"0 Bytes\";\n//     const k = 1024;\n//     const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n//     const i = Math.floor(Math.log(bytes) / Math.log(k));\n//     return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n//   };\n\n//   const personalizeContentForPreview = (content) => {\n//     const firstContactName =\n//       contacts.length > 0\n//         ? contacts[0].name.replace(/\\s*\\([^)]*\\)/g, \"\").trim()\n//         : emailData.hiringManagerName;\n\n//     return content\n//       .replace(/\\[CANDIDATE_NAME\\]/g, candidateInfo.candidateName)\n//       .replace(/\\{CANDIDATE_NAME\\}/g, candidateInfo.candidateName)\n//       .replace(/\\[RECIPIENT_NAME\\]/g, firstContactName)\n//       .replace(/\\{RECIPIENT_NAME\\}/g, firstContactName)\n//       .replace(/\\[HIRING_MANAGER\\]/g, firstContactName)\n//       .replace(/\\{HIRING_MANAGER\\}/g, firstContactName)\n//       .replace(/\\[Hiring Manager's Name\\]/g, firstContactName)\n//       .replace(/Hiring Manager's Name/g, firstContactName)\n//       .replace(/\\[COMPANY_NAME\\]/g, emailData.companyName)\n//       .replace(/\\{COMPANY_NAME\\}/g, emailData.companyName)\n//       .replace(/\\[Company Name\\]/g, emailData.companyName)\n//       .replace(/Company Name/g, emailData.companyName)\n//       .replace(/\\[company\\s*name\\]/gi, emailData.companyName)\n//       .replace(/\\[hiring\\s*manager\\]/gi, firstContactName)\n//       .replace(/\\[recipient\\s*name\\]/gi, firstContactName);\n//   };\n\n//   const handleSendEmails = async () => {\n//     if (contacts.length === 0) {\n//       alert(\"Please add at least one HR contact.\");\n//       return;\n//     }\n\n//     if (!emailData.companyName.trim()) {\n//       alert(\"Please enter the company name.\");\n//       return;\n//     }\n\n//     setSending(true);\n//     try {\n//       // Send the original template content, let backend handle personalization\n//       const response = await sendCustomEmails({\n//         candidateName: candidateInfo.candidateName,\n//         candidateEmail: candidateInfo.candidateEmail,\n//         candidatePhone: candidateInfo.candidatePhone,\n//         companyName: emailData.companyName,\n//         customSubject: emailData.subject, // Send original template\n//         customBody: emailData.body, // Send original template\n//         selectedContacts: contacts,\n//         attachments: attachments,\n//       });\n\n//       if (response.data.status === \"success\") {\n//         alert(\n//           `✅ Success! ${response.data.successCount} emails sent successfully out of ${response.data.totalEmails} total emails!`\n//         );\n//         onClose();\n//         setContacts([]);\n//         setAttachments([]);\n//       } else {\n//         alert(\n//           `❌ ${\n//             response.data.message ||\n//             \"Some emails failed to send. Check console for details.\"\n//           }`\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Send error:\", error);\n\n//       if (error.response) {\n//         alert(\n//           `❌ Backend error: ${error.response.data.message || \"Unknown error\"}`\n//         );\n//       } else if (error.request) {\n//         alert(\n//           \"❌ Cannot connect to backend. Make sure Spring Boot is running on port 8080.\"\n//         );\n//       } else {\n//         alert(`❌ Error: ${error.message}`);\n//       }\n//     } finally {\n//       setSending(false);\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   // Gmail-style CSS\n//   const styles = {\n//     overlay: {\n//       position: \"fixed\",\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: \"rgba(0, 0, 0, 0.4)\",\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       alignItems: \"center\",\n//       zIndex: 1000,\n//     },\n//     modal: {\n//       backgroundColor: \"white\",\n//       width: \"90%\",\n//       maxWidth: \"900px\",\n//       maxHeight: \"95vh\",\n//       borderRadius: \"8px\",\n//       boxShadow:\n//         \"0 24px 38px 3px rgba(0,0,0,0.14), 0 9px 46px 8px rgba(0,0,0,0.12), 0 11px 15px -7px rgba(0,0,0,0.2)\",\n//       overflow: \"hidden\",\n//       fontFamily:\n//         \"Google Sans, Roboto, RobotoDraft, Helvetica, Arial, sans-serif\",\n//     },\n//     header: {\n//       padding: \"16px 24px\",\n//       borderBottom: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     title: {\n//       fontSize: \"16px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       margin: 0,\n//     },\n//     closeButton: {\n//       background: \"none\",\n//       border: \"none\",\n//       fontSize: \"20px\",\n//       cursor: \"pointer\",\n//       color: \"#5f6368\",\n//       padding: \"8px\",\n//       borderRadius: \"4px\",\n//     },\n//     content: {\n//       padding: \"24px\",\n//       overflowY: \"auto\",\n//       maxHeight: \"calc(95vh - 140px)\",\n//     },\n//     grid: {\n//       display: \"grid\",\n//       gridTemplateColumns: \"1fr 1fr\",\n//       gap: \"24px\",\n//     },\n//     section: {\n//       marginBottom: \"24px\",\n//     },\n//     sectionTitle: {\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       marginBottom: \"12px\",\n//       margin: \"0 0 12px 0\",\n//     },\n//     input: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"inherit\",\n//       outline: \"none\",\n//       transition: \"border-color 0.2s\",\n//     },\n//     textarea: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"Roboto Mono, monospace\",\n//       outline: \"none\",\n//       resize: \"vertical\",\n//       lineHeight: \"1.4\",\n//     },\n//     button: {\n//       padding: \"8px 16px\",\n//       border: \"none\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       cursor: \"pointer\",\n//       transition: \"all 0.2s\",\n//     },\n//     primaryButton: {\n//       backgroundColor: \"#1a73e8\",\n//       color: \"white\",\n//     },\n//     secondaryButton: {\n//       backgroundColor: \"#f8f9fa\",\n//       color: \"#3c4043\",\n//       border: \"1px solid #dadce0\",\n//     },\n//     successButton: {\n//       backgroundColor: \"#137333\",\n//       color: \"white\",\n//     },\n//     contactItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"8px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     attachmentItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"8px 12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"4px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     preview: {\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       padding: \"16px\",\n//       backgroundColor: \"#f8f9fa\",\n//       fontSize: \"13px\",\n//     },\n//     footer: {\n//       padding: \"16px 24px\",\n//       borderTop: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"flex-end\",\n//       gap: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     tip: {\n//       fontSize: \"12px\",\n//       color: \"#5f6368\",\n//       marginTop: \"8px\",\n//       padding: \"12px\",\n//       backgroundColor: \"#e8f0fe\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #d2e3fc\",\n//     },\n//   };\n\n//   return (\n//     <div style={styles.overlay}>\n//       <div style={styles.modal}>\n//         {/* Header */}\n//         <div style={styles.header}>\n//           <h2 style={styles.title}>New Message</h2>\n//           <button\n//             onClick={onClose}\n//             style={styles.closeButton}\n//             onMouseEnter={(e) => (e.target.style.backgroundColor = \"#f1f3f4\")}\n//             onMouseLeave={(e) =>\n//               (e.target.style.backgroundColor = \"transparent\")\n//             }\n//           >\n//             ×\n//           </button>\n//         </div>\n\n//         {/* Content */}\n//         <div style={styles.content}>\n//           <div style={styles.grid}>\n//             {/* Left Column */}\n//             <div>\n//               {/* Candidate Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Your Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Your Name\"\n//                     value={candidateInfo.candidateName}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"Your Email\"\n//                     value={candidateInfo.candidateEmail}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateEmail: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"tel\"\n//                     placeholder=\"Your Phone\"\n//                     value={candidateInfo.candidatePhone}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidatePhone: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Company Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Company Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Company Name\"\n//                     value={emailData.companyName}\n//                     onChange={(e) =>\n//                       setEmailData({\n//                         ...emailData,\n//                         companyName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Add HR Contacts */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Add HR Contacts</h3>\n//                 <div\n//                   style={{ display: \"grid\", gap: \"12px\", marginBottom: \"16px\" }}\n//                 >\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"HR Name\"\n//                     value={newContact.name}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, name: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"HR Email\"\n//                     value={newContact.email}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, email: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Job Title (optional)\"\n//                     value={newContact.title}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, title: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <button\n//                   onClick={addContact}\n//                   disabled={!newContact.name || !newContact.email}\n//                   style={{\n//                     ...styles.button,\n//                     ...styles.successButton,\n//                     opacity: !newContact.name || !newContact.email ? 0.5 : 1,\n//                   }}\n//                 >\n//                   Add Contact\n//                 </button>\n//               </div>\n\n//               {/* Contact List */}\n//               {contacts.length > 0 && (\n//                 <div style={styles.section}>\n//                   <h3 style={styles.sectionTitle}>\n//                     HR Contacts ({contacts.length})\n//                   </h3>\n//                   <div style={{ maxHeight: \"200px\", overflowY: \"auto\" }}>\n//                     {contacts.map((contact, index) => (\n//                       <div key={index} style={styles.contactItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"14px\" }}>\n//                             {contact.name}\n//                           </div>\n//                           <div style={{ fontSize: \"12px\", color: \"#5f6368\" }}>\n//                             {contact.email}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeContact(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Right Column */}\n//             <div>\n//               {/* Email Editor */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Email Content</h3>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Subject:\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     value={emailData.subject}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, subject: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Body:\n//                   </label>\n//                   <textarea\n//                     value={emailData.body}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, body: e.target.value })\n//                     }\n//                     rows=\"10\"\n//                     style={styles.textarea}\n//                   />\n//                 </div>\n//                 <div style={styles.tip}>\n//                   💡 Use placeholders: [CANDIDATE_NAME], [RECIPIENT_NAME],\n//                   [COMPANY_NAME], [HIRING_MANAGER]\n//                 </div>\n//               </div>\n\n//               {/* File Attachments */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Attachments</h3>\n//                 <input\n//                   type=\"file\"\n//                   multiple\n//                   accept=\".pdf,.doc,.docx,.txt\"\n//                   onChange={handleFileAttachment}\n//                   style={{ marginBottom: \"12px\" }}\n//                 />\n//                 <div\n//                   style={{\n//                     fontSize: \"12px\",\n//                     color: \"#5f6368\",\n//                     marginBottom: \"16px\",\n//                   }}\n//                 >\n//                   Supported: PDF, DOC, DOCX, TXT (Max 25MB each)\n//                 </div>\n\n//                 {attachments.length > 0 && (\n//                   <div>\n//                     <h4 style={{ ...styles.sectionTitle, fontSize: \"13px\" }}>\n//                       Attached Files ({attachments.length})\n//                     </h4>\n//                     {attachments.map((file, index) => (\n//                       <div key={index} style={styles.attachmentItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"13px\" }}>\n//                             {file.name}\n//                           </div>\n//                           <div style={{ fontSize: \"11px\", color: \"#5f6368\" }}>\n//                             {formatFileSize(file.size)}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeAttachment(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n\n//               {/* Preview */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Preview (Sample)</h3>\n//                 <div style={styles.preview}>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>To:</strong>{\" \"}\n//                     {contacts.length > 0 ? contacts[0].email : \"HR Email\"}\n//                   </div>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>Subject:</strong>{\" \"}\n//                     {personalizeContentForPreview(emailData.subject)}\n//                   </div>\n//                   <div\n//                     style={{\n//                       whiteSpace: \"pre-line\",\n//                       maxHeight: \"120px\",\n//                       overflow: \"auto\",\n//                     }}\n//                   >\n//                     {personalizeContentForPreview(emailData.body)}\n//                   </div>\n//                   {contacts.length > 1 && (\n//                     <div\n//                       style={{\n//                         marginTop: \"12px\",\n//                         fontSize: \"11px\",\n//                         color: \"#5f6368\",\n//                         fontStyle: \"italic\",\n//                       }}\n//                     >\n//                       Note: Each email will be personalized with the individual\n//                       HR contact's name\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div style={styles.footer}>\n//           <button\n//             onClick={onClose}\n//             style={{\n//               ...styles.button,\n//               ...styles.secondaryButton,\n//             }}\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSendEmails}\n//             disabled={\n//               sending || contacts.length === 0 || !emailData.companyName.trim()\n//             }\n//             style={{\n//               ...styles.button,\n//               ...styles.primaryButton,\n//               opacity:\n//                 contacts.length > 0 && emailData.companyName.trim() ? 1 : 0.5,\n//             }}\n//           >\n//             {sending ? \"Sending...\" : `Send to ${contacts.length} Contact(s)`}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ColdEmailModal;\n\nimport React, { useState, useEffect } from \"react\";\nimport { sendCustomEmails } from \"../services/coldEmailService\";\nimport \"../CSS/ColdEmailModal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColdEmailModal = ({\n  isOpen,\n  onClose,\n  coldEmail,\n  companyName\n}) => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [newContact, setNewContact] = useState({\n    name: \"\",\n    email: \"\",\n    title: \"\"\n  });\n  const [candidateInfo, setCandidateInfo] = useState({\n    candidateName: \"Mahaboob Pasha Mohammad\",\n    candidateEmail: \"mahaboobpashamohammad8@gmail.com\",\n    candidatePhone: \"3143056056\"\n  });\n  const [emailData, setEmailData] = useState({\n    subject: \"\",\n    body: \"\",\n    companyName: companyName || \"\",\n    hiringManagerName: \"Hiring Manager\"\n  });\n  const [attachments, setAttachments] = useState([]);\n  const [sending, setSending] = useState(false);\n\n  // Initialize email data when modal opens\n  useEffect(() => {\n    if (isOpen && coldEmail) {\n      var _coldEmail$match, _coldEmail$match$;\n      const emailSubject = ((_coldEmail$match = coldEmail.match(/Subject:\\s*(.*)/i)) === null || _coldEmail$match === void 0 ? void 0 : (_coldEmail$match$ = _coldEmail$match[1]) === null || _coldEmail$match$ === void 0 ? void 0 : _coldEmail$match$.trim()) || \"Job Application\";\n      const emailBody = coldEmail.replace(/Subject:.*\\n?/i, \"\").trim();\n      setEmailData({\n        subject: emailSubject,\n        body: emailBody,\n        companyName: companyName || \"\",\n        hiringManagerName: \"Hiring Manager\"\n      });\n    }\n  }, [isOpen, coldEmail, companyName]);\n  const addContact = () => {\n    if (newContact.name && newContact.email) {\n      const contact = {\n        name: newContact.title ? `${newContact.name} (${newContact.title})` : newContact.name,\n        email: newContact.email,\n        company: emailData.companyName\n      };\n      setContacts([...contacts, contact]);\n      setNewContact({\n        name: \"\",\n        email: \"\",\n        title: \"\"\n      });\n    }\n  };\n  const removeContact = index => {\n    setContacts(contacts.filter((_, i) => i !== index));\n  };\n  const handleFileAttachment = event => {\n    const files = Array.from(event.target.files);\n    const maxSize = 25 * 1024 * 1024; // 25MB limit\n    const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", \"text/plain\"];\n    const validFiles = files.filter(file => {\n      if (file.size > maxSize) {\n        alert(`File \"${file.name}\" is too large. Maximum size is 25MB.`);\n        return false;\n      }\n      if (!allowedTypes.includes(file.type)) {\n        alert(`File \"${file.name}\" type not supported. Please use PDF, DOC, DOCX, or TXT files.`);\n        return false;\n      }\n      return true;\n    });\n    validFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64 = reader.result.split(\",\")[1];\n        setAttachments(prev => [...prev, {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          base64: base64\n        }]);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n  const removeAttachment = index => {\n    setAttachments(attachments.filter((_, i) => i !== index));\n  };\n  const formatFileSize = bytes => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n  const personalizeContentForPreview = content => {\n    const firstContactName = contacts.length > 0 ? contacts[0].name.replace(/\\s*\\([^)]*\\)/g, \"\").trim() : emailData.hiringManagerName;\n    return content.replace(/\\[CANDIDATE_NAME\\]/g, candidateInfo.candidateName).replace(/\\{CANDIDATE_NAME\\}/g, candidateInfo.candidateName).replace(/\\[RECIPIENT_NAME\\]/g, firstContactName).replace(/\\{RECIPIENT_NAME\\}/g, firstContactName).replace(/\\[HIRING_MANAGER\\]/g, firstContactName).replace(/\\{HIRING_MANAGER\\}/g, firstContactName).replace(/\\[Hiring Manager's Name\\]/g, firstContactName).replace(/Hiring Manager's Name/g, firstContactName).replace(/\\[COMPANY_NAME\\]/g, emailData.companyName).replace(/\\{COMPANY_NAME\\}/g, emailData.companyName).replace(/\\[Company Name\\]/g, emailData.companyName).replace(/Company Name/g, emailData.companyName).replace(/\\[company\\s*name\\]/gi, emailData.companyName).replace(/\\[hiring\\s*manager\\]/gi, firstContactName).replace(/\\[recipient\\s*name\\]/gi, firstContactName);\n  };\n  const handleSendEmails = async () => {\n    if (contacts.length === 0) {\n      alert(\"Please add at least one HR contact.\");\n      return;\n    }\n    if (!emailData.companyName.trim()) {\n      alert(\"Please enter the company name.\");\n      return;\n    }\n    setSending(true);\n    try {\n      // Send the original template content, let backend handle personalization\n      const response = await sendCustomEmails({\n        candidateName: candidateInfo.candidateName,\n        candidateEmail: candidateInfo.candidateEmail,\n        candidatePhone: candidateInfo.candidatePhone,\n        companyName: emailData.companyName,\n        customSubject: emailData.subject,\n        // Send original template\n        customBody: emailData.body,\n        // Send original template\n        selectedContacts: contacts,\n        attachments: attachments\n      });\n      if (response.data.status === \"success\") {\n        alert(`✅ Success! ${response.data.successCount} emails sent successfully out of ${response.data.totalEmails} total emails!`);\n        onClose();\n        setContacts([]);\n        setAttachments([]);\n      } else {\n        alert(`❌ ${response.data.message || \"Some emails failed to send. Check console for details.\"}`);\n      }\n    } catch (error) {\n      console.error(\"Send error:\", error);\n      if (error.response) {\n        alert(`❌ Backend error: ${error.response.data.message || \"Unknown error\"}`);\n      } else if (error.request) {\n        alert(\"❌ Cannot connect to backend. Make sure Spring Boot is running on port 8080.\");\n      } else {\n        alert(`❌ Error: ${error.message}`);\n      }\n    } finally {\n      setSending(false);\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"modal-title\",\n          children: \"New Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"close-button\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: \"Your Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-grid\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Your Name\",\n                  value: candidateInfo.candidateName,\n                  onChange: e => setCandidateInfo({\n                    ...candidateInfo,\n                    candidateName: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 919,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  placeholder: \"Your Email\",\n                  value: candidateInfo.candidateEmail,\n                  onChange: e => setCandidateInfo({\n                    ...candidateInfo,\n                    candidateEmail: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 931,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"tel\",\n                  placeholder: \"Your Phone\",\n                  value: candidateInfo.candidatePhone,\n                  onChange: e => setCandidateInfo({\n                    ...candidateInfo,\n                    candidatePhone: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 943,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 918,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: \"Company Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 960,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-grid\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Company Name\",\n                  value: emailData.companyName,\n                  onChange: e => setEmailData({\n                    ...emailData,\n                    companyName: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 962,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 961,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 959,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: \"Add HR Contacts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 979,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-grid contact-inputs\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"HR Name\",\n                  value: newContact.name,\n                  onChange: e => setNewContact({\n                    ...newContact,\n                    name: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 981,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  placeholder: \"HR Email\",\n                  value: newContact.email,\n                  onChange: e => setNewContact({\n                    ...newContact,\n                    email: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 990,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Job Title (optional)\",\n                  value: newContact.title,\n                  onChange: e => setNewContact({\n                    ...newContact,\n                    title: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 999,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 980,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: addContact,\n                disabled: !newContact.name || !newContact.email,\n                className: `modal-button success-button ${!newContact.name || !newContact.email ? \"disabled\" : \"\"}`,\n                children: \"Add Contact\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1009,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 15\n            }, this), contacts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: [\"HR Contacts (\", contacts.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1023,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"contact-list\",\n                children: contacts.map((contact, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"contact-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"contact-name\",\n                      children: contact.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1030,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"contact-email\",\n                      children: contact.email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1031,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1029,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => removeContact(index),\n                    className: \"remove-button\",\n                    children: \"Remove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1033,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1028,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1026,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1022,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 914,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: \"Email Content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1050,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"email-field\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"field-label\",\n                  children: \"Subject:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1052,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: emailData.subject,\n                  onChange: e => setEmailData({\n                    ...emailData,\n                    subject: e.target.value\n                  }),\n                  className: \"modal-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1053,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1051,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"email-field\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"field-label\",\n                  children: \"Body:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1063,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  value: emailData.body,\n                  onChange: e => setEmailData({\n                    ...emailData,\n                    body: e.target.value\n                  }),\n                  rows: \"10\",\n                  className: \"modal-textarea\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1064,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tip\",\n                children: \"\\uD83D\\uDCA1 Use placeholders: [CANDIDATE_NAME], [RECIPIENT_NAME], [COMPANY_NAME], [HIRING_MANAGER]\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1049,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: \"Attachments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                multiple: true,\n                accept: \".pdf,.doc,.docx,.txt\",\n                onChange: handleFileAttachment,\n                className: \"file-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-help\",\n                children: \"Supported: PDF, DOC, DOCX, TXT (Max 25MB each)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1089,\n                columnNumber: 17\n              }, this), attachments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"attachment-title\",\n                  children: [\"Attached Files (\", attachments.length, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1095,\n                  columnNumber: 21\n                }, this), attachments.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"attachment-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"attachment-name\",\n                      children: file.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1101,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"attachment-size\",\n                      children: formatFileSize(file.size)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1102,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1100,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => removeAttachment(index),\n                    className: \"remove-button\",\n                    children: \"Remove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1106,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1099,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1094,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1080,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"section-title\",\n                children: \"Preview (Sample)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1120,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"email-preview\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"preview-field\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"To:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1123,\n                    columnNumber: 21\n                  }, this), \" \", contacts.length > 0 ? contacts[0].email : \"HR Email\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1122,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"preview-field\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Subject:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1127,\n                    columnNumber: 21\n                  }, this), \" \", personalizeContentForPreview(emailData.subject)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1126,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"preview-body\",\n                  children: personalizeContentForPreview(emailData.body)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1130,\n                  columnNumber: 19\n                }, this), contacts.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"preview-note\",\n                  children: \"Note: Each email will be personalized with the individual HR contact's name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1134,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1121,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1119,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1047,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"modal-button secondary-button\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendEmails,\n          disabled: sending || contacts.length === 0 || !emailData.companyName.trim(),\n          className: `modal-button primary-button ${contacts.length > 0 && emailData.companyName.trim() ? \"\" : \"disabled\"}`,\n          children: sending ? \"Sending...\" : `Send to ${contacts.length} Contact(s)`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 900,\n    columnNumber: 5\n  }, this);\n};\n_s(ColdEmailModal, \"GKs1xLFaSDHqTJ/JYaBJ4EWIQ2U=\");\n_c = ColdEmailModal;\nexport default ColdEmailModal;\nvar _c;\n$RefreshReg$(_c, \"ColdEmailModal\");","map":{"version":3,"names":["React","useState","useEffect","sendCustomEmails","jsxDEV","_jsxDEV","ColdEmailModal","isOpen","onClose","coldEmail","companyName","_s","contacts","setContacts","newContact","setNewContact","name","email","title","candidateInfo","setCandidateInfo","candidateName","candidateEmail","candidatePhone","emailData","setEmailData","subject","body","hiringManagerName","attachments","setAttachments","sending","setSending","_coldEmail$match","_coldEmail$match$","emailSubject","match","trim","emailBody","replace","addContact","contact","company","removeContact","index","filter","_","i","handleFileAttachment","event","files","Array","from","target","maxSize","allowedTypes","validFiles","file","size","alert","includes","type","forEach","reader","FileReader","onload","base64","result","split","prev","readAsDataURL","removeAttachment","formatFileSize","bytes","k","sizes","Math","floor","log","parseFloat","pow","toFixed","personalizeContentForPreview","content","firstContactName","length","handleSendEmails","response","customSubject","customBody","selectedContacts","data","status","successCount","totalEmails","message","error","console","request","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","value","onChange","e","disabled","map","rows","multiple","accept","_c","$RefreshReg$"],"sources":["/Users/maibupash/Desktop/MastersProjects/resuME/ResumeApp/Resume-FrontEnd/src/components/ColdEmailModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { sendCustomEmails } from \"../services/coldEmailService\";\n\n// const ColdEmailModal = ({ isOpen, onClose, coldEmail, companyName }) => {\n//   const [contacts, setContacts] = useState([]);\n//   const [newContact, setNewContact] = useState({\n//     name: \"\",\n//     email: \"\",\n//     title: \"\",\n//   });\n//   const [candidateInfo, setCandidateInfo] = useState({\n//     candidateName: \"Mahaboob Pasha Mohammad\",\n//     candidateEmail: \"mahaboobpashamohammad8@gmail.com\",\n//     candidatePhone: \"3143056056\",\n//   });\n//   const [emailData, setEmailData] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     companyName: companyName || \"\",\n//     hiringManagerName: \"Hiring Manager\",\n//   });\n//   const [attachments, setAttachments] = useState([]);\n//   const [sending, setSending] = useState(false);\n\n//   // Initialize email data when modal opens\n//   useEffect(() => {\n//     if (isOpen && coldEmail) {\n//       const emailSubject =\n//         coldEmail.match(/Subject:\\s*(.*)/i)?.[1]?.trim() || \"Job Application\";\n//       const emailBody = coldEmail.replace(/Subject:.*\\n?/i, \"\").trim();\n\n//       setEmailData({\n//         subject: emailSubject,\n//         body: emailBody,\n//         companyName: companyName || \"\",\n//         hiringManagerName: \"Hiring Manager\",\n//       });\n//     }\n//   }, [isOpen, coldEmail, companyName]);\n\n//   const addContact = () => {\n//     if (newContact.name && newContact.email) {\n//       const contact = {\n//         name: newContact.title\n//           ? `${newContact.name} (${newContact.title})`\n//           : newContact.name,\n//         email: newContact.email,\n//         company: emailData.companyName,\n//       };\n\n//       setContacts([...contacts, contact]);\n//       setNewContact({ name: \"\", email: \"\", title: \"\" });\n//     }\n//   };\n\n//   const removeContact = (index) => {\n//     setContacts(contacts.filter((_, i) => i !== index));\n//   };\n\n//   const handleFileAttachment = (event) => {\n//     const files = Array.from(event.target.files);\n//     const maxSize = 25 * 1024 * 1024; // 25MB limit\n//     const allowedTypes = [\n//       \"application/pdf\",\n//       \"application/msword\",\n//       \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       \"text/plain\",\n//     ];\n\n//     const validFiles = files.filter((file) => {\n//       if (file.size > maxSize) {\n//         alert(`File \"${file.name}\" is too large. Maximum size is 25MB.`);\n//         return false;\n//       }\n//       if (!allowedTypes.includes(file.type)) {\n//         alert(\n//           `File \"${file.name}\" type not supported. Please use PDF, DOC, DOCX, or TXT files.`\n//         );\n//         return false;\n//       }\n//       return true;\n//     });\n\n//     validFiles.forEach((file) => {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         const base64 = reader.result.split(\",\")[1];\n//         setAttachments((prev) => [\n//           ...prev,\n//           {\n//             name: file.name,\n//             type: file.type,\n//             size: file.size,\n//             base64: base64,\n//           },\n//         ]);\n//       };\n//       reader.readAsDataURL(file);\n//     });\n//   };\n\n//   const removeAttachment = (index) => {\n//     setAttachments(attachments.filter((_, i) => i !== index));\n//   };\n\n//   const formatFileSize = (bytes) => {\n//     if (bytes === 0) return \"0 Bytes\";\n//     const k = 1024;\n//     const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n//     const i = Math.floor(Math.log(bytes) / Math.log(k));\n//     return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n//   };\n\n//   const personalizeContentForPreview = (content) => {\n//     const firstContactName =\n//       contacts.length > 0\n//         ? contacts[0].name.replace(/\\s*\\([^)]*\\)/g, \"\").trim()\n//         : emailData.hiringManagerName;\n\n//     return content\n//       .replace(/\\[CANDIDATE_NAME\\]/g, candidateInfo.candidateName)\n//       .replace(/\\{CANDIDATE_NAME\\}/g, candidateInfo.candidateName)\n//       .replace(/\\[RECIPIENT_NAME\\]/g, firstContactName)\n//       .replace(/\\{RECIPIENT_NAME\\}/g, firstContactName)\n//       .replace(/\\[HIRING_MANAGER\\]/g, firstContactName)\n//       .replace(/\\{HIRING_MANAGER\\}/g, firstContactName)\n//       .replace(/\\[Hiring Manager's Name\\]/g, firstContactName)\n//       .replace(/Hiring Manager's Name/g, firstContactName)\n//       .replace(/\\[COMPANY_NAME\\]/g, emailData.companyName)\n//       .replace(/\\{COMPANY_NAME\\}/g, emailData.companyName)\n//       .replace(/\\[Company Name\\]/g, emailData.companyName)\n//       .replace(/Company Name/g, emailData.companyName)\n//       .replace(/\\[company\\s*name\\]/gi, emailData.companyName)\n//       .replace(/\\[hiring\\s*manager\\]/gi, firstContactName)\n//       .replace(/\\[recipient\\s*name\\]/gi, firstContactName);\n//   };\n\n//   const handleSendEmails = async () => {\n//     if (contacts.length === 0) {\n//       alert(\"Please add at least one HR contact.\");\n//       return;\n//     }\n\n//     if (!emailData.companyName.trim()) {\n//       alert(\"Please enter the company name.\");\n//       return;\n//     }\n\n//     setSending(true);\n//     try {\n//       // Send the original template content, let backend handle personalization\n//       const response = await sendCustomEmails({\n//         candidateName: candidateInfo.candidateName,\n//         candidateEmail: candidateInfo.candidateEmail,\n//         candidatePhone: candidateInfo.candidatePhone,\n//         companyName: emailData.companyName,\n//         customSubject: emailData.subject, // Send original template\n//         customBody: emailData.body, // Send original template\n//         selectedContacts: contacts,\n//         attachments: attachments,\n//       });\n\n//       if (response.data.status === \"success\") {\n//         alert(\n//           `✅ Success! ${response.data.successCount} emails sent successfully out of ${response.data.totalEmails} total emails!`\n//         );\n//         onClose();\n//         setContacts([]);\n//         setAttachments([]);\n//       } else {\n//         alert(\n//           `❌ ${\n//             response.data.message ||\n//             \"Some emails failed to send. Check console for details.\"\n//           }`\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Send error:\", error);\n\n//       if (error.response) {\n//         alert(\n//           `❌ Backend error: ${error.response.data.message || \"Unknown error\"}`\n//         );\n//       } else if (error.request) {\n//         alert(\n//           \"❌ Cannot connect to backend. Make sure Spring Boot is running on port 8080.\"\n//         );\n//       } else {\n//         alert(`❌ Error: ${error.message}`);\n//       }\n//     } finally {\n//       setSending(false);\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   // Gmail-style CSS\n//   const styles = {\n//     overlay: {\n//       position: \"fixed\",\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: \"rgba(0, 0, 0, 0.4)\",\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       alignItems: \"center\",\n//       zIndex: 1000,\n//     },\n//     modal: {\n//       backgroundColor: \"white\",\n//       width: \"90%\",\n//       maxWidth: \"900px\",\n//       maxHeight: \"95vh\",\n//       borderRadius: \"8px\",\n//       boxShadow:\n//         \"0 24px 38px 3px rgba(0,0,0,0.14), 0 9px 46px 8px rgba(0,0,0,0.12), 0 11px 15px -7px rgba(0,0,0,0.2)\",\n//       overflow: \"hidden\",\n//       fontFamily:\n//         \"Google Sans, Roboto, RobotoDraft, Helvetica, Arial, sans-serif\",\n//     },\n//     header: {\n//       padding: \"16px 24px\",\n//       borderBottom: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     title: {\n//       fontSize: \"16px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       margin: 0,\n//     },\n//     closeButton: {\n//       background: \"none\",\n//       border: \"none\",\n//       fontSize: \"20px\",\n//       cursor: \"pointer\",\n//       color: \"#5f6368\",\n//       padding: \"8px\",\n//       borderRadius: \"4px\",\n//     },\n//     content: {\n//       padding: \"24px\",\n//       overflowY: \"auto\",\n//       maxHeight: \"calc(95vh - 140px)\",\n//     },\n//     grid: {\n//       display: \"grid\",\n//       gridTemplateColumns: \"1fr 1fr\",\n//       gap: \"24px\",\n//     },\n//     section: {\n//       marginBottom: \"24px\",\n//     },\n//     sectionTitle: {\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       marginBottom: \"12px\",\n//       margin: \"0 0 12px 0\",\n//     },\n//     input: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"inherit\",\n//       outline: \"none\",\n//       transition: \"border-color 0.2s\",\n//     },\n//     textarea: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"Roboto Mono, monospace\",\n//       outline: \"none\",\n//       resize: \"vertical\",\n//       lineHeight: \"1.4\",\n//     },\n//     button: {\n//       padding: \"8px 16px\",\n//       border: \"none\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       cursor: \"pointer\",\n//       transition: \"all 0.2s\",\n//     },\n//     primaryButton: {\n//       backgroundColor: \"#1a73e8\",\n//       color: \"white\",\n//     },\n//     secondaryButton: {\n//       backgroundColor: \"#f8f9fa\",\n//       color: \"#3c4043\",\n//       border: \"1px solid #dadce0\",\n//     },\n//     successButton: {\n//       backgroundColor: \"#137333\",\n//       color: \"white\",\n//     },\n//     contactItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"8px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     attachmentItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"8px 12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"4px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     preview: {\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       padding: \"16px\",\n//       backgroundColor: \"#f8f9fa\",\n//       fontSize: \"13px\",\n//     },\n//     footer: {\n//       padding: \"16px 24px\",\n//       borderTop: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"flex-end\",\n//       gap: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     tip: {\n//       fontSize: \"12px\",\n//       color: \"#5f6368\",\n//       marginTop: \"8px\",\n//       padding: \"12px\",\n//       backgroundColor: \"#e8f0fe\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #d2e3fc\",\n//     },\n//   };\n\n//   return (\n//     <div style={styles.overlay}>\n//       <div style={styles.modal}>\n//         {/* Header */}\n//         <div style={styles.header}>\n//           <h2 style={styles.title}>New Message</h2>\n//           <button\n//             onClick={onClose}\n//             style={styles.closeButton}\n//             onMouseEnter={(e) => (e.target.style.backgroundColor = \"#f1f3f4\")}\n//             onMouseLeave={(e) =>\n//               (e.target.style.backgroundColor = \"transparent\")\n//             }\n//           >\n//             ×\n//           </button>\n//         </div>\n\n//         {/* Content */}\n//         <div style={styles.content}>\n//           <div style={styles.grid}>\n//             {/* Left Column */}\n//             <div>\n//               {/* Candidate Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Your Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Your Name\"\n//                     value={candidateInfo.candidateName}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"Your Email\"\n//                     value={candidateInfo.candidateEmail}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateEmail: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"tel\"\n//                     placeholder=\"Your Phone\"\n//                     value={candidateInfo.candidatePhone}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidatePhone: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Company Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Company Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Company Name\"\n//                     value={emailData.companyName}\n//                     onChange={(e) =>\n//                       setEmailData({\n//                         ...emailData,\n//                         companyName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Add HR Contacts */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Add HR Contacts</h3>\n//                 <div\n//                   style={{ display: \"grid\", gap: \"12px\", marginBottom: \"16px\" }}\n//                 >\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"HR Name\"\n//                     value={newContact.name}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, name: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"HR Email\"\n//                     value={newContact.email}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, email: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Job Title (optional)\"\n//                     value={newContact.title}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, title: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <button\n//                   onClick={addContact}\n//                   disabled={!newContact.name || !newContact.email}\n//                   style={{\n//                     ...styles.button,\n//                     ...styles.successButton,\n//                     opacity: !newContact.name || !newContact.email ? 0.5 : 1,\n//                   }}\n//                 >\n//                   Add Contact\n//                 </button>\n//               </div>\n\n//               {/* Contact List */}\n//               {contacts.length > 0 && (\n//                 <div style={styles.section}>\n//                   <h3 style={styles.sectionTitle}>\n//                     HR Contacts ({contacts.length})\n//                   </h3>\n//                   <div style={{ maxHeight: \"200px\", overflowY: \"auto\" }}>\n//                     {contacts.map((contact, index) => (\n//                       <div key={index} style={styles.contactItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"14px\" }}>\n//                             {contact.name}\n//                           </div>\n//                           <div style={{ fontSize: \"12px\", color: \"#5f6368\" }}>\n//                             {contact.email}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeContact(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Right Column */}\n//             <div>\n//               {/* Email Editor */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Email Content</h3>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Subject:\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     value={emailData.subject}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, subject: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Body:\n//                   </label>\n//                   <textarea\n//                     value={emailData.body}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, body: e.target.value })\n//                     }\n//                     rows=\"10\"\n//                     style={styles.textarea}\n//                   />\n//                 </div>\n//                 <div style={styles.tip}>\n//                   💡 Use placeholders: [CANDIDATE_NAME], [RECIPIENT_NAME],\n//                   [COMPANY_NAME], [HIRING_MANAGER]\n//                 </div>\n//               </div>\n\n//               {/* File Attachments */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Attachments</h3>\n//                 <input\n//                   type=\"file\"\n//                   multiple\n//                   accept=\".pdf,.doc,.docx,.txt\"\n//                   onChange={handleFileAttachment}\n//                   style={{ marginBottom: \"12px\" }}\n//                 />\n//                 <div\n//                   style={{\n//                     fontSize: \"12px\",\n//                     color: \"#5f6368\",\n//                     marginBottom: \"16px\",\n//                   }}\n//                 >\n//                   Supported: PDF, DOC, DOCX, TXT (Max 25MB each)\n//                 </div>\n\n//                 {attachments.length > 0 && (\n//                   <div>\n//                     <h4 style={{ ...styles.sectionTitle, fontSize: \"13px\" }}>\n//                       Attached Files ({attachments.length})\n//                     </h4>\n//                     {attachments.map((file, index) => (\n//                       <div key={index} style={styles.attachmentItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"13px\" }}>\n//                             {file.name}\n//                           </div>\n//                           <div style={{ fontSize: \"11px\", color: \"#5f6368\" }}>\n//                             {formatFileSize(file.size)}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeAttachment(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n\n//               {/* Preview */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Preview (Sample)</h3>\n//                 <div style={styles.preview}>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>To:</strong>{\" \"}\n//                     {contacts.length > 0 ? contacts[0].email : \"HR Email\"}\n//                   </div>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>Subject:</strong>{\" \"}\n//                     {personalizeContentForPreview(emailData.subject)}\n//                   </div>\n//                   <div\n//                     style={{\n//                       whiteSpace: \"pre-line\",\n//                       maxHeight: \"120px\",\n//                       overflow: \"auto\",\n//                     }}\n//                   >\n//                     {personalizeContentForPreview(emailData.body)}\n//                   </div>\n//                   {contacts.length > 1 && (\n//                     <div\n//                       style={{\n//                         marginTop: \"12px\",\n//                         fontSize: \"11px\",\n//                         color: \"#5f6368\",\n//                         fontStyle: \"italic\",\n//                       }}\n//                     >\n//                       Note: Each email will be personalized with the individual\n//                       HR contact's name\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div style={styles.footer}>\n//           <button\n//             onClick={onClose}\n//             style={{\n//               ...styles.button,\n//               ...styles.secondaryButton,\n//             }}\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSendEmails}\n//             disabled={\n//               sending || contacts.length === 0 || !emailData.companyName.trim()\n//             }\n//             style={{\n//               ...styles.button,\n//               ...styles.primaryButton,\n//               opacity:\n//                 contacts.length > 0 && emailData.companyName.trim() ? 1 : 0.5,\n//             }}\n//           >\n//             {sending ? \"Sending...\" : `Send to ${contacts.length} Contact(s)`}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ColdEmailModal;\n\nimport React, { useState, useEffect } from \"react\";\nimport { sendCustomEmails } from \"../services/coldEmailService\";\nimport \"../CSS/ColdEmailModal.css\";\n\nconst ColdEmailModal = ({ isOpen, onClose, coldEmail, companyName }) => {\n  const [contacts, setContacts] = useState([]);\n  const [newContact, setNewContact] = useState({\n    name: \"\",\n    email: \"\",\n    title: \"\",\n  });\n  const [candidateInfo, setCandidateInfo] = useState({\n    candidateName: \"Mahaboob Pasha Mohammad\",\n    candidateEmail: \"mahaboobpashamohammad8@gmail.com\",\n    candidatePhone: \"3143056056\",\n  });\n  const [emailData, setEmailData] = useState({\n    subject: \"\",\n    body: \"\",\n    companyName: companyName || \"\",\n    hiringManagerName: \"Hiring Manager\",\n  });\n  const [attachments, setAttachments] = useState([]);\n  const [sending, setSending] = useState(false);\n\n  // Initialize email data when modal opens\n  useEffect(() => {\n    if (isOpen && coldEmail) {\n      const emailSubject =\n        coldEmail.match(/Subject:\\s*(.*)/i)?.[1]?.trim() || \"Job Application\";\n      const emailBody = coldEmail.replace(/Subject:.*\\n?/i, \"\").trim();\n\n      setEmailData({\n        subject: emailSubject,\n        body: emailBody,\n        companyName: companyName || \"\",\n        hiringManagerName: \"Hiring Manager\",\n      });\n    }\n  }, [isOpen, coldEmail, companyName]);\n\n  const addContact = () => {\n    if (newContact.name && newContact.email) {\n      const contact = {\n        name: newContact.title\n          ? `${newContact.name} (${newContact.title})`\n          : newContact.name,\n        email: newContact.email,\n        company: emailData.companyName,\n      };\n\n      setContacts([...contacts, contact]);\n      setNewContact({ name: \"\", email: \"\", title: \"\" });\n    }\n  };\n\n  const removeContact = (index) => {\n    setContacts(contacts.filter((_, i) => i !== index));\n  };\n\n  const handleFileAttachment = (event) => {\n    const files = Array.from(event.target.files);\n    const maxSize = 25 * 1024 * 1024; // 25MB limit\n    const allowedTypes = [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      \"text/plain\",\n    ];\n\n    const validFiles = files.filter((file) => {\n      if (file.size > maxSize) {\n        alert(`File \"${file.name}\" is too large. Maximum size is 25MB.`);\n        return false;\n      }\n      if (!allowedTypes.includes(file.type)) {\n        alert(\n          `File \"${file.name}\" type not supported. Please use PDF, DOC, DOCX, or TXT files.`\n        );\n        return false;\n      }\n      return true;\n    });\n\n    validFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64 = reader.result.split(\",\")[1];\n        setAttachments((prev) => [\n          ...prev,\n          {\n            name: file.name,\n            type: file.type,\n            size: file.size,\n            base64: base64,\n          },\n        ]);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeAttachment = (index) => {\n    setAttachments(attachments.filter((_, i) => i !== index));\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const personalizeContentForPreview = (content) => {\n    const firstContactName =\n      contacts.length > 0\n        ? contacts[0].name.replace(/\\s*\\([^)]*\\)/g, \"\").trim()\n        : emailData.hiringManagerName;\n\n    return content\n      .replace(/\\[CANDIDATE_NAME\\]/g, candidateInfo.candidateName)\n      .replace(/\\{CANDIDATE_NAME\\}/g, candidateInfo.candidateName)\n      .replace(/\\[RECIPIENT_NAME\\]/g, firstContactName)\n      .replace(/\\{RECIPIENT_NAME\\}/g, firstContactName)\n      .replace(/\\[HIRING_MANAGER\\]/g, firstContactName)\n      .replace(/\\{HIRING_MANAGER\\}/g, firstContactName)\n      .replace(/\\[Hiring Manager's Name\\]/g, firstContactName)\n      .replace(/Hiring Manager's Name/g, firstContactName)\n      .replace(/\\[COMPANY_NAME\\]/g, emailData.companyName)\n      .replace(/\\{COMPANY_NAME\\}/g, emailData.companyName)\n      .replace(/\\[Company Name\\]/g, emailData.companyName)\n      .replace(/Company Name/g, emailData.companyName)\n      .replace(/\\[company\\s*name\\]/gi, emailData.companyName)\n      .replace(/\\[hiring\\s*manager\\]/gi, firstContactName)\n      .replace(/\\[recipient\\s*name\\]/gi, firstContactName);\n  };\n\n  const handleSendEmails = async () => {\n    if (contacts.length === 0) {\n      alert(\"Please add at least one HR contact.\");\n      return;\n    }\n\n    if (!emailData.companyName.trim()) {\n      alert(\"Please enter the company name.\");\n      return;\n    }\n\n    setSending(true);\n    try {\n      // Send the original template content, let backend handle personalization\n      const response = await sendCustomEmails({\n        candidateName: candidateInfo.candidateName,\n        candidateEmail: candidateInfo.candidateEmail,\n        candidatePhone: candidateInfo.candidatePhone,\n        companyName: emailData.companyName,\n        customSubject: emailData.subject, // Send original template\n        customBody: emailData.body, // Send original template\n        selectedContacts: contacts,\n        attachments: attachments,\n      });\n\n      if (response.data.status === \"success\") {\n        alert(\n          `✅ Success! ${response.data.successCount} emails sent successfully out of ${response.data.totalEmails} total emails!`\n        );\n        onClose();\n        setContacts([]);\n        setAttachments([]);\n      } else {\n        alert(\n          `❌ ${\n            response.data.message ||\n            \"Some emails failed to send. Check console for details.\"\n          }`\n        );\n      }\n    } catch (error) {\n      console.error(\"Send error:\", error);\n\n      if (error.response) {\n        alert(\n          `❌ Backend error: ${error.response.data.message || \"Unknown error\"}`\n        );\n      } else if (error.request) {\n        alert(\n          \"❌ Cannot connect to backend. Make sure Spring Boot is running on port 8080.\"\n        );\n      } else {\n        alert(`❌ Error: ${error.message}`);\n      }\n    } finally {\n      setSending(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        {/* Header */}\n        <div className=\"modal-header\">\n          <h2 className=\"modal-title\">New Message</h2>\n          <button onClick={onClose} className=\"close-button\">\n            ×\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"modal-content\">\n          <div className=\"modal-grid\">\n            {/* Left Column */}\n            <div>\n              {/* Candidate Info */}\n              <div className=\"modal-section\">\n                <h3 className=\"section-title\">Your Information</h3>\n                <div className=\"input-grid\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Your Name\"\n                    value={candidateInfo.candidateName}\n                    onChange={(e) =>\n                      setCandidateInfo({\n                        ...candidateInfo,\n                        candidateName: e.target.value,\n                      })\n                    }\n                    className=\"modal-input\"\n                  />\n                  <input\n                    type=\"email\"\n                    placeholder=\"Your Email\"\n                    value={candidateInfo.candidateEmail}\n                    onChange={(e) =>\n                      setCandidateInfo({\n                        ...candidateInfo,\n                        candidateEmail: e.target.value,\n                      })\n                    }\n                    className=\"modal-input\"\n                  />\n                  <input\n                    type=\"tel\"\n                    placeholder=\"Your Phone\"\n                    value={candidateInfo.candidatePhone}\n                    onChange={(e) =>\n                      setCandidateInfo({\n                        ...candidateInfo,\n                        candidatePhone: e.target.value,\n                      })\n                    }\n                    className=\"modal-input\"\n                  />\n                </div>\n              </div>\n\n              {/* Company Info */}\n              <div className=\"modal-section\">\n                <h3 className=\"section-title\">Company Information</h3>\n                <div className=\"input-grid\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Company Name\"\n                    value={emailData.companyName}\n                    onChange={(e) =>\n                      setEmailData({\n                        ...emailData,\n                        companyName: e.target.value,\n                      })\n                    }\n                    className=\"modal-input\"\n                  />\n                </div>\n              </div>\n\n              {/* Add HR Contacts */}\n              <div className=\"modal-section\">\n                <h3 className=\"section-title\">Add HR Contacts</h3>\n                <div className=\"input-grid contact-inputs\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"HR Name\"\n                    value={newContact.name}\n                    onChange={(e) =>\n                      setNewContact({ ...newContact, name: e.target.value })\n                    }\n                    className=\"modal-input\"\n                  />\n                  <input\n                    type=\"email\"\n                    placeholder=\"HR Email\"\n                    value={newContact.email}\n                    onChange={(e) =>\n                      setNewContact({ ...newContact, email: e.target.value })\n                    }\n                    className=\"modal-input\"\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Job Title (optional)\"\n                    value={newContact.title}\n                    onChange={(e) =>\n                      setNewContact({ ...newContact, title: e.target.value })\n                    }\n                    className=\"modal-input\"\n                  />\n                </div>\n                <button\n                  onClick={addContact}\n                  disabled={!newContact.name || !newContact.email}\n                  className={`modal-button success-button ${\n                    !newContact.name || !newContact.email ? \"disabled\" : \"\"\n                  }`}\n                >\n                  Add Contact\n                </button>\n              </div>\n\n              {/* Contact List */}\n              {contacts.length > 0 && (\n                <div className=\"modal-section\">\n                  <h3 className=\"section-title\">\n                    HR Contacts ({contacts.length})\n                  </h3>\n                  <div className=\"contact-list\">\n                    {contacts.map((contact, index) => (\n                      <div key={index} className=\"contact-item\">\n                        <div>\n                          <div className=\"contact-name\">{contact.name}</div>\n                          <div className=\"contact-email\">{contact.email}</div>\n                        </div>\n                        <button\n                          onClick={() => removeContact(index)}\n                          className=\"remove-button\"\n                        >\n                          Remove\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Right Column */}\n            <div>\n              {/* Email Editor */}\n              <div className=\"modal-section\">\n                <h3 className=\"section-title\">Email Content</h3>\n                <div className=\"email-field\">\n                  <label className=\"field-label\">Subject:</label>\n                  <input\n                    type=\"text\"\n                    value={emailData.subject}\n                    onChange={(e) =>\n                      setEmailData({ ...emailData, subject: e.target.value })\n                    }\n                    className=\"modal-input\"\n                  />\n                </div>\n                <div className=\"email-field\">\n                  <label className=\"field-label\">Body:</label>\n                  <textarea\n                    value={emailData.body}\n                    onChange={(e) =>\n                      setEmailData({ ...emailData, body: e.target.value })\n                    }\n                    rows=\"10\"\n                    className=\"modal-textarea\"\n                  />\n                </div>\n                <div className=\"tip\">\n                  💡 Use placeholders: [CANDIDATE_NAME], [RECIPIENT_NAME],\n                  [COMPANY_NAME], [HIRING_MANAGER]\n                </div>\n              </div>\n\n              {/* File Attachments */}\n              <div className=\"modal-section\">\n                <h3 className=\"section-title\">Attachments</h3>\n                <input\n                  type=\"file\"\n                  multiple\n                  accept=\".pdf,.doc,.docx,.txt\"\n                  onChange={handleFileAttachment}\n                  className=\"file-input\"\n                />\n                <div className=\"file-help\">\n                  Supported: PDF, DOC, DOCX, TXT (Max 25MB each)\n                </div>\n\n                {attachments.length > 0 && (\n                  <div>\n                    <h4 className=\"attachment-title\">\n                      Attached Files ({attachments.length})\n                    </h4>\n                    {attachments.map((file, index) => (\n                      <div key={index} className=\"attachment-item\">\n                        <div>\n                          <div className=\"attachment-name\">{file.name}</div>\n                          <div className=\"attachment-size\">\n                            {formatFileSize(file.size)}\n                          </div>\n                        </div>\n                        <button\n                          onClick={() => removeAttachment(index)}\n                          className=\"remove-button\"\n                        >\n                          Remove\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Preview */}\n              <div className=\"modal-section\">\n                <h3 className=\"section-title\">Preview (Sample)</h3>\n                <div className=\"email-preview\">\n                  <div className=\"preview-field\">\n                    <strong>To:</strong>{\" \"}\n                    {contacts.length > 0 ? contacts[0].email : \"HR Email\"}\n                  </div>\n                  <div className=\"preview-field\">\n                    <strong>Subject:</strong>{\" \"}\n                    {personalizeContentForPreview(emailData.subject)}\n                  </div>\n                  <div className=\"preview-body\">\n                    {personalizeContentForPreview(emailData.body)}\n                  </div>\n                  {contacts.length > 1 && (\n                    <div className=\"preview-note\">\n                      Note: Each email will be personalized with the individual\n                      HR contact's name\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"modal-footer\">\n          <button onClick={onClose} className=\"modal-button secondary-button\">\n            Cancel\n          </button>\n          <button\n            onClick={handleSendEmails}\n            disabled={\n              sending || contacts.length === 0 || !emailData.companyName.trim()\n            }\n            className={`modal-button primary-button ${\n              contacts.length > 0 && emailData.companyName.trim()\n                ? \"\"\n                : \"disabled\"\n            }`}\n          >\n            {sending ? \"Sending...\" : `Send to ${contacts.length} Contact(s)`}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ColdEmailModal;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}