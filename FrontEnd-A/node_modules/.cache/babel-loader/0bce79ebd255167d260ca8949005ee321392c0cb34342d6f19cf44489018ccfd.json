{"ast":null,"code":"var _jsxFileName = \"/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/components/CoverLetterGeneration.js\",\n  _s = $RefreshSig$();\n// src/components/CoverLetterGeneration.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../CSS/CoverLetterGeneration.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CoverLetterGeneration() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Get the data passed from JDInput\n  const {\n    coverLetterData,\n    companyName,\n    jobDescription\n  } = location.state || {};\n\n  // State for selected field\n  const [selectedField, setSelectedField] = useState(\"DATE\");\n\n  // State for editable content\n  const [editableData, setEditableData] = useState({\n    DATE: \"\",\n    COMPANY_NAME: \"\",\n    COMPANY_ADDRESS: \"\",\n    SALUTATION: \"Hiring Manager\",\n    CONTENT: \"\"\n  });\n\n  // State for PDF generation\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [pdfUrl, setPdfUrl] = useState(null);\n  const fieldLabels = {\n    DATE: \"Date\",\n    COMPANY_NAME: \"Company Name\",\n    COMPANY_ADDRESS: \"Company Address\",\n    SALUTATION: \"Salutation\",\n    CONTENT: \"Letter Content\"\n  };\n\n  // Initialize data when component mounts\n  useEffect(() => {\n    if (coverLetterData) {\n      // Parse the cover letter data to extract different parts\n      const lines = coverLetterData.split(\"\\n\");\n\n      // Try to extract date (usually the first line after header)\n      const datePattern = /^[A-Z][a-z]+ \\d{1,2}, \\d{4}$/;\n      let extractedDate = \"\";\n      let extractedCompanyName = companyName || \"\";\n      let extractedCompanyAddress = \"\";\n      let extractedSalutation = \"Hiring Manager\";\n      let contentStartIndex = 0;\n\n      // Find the date\n      for (let i = 0; i < lines.length; i++) {\n        if (datePattern.test(lines[i].trim())) {\n          extractedDate = lines[i].trim();\n\n          // Company name is usually after date\n          if (lines[i + 1] && lines[i + 1].includes(\"Hiring Manager\")) {\n            extractedSalutation = \"Hiring Manager\";\n            contentStartIndex = i + 2;\n          } else if (lines[i + 1]) {\n            // Extract company info\n            extractedCompanyName = lines[i + 1].trim() || companyName || \"\";\n            extractedCompanyAddress = lines[i + 2] ? lines[i + 2].trim() : \"\";\n\n            // Find salutation (usually starts with \"Dear\")\n            for (let j = i + 1; j < lines.length; j++) {\n              if (lines[j].startsWith(\"Dear \")) {\n                extractedSalutation = lines[j].replace(\"Dear \", \"\").replace(\",\", \"\").trim();\n                contentStartIndex = j + 1;\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // Extract the main content (everything after salutation until signature)\n      let mainContent = \"\";\n      for (let i = contentStartIndex; i < lines.length; i++) {\n        if (lines[i].includes(\"Warm regards\") || lines[i].includes(\"Sincerely\") || lines[i].includes(\"Best regards\")) {\n          break;\n        }\n        if (lines[i].trim()) {\n          mainContent += lines[i] + \"\\n\\n\";\n        }\n      }\n      setEditableData({\n        DATE: extractedDate || new Date().toLocaleDateString(\"en-US\", {\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\"\n        }),\n        COMPANY_NAME: extractedCompanyName,\n        COMPANY_ADDRESS: extractedCompanyAddress,\n        SALUTATION: extractedSalutation,\n        CONTENT: mainContent.trim()\n      });\n      setMessage(\"✅ Cover letter loaded! Edit and generate PDF.\");\n    } else {\n      setMessage(\"❌ No cover letter data found. Please generate content first.\");\n    }\n  }, [coverLetterData, companyName]);\n\n  // Handle field change\n  const handleFieldChange = (field, value) => {\n    setEditableData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Generate PDF using Spring Boot backend\n  const handleGeneratePDF = async () => {\n    if (!editableData.CONTENT) {\n      setMessage(\"❌ Please add content before generating PDF\");\n      return;\n    }\n    setIsLoading(true);\n    setMessage(\"⏳ Generating your cover letter PDF...\");\n    try {\n      // Prepare data for backend with correct field names\n      const requestData = {\n        COVER_LETTER_DATE: editableData.DATE,\n        COMPANY_NAME: editableData.COMPANY_NAME,\n        COMPANY_ADDRESS: editableData.COMPANY_ADDRESS,\n        SALUTATION: editableData.SALUTATION,\n        CONTENT: editableData.CONTENT\n      };\n      console.log(\"📤 Sending to backend:\", requestData);\n      const response = await axios.post(\"http://localhost:8080/api/resume/generate-cover-letter\", requestData, {\n        responseType: \"blob\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      // Create blob and URL for viewing\n      const blob = new Blob([response.data], {\n        type: \"application/pdf\"\n      });\n      const url = window.URL.createObjectURL(blob);\n      setPdfUrl(url);\n      setMessage(\"✅ Cover letter PDF generated successfully!\");\n    } catch (error) {\n      console.error(\"❌ Error generating PDF:\", error);\n      setMessage(\"❌ Error generating PDF. Make sure the backend is running on port 8080.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleDownloadPDF = () => {\n    if (pdfUrl) {\n      const link = document.createElement(\"a\");\n      link.href = pdfUrl;\n\n      // 👇 Custom filename using company name\n      const company = editableData.COMPANY_NAME || \"Company\";\n      const fileName = `CoverLetter${company.replace(/\\s+/g, \"\")}.pdf`;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setMessage(\"📄 PDF downloaded successfully!\");\n    }\n  };\n\n  // Print PDF\n  const handlePrintPDF = () => {\n    if (pdfUrl) {\n      const printWindow = window.open(pdfUrl, \"_blank\");\n      printWindow.onload = () => {\n        printWindow.print();\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"cl-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ResuMe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Resume Update | Cover Letter | Cold Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          localStorage.removeItem(\"loggedIn\");\n          navigate(\"/login\");\n        },\n        children: \"\\uD83D\\uDEAA Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cover-letter-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cl-left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Cover Letter Fields\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"field-list\",\n          children: [Object.keys(fieldLabels).map(field => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedField === field ? \"active\" : \"\",\n            onClick: () => setSelectedField(field),\n            children: fieldLabels[field]\n          }, field, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"generate-btn\",\n            onClick: handleGeneratePDF,\n            disabled: isLoading,\n            children: isLoading ? \"⏳ Generating...\" : \"MAKE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"generate-btn\",\n            onClick: () => navigate(\"/jdinput\"),\n            children: \"HOME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cl-middle-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: fieldLabels[selectedField]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), selectedField === \"CONTENT\" ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: editableData[selectedField] || \"\",\n          onChange: e => handleFieldChange(selectedField, e.target.value),\n          rows: 20,\n          placeholder: \"Edit your cover letter content here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editableData[selectedField] || \"\",\n          onChange: e => handleFieldChange(selectedField, e.target.value),\n          placeholder: `Enter ${fieldLabels[selectedField].toLowerCase()}...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status ${message.includes(\"✅\") ? \"success\" : message.includes(\"❌\") ? \"error\" : \"info\"}`,\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cl-right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cl-preview-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Cover Letter Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), pdfUrl && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDownloadPDF,\n            className: \"action-btn\",\n            children: \"\\uD83D\\uDCBE Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Cover Letter Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), pdfUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pdf-actions\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDownloadPDF,\n              className: \"action-btn\",\n              children: \"\\uD83D\\uDCBE Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n            src: pdfUrl,\n            title: \"Cover Letter PDF\",\n            frameBorder: \"0\",\n            width: \"100%\",\n            height: \"100%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No cover letter generated yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"preview-hint\",\n            children: \"Edit fields and click \\\"MAKE\\\" to generate PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Generating your cover letter PDF...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(CoverLetterGeneration, \"xZ02r5n8jEdWrQFyvV7ZuHr8UaU=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = CoverLetterGeneration;\nexport default CoverLetterGeneration;\nvar _c;\n$RefreshReg$(_c, \"CoverLetterGeneration\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","CoverLetterGeneration","_s","location","navigate","coverLetterData","companyName","jobDescription","state","selectedField","setSelectedField","editableData","setEditableData","DATE","COMPANY_NAME","COMPANY_ADDRESS","SALUTATION","CONTENT","isLoading","setIsLoading","message","setMessage","pdfUrl","setPdfUrl","fieldLabels","lines","split","datePattern","extractedDate","extractedCompanyName","extractedCompanyAddress","extractedSalutation","contentStartIndex","i","length","test","trim","includes","j","startsWith","replace","mainContent","Date","toLocaleDateString","year","month","day","handleFieldChange","field","value","prev","handleGeneratePDF","requestData","COVER_LETTER_DATE","console","log","response","post","responseType","headers","blob","Blob","data","type","url","window","URL","createObjectURL","error","handleDownloadPDF","link","document","createElement","href","company","fileName","download","body","appendChild","click","removeChild","handlePrintPDF","printWindow","open","onload","print","children","className","_jsxFileName","lineNumber","columnNumber","onClick","localStorage","removeItem","Object","keys","map","disabled","onChange","e","target","rows","placeholder","toLowerCase","src","title","frameBorder","width","height","_c","$RefreshReg$"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/components/CoverLetterGeneration.js"],"sourcesContent":["// src/components/CoverLetterGeneration.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../CSS/CoverLetterGeneration.css\";\n\nfunction CoverLetterGeneration() {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Get the data passed from JDInput\n  const { coverLetterData, companyName, jobDescription } = location.state || {};\n\n  // State for selected field\n  const [selectedField, setSelectedField] = useState(\"DATE\");\n\n  // State for editable content\n  const [editableData, setEditableData] = useState({\n    DATE: \"\",\n    COMPANY_NAME: \"\",\n    COMPANY_ADDRESS: \"\",\n    SALUTATION: \"Hiring Manager\",\n    CONTENT: \"\",\n  });\n\n  // State for PDF generation\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [pdfUrl, setPdfUrl] = useState(null);\n\n  const fieldLabels = {\n    DATE: \"Date\",\n    COMPANY_NAME: \"Company Name\",\n    COMPANY_ADDRESS: \"Company Address\",\n    SALUTATION: \"Salutation\",\n    CONTENT: \"Letter Content\",\n  };\n\n  // Initialize data when component mounts\n  useEffect(() => {\n    if (coverLetterData) {\n      // Parse the cover letter data to extract different parts\n      const lines = coverLetterData.split(\"\\n\");\n\n      // Try to extract date (usually the first line after header)\n      const datePattern = /^[A-Z][a-z]+ \\d{1,2}, \\d{4}$/;\n      let extractedDate = \"\";\n      let extractedCompanyName = companyName || \"\";\n      let extractedCompanyAddress = \"\";\n      let extractedSalutation = \"Hiring Manager\";\n      let contentStartIndex = 0;\n\n      // Find the date\n      for (let i = 0; i < lines.length; i++) {\n        if (datePattern.test(lines[i].trim())) {\n          extractedDate = lines[i].trim();\n\n          // Company name is usually after date\n          if (lines[i + 1] && lines[i + 1].includes(\"Hiring Manager\")) {\n            extractedSalutation = \"Hiring Manager\";\n            contentStartIndex = i + 2;\n          } else if (lines[i + 1]) {\n            // Extract company info\n            extractedCompanyName = lines[i + 1].trim() || companyName || \"\";\n            extractedCompanyAddress = lines[i + 2] ? lines[i + 2].trim() : \"\";\n\n            // Find salutation (usually starts with \"Dear\")\n            for (let j = i + 1; j < lines.length; j++) {\n              if (lines[j].startsWith(\"Dear \")) {\n                extractedSalutation = lines[j]\n                  .replace(\"Dear \", \"\")\n                  .replace(\",\", \"\")\n                  .trim();\n                contentStartIndex = j + 1;\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // Extract the main content (everything after salutation until signature)\n      let mainContent = \"\";\n      for (let i = contentStartIndex; i < lines.length; i++) {\n        if (\n          lines[i].includes(\"Warm regards\") ||\n          lines[i].includes(\"Sincerely\") ||\n          lines[i].includes(\"Best regards\")\n        ) {\n          break;\n        }\n        if (lines[i].trim()) {\n          mainContent += lines[i] + \"\\n\\n\";\n        }\n      }\n\n      setEditableData({\n        DATE:\n          extractedDate ||\n          new Date().toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\",\n          }),\n        COMPANY_NAME: extractedCompanyName,\n        COMPANY_ADDRESS: extractedCompanyAddress,\n        SALUTATION: extractedSalutation,\n        CONTENT: mainContent.trim(),\n      });\n\n      setMessage(\"✅ Cover letter loaded! Edit and generate PDF.\");\n    } else {\n      setMessage(\n        \"❌ No cover letter data found. Please generate content first.\"\n      );\n    }\n  }, [coverLetterData, companyName]);\n\n  // Handle field change\n  const handleFieldChange = (field, value) => {\n    setEditableData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  // Generate PDF using Spring Boot backend\n  const handleGeneratePDF = async () => {\n    if (!editableData.CONTENT) {\n      setMessage(\"❌ Please add content before generating PDF\");\n      return;\n    }\n\n    setIsLoading(true);\n    setMessage(\"⏳ Generating your cover letter PDF...\");\n\n    try {\n      // Prepare data for backend with correct field names\n      const requestData = {\n        COVER_LETTER_DATE: editableData.DATE,\n        COMPANY_NAME: editableData.COMPANY_NAME,\n        COMPANY_ADDRESS: editableData.COMPANY_ADDRESS,\n        SALUTATION: editableData.SALUTATION,\n        CONTENT: editableData.CONTENT,\n      };\n\n      console.log(\"📤 Sending to backend:\", requestData);\n\n      const response = await axios.post(\n        \"http://localhost:8080/api/resume/generate-cover-letter\",\n        requestData,\n        {\n          responseType: \"blob\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      // Create blob and URL for viewing\n      const blob = new Blob([response.data], { type: \"application/pdf\" });\n      const url = window.URL.createObjectURL(blob);\n\n      setPdfUrl(url);\n      setMessage(\"✅ Cover letter PDF generated successfully!\");\n    } catch (error) {\n      console.error(\"❌ Error generating PDF:\", error);\n      setMessage(\n        \"❌ Error generating PDF. Make sure the backend is running on port 8080.\"\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDownloadPDF = () => {\n    if (pdfUrl) {\n      const link = document.createElement(\"a\");\n      link.href = pdfUrl;\n\n      // 👇 Custom filename using company name\n      const company = editableData.COMPANY_NAME || \"Company\";\n      const fileName = `CoverLetter${company.replace(/\\s+/g, \"\")}.pdf`;\n\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setMessage(\"📄 PDF downloaded successfully!\");\n    }\n  };\n\n  // Print PDF\n  const handlePrintPDF = () => {\n    if (pdfUrl) {\n      const printWindow = window.open(pdfUrl, \"_blank\");\n      printWindow.onload = () => {\n        printWindow.print();\n      };\n    }\n  };\n\n  return (\n    <div>\n      {/* Header - Same as Resume Generation */}\n      <header className=\"cl-header\">\n        <h1>ResuMe</h1>\n        <p>\n          <strong>Resume Update | Cover Letter | Cold Mail</strong>\n        </p>\n        <button\n          onClick={() => {\n            localStorage.removeItem(\"loggedIn\");\n            navigate(\"/login\");\n          }}\n        >\n          🚪 Logout\n        </button>\n      </header>\n\n      <div className=\"cover-letter-container\">\n        {/* Left Panel - Field Selection */}\n        <div className=\"cl-left-panel\">\n          <h2>Cover Letter Fields</h2>\n          <ul className=\"field-list\">\n            {Object.keys(fieldLabels).map((field) => (\n              <li\n                key={field}\n                className={selectedField === field ? \"active\" : \"\"}\n                onClick={() => setSelectedField(field)}\n              >\n                {fieldLabels[field]}\n              </li>\n            ))}\n            <button\n              className=\"generate-btn\"\n              onClick={handleGeneratePDF}\n              disabled={isLoading}\n            >\n              {isLoading ? \"⏳ Generating...\" : \"MAKE\"}\n            </button>\n            <button\n              className=\"generate-btn\"\n              onClick={() => navigate(\"/jdinput\")}\n            >\n              HOME\n            </button>\n          </ul>\n        </div>\n\n        {/* Middle Panel - Editor */}\n        <div className=\"cl-middle-panel\">\n          <h2>{fieldLabels[selectedField]}</h2>\n          {selectedField === \"CONTENT\" ? (\n            <textarea\n              value={editableData[selectedField] || \"\"}\n              onChange={(e) => handleFieldChange(selectedField, e.target.value)}\n              rows={20}\n              placeholder=\"Edit your cover letter content here...\"\n            />\n          ) : (\n            <input\n              type=\"text\"\n              value={editableData[selectedField] || \"\"}\n              onChange={(e) => handleFieldChange(selectedField, e.target.value)}\n              placeholder={`Enter ${fieldLabels[\n                selectedField\n              ].toLowerCase()}...`}\n            />\n          )}\n\n          {message && (\n            <div\n              className={`status ${\n                message.includes(\"✅\")\n                  ? \"success\"\n                  : message.includes(\"❌\")\n                  ? \"error\"\n                  : \"info\"\n              }`}\n            >\n              {message}\n            </div>\n          )}\n        </div>\n\n        {/* Right Panel - PDF Preview */}\n        <div className=\"cl-right-panel\">\n          <div className=\"cl-preview-header\">\n            <h2>Cover Letter Preview</h2>\n            {pdfUrl && (\n              <button onClick={handleDownloadPDF} className=\"action-btn\">\n                💾 Download\n              </button>\n            )}\n          </div>\n          <h2>Cover Letter Preview</h2>\n          {pdfUrl ? (\n            <>\n              <div className=\"pdf-actions\">\n                <button onClick={handleDownloadPDF} className=\"action-btn\">\n                  💾 Download\n                </button>\n              </div>\n              <iframe\n                src={pdfUrl}\n                title=\"Cover Letter PDF\"\n                frameBorder=\"0\"\n                width=\"100%\"\n                height=\"100%\"\n              />\n            </>\n          ) : (\n            <div className=\"no-preview\">\n              <p>No cover letter generated yet</p>\n              <p className=\"preview-hint\">\n                Edit fields and click \"MAKE\" to generate PDF\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Loading Overlay */}\n      {isLoading && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\" />\n          <p>Generating your cover letter PDF...</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CoverLetterGeneration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}