{"ast":null,"code":"import axios from \"axios\";\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\nexport async function callGeminiAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data$candid, _response$data$candid2, _response$data$candid3, _response$data$candid4, _response$data$candid5;\n    console.log(\"üõ†Ô∏è Prompt Sent to Gemini:\\n\", prompt); // üîç log the prompt\n\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data$candid = response.data.candidates) === null || _response$data$candid === void 0 ? void 0 : (_response$data$candid2 = _response$data$candid[0]) === null || _response$data$candid2 === void 0 ? void 0 : (_response$data$candid3 = _response$data$candid2.content) === null || _response$data$candid3 === void 0 ? void 0 : (_response$data$candid4 = _response$data$candid3.parts) === null || _response$data$candid4 === void 0 ? void 0 : (_response$data$candid5 = _response$data$candid4[0]) === null || _response$data$candid5 === void 0 ? void 0 : _response$data$candid5.text) || \"\";\n    console.log(\"üì© Raw Gemini Response:\\n\", raw); // üîç log the raw response\n\n    // üßπ Clean and parse JSON safely\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"‚ùå JSON Parse Error:\", err);\n      console.error(\"‚ùì Problematic Response:\\n\", cleaned); // üß™ help spot what's wrong\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    // üß† Smart handling based on response shape\n    // if (\"analysis\" in parsed) {\n    //   // This is from ATS analysis prompt\n    //   return {\n    //     atsScore: parsed.atsScore,\n    //     gaps: parsed.gaps,\n    //     improvements: parsed.improvements,\n    //     summary: parsed.summary,\n    //   };\n    // }\n\n    return {\n      summaryLatex: parsed.summaryLatex || \"\",\n      skillsLatex: parsed.skillsLatex || \"\",\n      metlifeLatex: parsed.metlifeLatex || \"\",\n      adonsLatex: parsed.adonsLatex || \"\",\n      coverLetter: parsed.coverLetter || \"\",\n      coldEmail: parsed.coldEmail || \"\"\n    };\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Gemini API Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    alert(\"Gemini API Error: \" + JSON.stringify(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message));\n    return {\n      summaryLatex: \"\",\n      skillsLatex: \"\",\n      metlifeLatex: \"\",\n      adonsLatex: \"\",\n      coverLetter: \"\",\n      coldEmail: \"\"\n      // analysis: \"\", // fallback in case ATS fails\n    };\n  }\n}\nexport async function callGeminiATSAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data$candid6, _response$data$candid7, _response$data$candid8, _response$data$candid9, _response$data$candid0;\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data$candid6 = response.data.candidates) === null || _response$data$candid6 === void 0 ? void 0 : (_response$data$candid7 = _response$data$candid6[0]) === null || _response$data$candid7 === void 0 ? void 0 : (_response$data$candid8 = _response$data$candid7.content) === null || _response$data$candid8 === void 0 ? void 0 : (_response$data$candid9 = _response$data$candid8.parts) === null || _response$data$candid9 === void 0 ? void 0 : (_response$data$candid0 = _response$data$candid9[0]) === null || _response$data$candid0 === void 0 ? void 0 : _response$data$candid0.text) || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"‚ùå JSON Parse Error:\", err);\n      console.error(\"‚ùì Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    return {\n      atsScore: parsed.atsScore || \"N/A\",\n      gaps: parsed.gaps || [],\n      improvements: parsed.improvements || [],\n      summary: parsed.summary || \"\"\n    };\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Gemini ATS API Error:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    return {\n      atsScore: \"N/A\",\n      gaps: [],\n      improvements: [],\n      summary: \"\"\n    };\n  }\n}\nexport async function callGeminiAPIforJD(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data$candid1, _response$data$candid10, _response$data$candid11, _response$data$candid12, _response$data$candid13, _response$data$candid14, _response$data$candid15, _response$data$candid16, _response$data$candid17, _response$data$candid18;\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(\"üì© Raw Response Text:\\n\", ((_response$data$candid1 = response.data.candidates) === null || _response$data$candid1 === void 0 ? void 0 : (_response$data$candid10 = _response$data$candid1[0]) === null || _response$data$candid10 === void 0 ? void 0 : (_response$data$candid11 = _response$data$candid10.content) === null || _response$data$candid11 === void 0 ? void 0 : (_response$data$candid12 = _response$data$candid11.parts) === null || _response$data$candid12 === void 0 ? void 0 : (_response$data$candid13 = _response$data$candid12[0]) === null || _response$data$candid13 === void 0 ? void 0 : _response$data$candid13.text) || \"\");\n    const raw = ((_response$data$candid14 = response.data.candidates) === null || _response$data$candid14 === void 0 ? void 0 : (_response$data$candid15 = _response$data$candid14[0]) === null || _response$data$candid15 === void 0 ? void 0 : (_response$data$candid16 = _response$data$candid15.content) === null || _response$data$candid16 === void 0 ? void 0 : (_response$data$candid17 = _response$data$candid16.parts) === null || _response$data$candid17 === void 0 ? void 0 : (_response$data$candid18 = _response$data$candid17[0]) === null || _response$data$candid18 === void 0 ? void 0 : _response$data$candid18.text) || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"‚ùå JSON Parse Error:\", err);\n      console.error(\"‚ùì Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    return {\n      result: parsed.result || cleaned\n    };\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Gemini ATS API Error:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    return {\n      result: \"\"\n    };\n  }\n}","map":{"version":3,"names":["axios","GEMINI_API_URL","callGeminiAPI","prompt","apiKey","process","env","REACT_APP_GEMINI_API_KEY","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","console","log","response","post","contents","role","parts","text","headers","raw","data","candidates","content","cleaned","replace","trim","parsed","JSON","parse","err","error","Error","summaryLatex","skillsLatex","metlifeLatex","adonsLatex","coverLetter","coldEmail","_error$response","_error$response2","message","alert","stringify","callGeminiATSAPI","_response$data$candid6","_response$data$candid7","_response$data$candid8","_response$data$candid9","_response$data$candid0","atsScore","gaps","improvements","summary","_error$response3","callGeminiAPIforJD","_response$data$candid1","_response$data$candid10","_response$data$candid11","_response$data$candid12","_response$data$candid13","_response$data$candid14","_response$data$candid15","_response$data$candid16","_response$data$candid17","_response$data$candid18","result","_error$response4"],"sources":["/Users/maibupash/Desktop/MastersProjects/ResumeApp/resume-tailor/src/utils/apiHandler.js"],"sourcesContent":["import axios from \"axios\";\n\nconst GEMINI_API_URL =\n  \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\nexport async function callGeminiAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n\n  try {\n    console.log(\"üõ†Ô∏è Prompt Sent to Gemini:\\n\", prompt); // üîç log the prompt\n\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    console.log(\"üì© Raw Gemini Response:\\n\", raw); // üîç log the raw response\n\n    // üßπ Clean and parse JSON safely\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"‚ùå JSON Parse Error:\", err);\n      console.error(\"‚ùì Problematic Response:\\n\", cleaned); // üß™ help spot what's wrong\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    // üß† Smart handling based on response shape\n    // if (\"analysis\" in parsed) {\n    //   // This is from ATS analysis prompt\n    //   return {\n    //     atsScore: parsed.atsScore,\n    //     gaps: parsed.gaps,\n    //     improvements: parsed.improvements,\n    //     summary: parsed.summary,\n    //   };\n    // }\n\n    return {\n      summaryLatex: parsed.summaryLatex || \"\",\n      skillsLatex: parsed.skillsLatex || \"\",\n      metlifeLatex: parsed.metlifeLatex || \"\",\n      adonsLatex: parsed.adonsLatex || \"\",\n      coverLetter: parsed.coverLetter || \"\",\n      coldEmail: parsed.coldEmail || \"\",\n    };\n  } catch (error) {\n    console.error(\"Gemini API Error:\", error.response?.data || error.message);\n    alert(\n      \"Gemini API Error: \" +\n        JSON.stringify(error.response?.data || error.message)\n    );\n    return {\n      summaryLatex: \"\",\n      skillsLatex: \"\",\n      metlifeLatex: \"\",\n      adonsLatex: \"\",\n      coverLetter: \"\",\n      coldEmail: \"\",\n      // analysis: \"\", // fallback in case ATS fails\n    };\n  }\n}\n\nexport async function callGeminiATSAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n\n  try {\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"‚ùå JSON Parse Error:\", err);\n      console.error(\"‚ùì Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n\n    return {\n      atsScore: parsed.atsScore || \"N/A\",\n      gaps: parsed.gaps || [],\n      improvements: parsed.improvements || [],\n      summary: parsed.summary || \"\",\n    };\n  } catch (error) {\n    console.error(\n      \"Gemini ATS API Error:\",\n      error.response?.data || error.message\n    );\n    return {\n      atsScore: \"N/A\",\n      gaps: [],\n      improvements: [],\n      summary: \"\",\n    };\n  }\n}\n\nexport async function callGeminiAPIforJD(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n\n  try {\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    console.log(\n      \"üì© Raw Response Text:\\n\",\n      response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\"\n    );\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"‚ùå JSON Parse Error:\", err);\n      console.error(\"‚ùì Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n\n    return {\n      result: parsed.result || cleaned,\n    };\n  } catch (error) {\n    console.error(\n      \"Gemini ATS API Error:\",\n      error.response?.data || error.message\n    );\n    return {\n      result: \"\",\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}