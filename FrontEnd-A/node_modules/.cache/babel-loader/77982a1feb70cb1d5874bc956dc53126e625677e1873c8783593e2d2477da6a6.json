{"ast":null,"code":"export function sanitizeLatexContent(content) {\n  if (!content) return \"\";\n  console.log(\"üîç Original content:\\n\", content);\n\n  // Step 1: Convert Markdown bold with % ‚Üí \\textbf{45\\%}\n  content = content.replace(/\\*\\*(\\d+(\\.\\d+)?)\\%?\\*\\*/g, (_, num) => {\n    console.log(`‚ú® Markdown bold: **${num}%** ‚Üí \\\\textbf{${num}\\\\%}`);\n    return `\\\\textbf{${num}\\\\%}`;\n  });\n\n  // Step 2: Escape unescaped % (if not already escaped)\n  content = content.replace(/(^|[^\\\\])%/g, (match, p1) => {\n    const fixed = `${p1}\\\\%`;\n    console.log(`üö´ Escaped % ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 3: Escape unescaped &\n  content = content.replace(/(^|[^\\\\])&/g, (match, p1) => {\n    const fixed = `${p1}\\\\&`;\n    console.log(`üö´ Escaped & ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 4: Wrap raw 45\\% with \\textbf{} if not already wrapped\n  content = content.replace(/(?<!\\\\textbf{)(\\d+(\\.\\d+)?)\\\\%/g, (_, num) => {\n    const bolded = `\\\\textbf{${num}\\\\%}`;\n    console.log(`üí™ Bold % ‚Üí ${bolded}`);\n    return bolded;\n  });\n\n  // Step 5: Remove double \\textbf nesting\n  content = content.replace(/\\\\textbf\\{(\\d+)\\\\textbf\\{(\\d+)\\\\%\\}\\}/g, (_, a, b) => {\n    const combined = `\\\\textbf{${a}${b}\\\\%}`;\n    console.log(`üßΩ Cleaned nested bold ‚Üí ${combined}`);\n    return combined;\n  });\n\n  // Step 6: Remove trailing backslashes (even on blank lines or spacing lines)\n  content = content.replace(/\\\\\\s*$/gm, match => {\n    console.log(\"üßπ Removed bad trailing slash:\", match);\n    return \"\";\n  });\n  console.log(\"‚úÖ Final sanitized content:\\n\", content);\n  return content;\n}\nexport function sanitizeSkillsLatex(rawSkills) {\n  if (!rawSkills) return \"\";\n  console.log(\"üîß Raw skills input:\\n\", rawSkills);\n  const cleanedLines = rawSkills.split(\"\\n\").map((line, index) => {\n    const parts = line.split(\"\\\\&\");\n    if (parts.length === 1) {\n      console.log(`üî∏ Line ${index + 1} has no \\&:`, line);\n      return line.trim();\n    }\n    const first = parts[0].trim() + \" \\\\&\"; // Escape first\n    const second = parts[1].trim(); // This is second column\n\n    const rest = parts.slice(2).map(part => part.trim()).join(\" & \");\n    let cleaned = `${first} ${second}`;\n    if (rest) cleaned += ` & ${rest}`;\n    if (!cleaned.trim().endsWith(\"\\\\\\\\\")) cleaned += \" \\\\\\\\\";\n    console.log(`üõ†Ô∏è Line ${index + 1} fixed:\\n  ‚Üí ${cleaned}`);\n    return cleaned;\n  }).join(\"\\n\");\n  console.log(\"‚úÖ Final sanitized skills:\\n\", cleanedLines);\n  return cleanedLines;\n}","map":{"version":3,"names":["sanitizeLatexContent","content","console","log","replace","_","num","match","p1","fixed","bolded","a","b","combined","sanitizeSkillsLatex","rawSkills","cleanedLines","split","map","line","index","parts","length","trim","first","second","rest","slice","part","join","cleaned","endsWith"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/utils/latexSanitizer.js"],"sourcesContent":["export function sanitizeLatexContent(content) {\n  if (!content) return \"\";\n\n  console.log(\"üîç Original content:\\n\", content);\n\n  // Step 1: Convert Markdown bold with % ‚Üí \\textbf{45\\%}\n  content = content.replace(/\\*\\*(\\d+(\\.\\d+)?)\\%?\\*\\*/g, (_, num) => {\n    console.log(`‚ú® Markdown bold: **${num}%** ‚Üí \\\\textbf{${num}\\\\%}`);\n    return `\\\\textbf{${num}\\\\%}`;\n  });\n\n  // Step 2: Escape unescaped % (if not already escaped)\n  content = content.replace(/(^|[^\\\\])%/g, (match, p1) => {\n    const fixed = `${p1}\\\\%`;\n    console.log(`üö´ Escaped % ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 3: Escape unescaped &\n  content = content.replace(/(^|[^\\\\])&/g, (match, p1) => {\n    const fixed = `${p1}\\\\&`;\n    console.log(`üö´ Escaped & ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 4: Wrap raw 45\\% with \\textbf{} if not already wrapped\n  content = content.replace(/(?<!\\\\textbf{)(\\d+(\\.\\d+)?)\\\\%/g, (_, num) => {\n    const bolded = `\\\\textbf{${num}\\\\%}`;\n    console.log(`üí™ Bold % ‚Üí ${bolded}`);\n    return bolded;\n  });\n\n  // Step 5: Remove double \\textbf nesting\n  content = content.replace(\n    /\\\\textbf\\{(\\d+)\\\\textbf\\{(\\d+)\\\\%\\}\\}/g,\n    (_, a, b) => {\n      const combined = `\\\\textbf{${a}${b}\\\\%}`;\n      console.log(`üßΩ Cleaned nested bold ‚Üí ${combined}`);\n      return combined;\n    }\n  );\n\n  // Step 6: Remove trailing backslashes (even on blank lines or spacing lines)\n  content = content.replace(/\\\\\\s*$/gm, (match) => {\n    console.log(\"üßπ Removed bad trailing slash:\", match);\n    return \"\";\n  });\n\n  console.log(\"‚úÖ Final sanitized content:\\n\", content);\n  return content;\n}\n\nexport function sanitizeSkillsLatex(rawSkills) {\n  if (!rawSkills) return \"\";\n\n  console.log(\"üîß Raw skills input:\\n\", rawSkills);\n\n  const cleanedLines = rawSkills\n    .split(\"\\n\")\n    .map((line, index) => {\n      const parts = line.split(\"\\\\&\");\n\n      if (parts.length === 1) {\n        console.log(`üî∏ Line ${index + 1} has no \\&:`, line);\n        return line.trim();\n      }\n\n      const first = parts[0].trim() + \" \\\\&\"; // Escape first\n      const second = parts[1].trim(); // This is second column\n\n      const rest = parts\n        .slice(2)\n        .map((part) => part.trim())\n        .join(\" & \");\n\n      let cleaned = `${first} ${second}`;\n      if (rest) cleaned += ` & ${rest}`;\n      if (!cleaned.trim().endsWith(\"\\\\\\\\\")) cleaned += \" \\\\\\\\\";\n\n      console.log(`üõ†Ô∏è Line ${index + 1} fixed:\\n  ‚Üí ${cleaned}`);\n      return cleaned;\n    })\n    .join(\"\\n\");\n\n  console.log(\"‚úÖ Final sanitized skills:\\n\", cleanedLines);\n  return cleanedLines;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}