{"ast":null,"code":"var _jsxFileName = \"/Users/maibupash/Desktop/MastersProjects/ResumeApp/resume-tailor/src/components/CoverLetterEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { coverLetterTemplate } from \"../utils/latexTemplates\";\nimport { callGeminiAPI } from \"../utils/apiHandler\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CoverLetterEditor() {\n  _s();\n  const [jobDesc, setJobDesc] = useState(\"\");\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleGenerateCover = async () => {\n    if (!jobDesc.trim()) return;\n    const prompt = `\nYou are an assistant that writes professional cover letters based on a job description and a template.\n\nUsing the job description below, rewrite only the section marked % JD_BASED_COVER_PARAGRAPH in the cover letter template while preserving the tone, structure, and context.\n\n--- Job Description ---\n${jobDesc}\n\n--- Cover Letter Template ---\n${coverLetterTemplate}\n\nReturn only the updated full cover letter in plain text (not LaTeX).\n`;\n    setLoading(true);\n    const result = await callGeminiAPI(prompt);\n    setCoverLetter(result);\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate Cover Letter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"10\",\n      cols: \"80\",\n      placeholder: \"Paste job description here...\",\n      value: jobDesc,\n      onChange: e => setJobDesc(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateCover,\n      disabled: loading,\n      children: loading ? \"Generating...\" : \"Generate Cover Letter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), coverLetter && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Cover Letter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"20\",\n        cols: \"100\",\n        value: coverLetter,\n        readOnly: true,\n        style: {\n          backgroundColor: \"#f5f5f5\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(CoverLetterEditor, \"IReTyHxO/+1Y5qBEosHXjC6kPyU=\");\n_c = CoverLetterEditor;\nexport default CoverLetterEditor;\nvar _c;\n$RefreshReg$(_c, \"CoverLetterEditor\");","map":{"version":3,"names":["React","useState","coverLetterTemplate","callGeminiAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","CoverLetterEditor","_s","jobDesc","setJobDesc","coverLetter","setCoverLetter","loading","setLoading","handleGenerateCover","trim","prompt","result","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","placeholder","value","onChange","e","target","onClick","disabled","readOnly","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/maibupash/Desktop/MastersProjects/ResumeApp/resume-tailor/src/components/CoverLetterEditor.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { coverLetterTemplate } from \"../utils/latexTemplates\";\nimport { callGeminiAPI } from \"../utils/apiHandler\";\n\nfunction CoverLetterEditor() {\n  const [jobDesc, setJobDesc] = useState(\"\");\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleGenerateCover = async () => {\n    if (!jobDesc.trim()) return;\n\n    const prompt = `\nYou are an assistant that writes professional cover letters based on a job description and a template.\n\nUsing the job description below, rewrite only the section marked % JD_BASED_COVER_PARAGRAPH in the cover letter template while preserving the tone, structure, and context.\n\n--- Job Description ---\n${jobDesc}\n\n--- Cover Letter Template ---\n${coverLetterTemplate}\n\nReturn only the updated full cover letter in plain text (not LaTeX).\n`;\n\n    setLoading(true);\n    const result = await callGeminiAPI(prompt);\n    setCoverLetter(result);\n    setLoading(false);\n  };\n\n  return (\n    <div style={{ padding: \"1rem\" }}>\n      <h2>Generate Cover Letter</h2>\n      <textarea\n        rows=\"10\"\n        cols=\"80\"\n        placeholder=\"Paste job description here...\"\n        value={jobDesc}\n        onChange={(e) => setJobDesc(e.target.value)}\n      />\n      <br />\n      <button onClick={handleGenerateCover} disabled={loading}>\n        {loading ? \"Generating...\" : \"Generate Cover Letter\"}\n      </button>\n\n      {coverLetter && (\n        <>\n          <h3>Generated Cover Letter</h3>\n          <textarea\n            rows=\"20\"\n            cols=\"100\"\n            value={coverLetter}\n            readOnly\n            style={{ backgroundColor: \"#f5f5f5\" }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default CoverLetterEditor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,EAAE;IAErB,MAAMC,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA,EAAER,OAAO;AACT;AACA;AACA,EAAER,mBAAmB;AACrB;AACA;AACA,CAAC;IAEGa,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMI,MAAM,GAAG,MAAMhB,aAAa,CAACe,MAAM,CAAC;IAC1CL,cAAc,CAACM,MAAM,CAAC;IACtBJ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACEV,OAAA;IAAKe,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BjB,OAAA;MAAAiB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BrB,OAAA;MACEsB,IAAI,EAAC,IAAI;MACTC,IAAI,EAAC,IAAI;MACTC,WAAW,EAAC,+BAA+B;MAC3CC,KAAK,EAAEpB,OAAQ;MACfqB,QAAQ,EAAGC,CAAC,IAAKrB,UAAU,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACFrB,OAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNrB,OAAA;MAAQ6B,OAAO,EAAElB,mBAAoB;MAACmB,QAAQ,EAAErB,OAAQ;MAAAQ,QAAA,EACrDR,OAAO,GAAG,eAAe,GAAG;IAAuB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAERd,WAAW,iBACVP,OAAA,CAAAE,SAAA;MAAAe,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,EAAI;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/BrB,OAAA;QACEsB,IAAI,EAAC,IAAI;QACTC,IAAI,EAAC,KAAK;QACVE,KAAK,EAAElB,WAAY;QACnBwB,QAAQ;QACRhB,KAAK,EAAE;UAAEiB,eAAe,EAAE;QAAU;MAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC;IAAA,eACF,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACjB,EAAA,CAzDQD,iBAAiB;AAAA8B,EAAA,GAAjB9B,iBAAiB;AA2D1B,eAAeA,iBAAiB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}