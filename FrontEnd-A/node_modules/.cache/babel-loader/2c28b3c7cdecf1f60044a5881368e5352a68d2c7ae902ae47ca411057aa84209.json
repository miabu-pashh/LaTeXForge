{"ast":null,"code":"var _jsxFileName = \"/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/components/JDInput.js\",\n  _s = $RefreshSig$();\n// // JDInput.js\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   buildGeminiPrompt,\n//   resumeTemplate,\n//   coverLetterTemplate,\n//   coldEmailTemplate,\n//   buildLinkedInMessagePrompt,\n//   buildCoverLetterUpdatePrompt,\n//   buildCompanyAndEmailPrompt,\n//   buildGeminiPromptForJD,\n//   buildFitForRolePrompt,\n// } from \"../utils/promptBuilder\";\n// import {\n//   callGeminiAPIforJD,\n//   callGeminiAPI,\n//   callGeminiAPIForLinkedInMessage,\n//   callGeminiAPIForCoverLetterUpdate,\n//   callGeminiAPIForCompanyAndEmail,\n//   callGeminiAPIForFitExplanation,\n// } from \"../utils/apiHandler\";\n// import {\n//   sanitizeLatexContent,\n//   sanitizeSkillsLatex,\n// } from \"../utils/latexSanitizer\";\n// import \"../CSS/JDInput.css\";\n// import { useResume } from \"../context/ResumeContext\"; // ✅ Add this\n// // Add this import with your other imports\n// import ColdEmailSender from \"../components/ColdEmailSender\";\n\n// // import { whyIFitService } from \"../services/api\";\n\n// // Add these imports at the top of JDInput.js\n// import EmailStatsWidget from \"../components/EmailStatsWidget\";\n// import \"../CSS/EmailStatsWidget.css\";\n\n// function JDInput({ onJDUpdate }) {\n//   // 🌐 Routing\n//   const navigate = useNavigate();\n\n//   // 🔐 Authentication check\n//   useEffect(() => {\n//     const isLoggedIn = localStorage.getItem(\"loggedIn\");\n//     if (isLoggedIn !== \"true\") {\n//       navigate(\"/login\");\n//     }\n//   }, []);\n\n//   const {\n//     jobDesc,\n//     setJobDesc,\n//     summaryLatex,\n//     setSummaryLatex,\n//     skillsLatex,\n//     setSkillsLatex,\n//     metlifeLatex,\n//     setMetlifeLatex,\n//     adonsLatex,\n//     setAdonsLatex,\n//     companyName,\n//     setCompanyName,\n//     FinalResumeLatex,\n//     setFinalResumeLatex,\n//     changes,\n//     setChanges,\n//     coverLetter,\n//     setCoverLetter,\n//     coldEmail,\n//     setColdEmail,\n//     linkedinMessage,\n//     setLinkedinMessage,\n//   } = useResume();\n\n//   const [loading, setLoading] = useState(false);\n\n//   const [showModal, setShowModal] = useState(false);\n//   const [latexResume, setLatexResume] = useState(\"\");\n//   const [showEmailModal, setShowEmailModal] = useState(false);\n//   const [emailSubject, setEmailSubject] = useState(\"\");\n//   const [emailBody, setEmailBody] = useState(\"\");\n//   const [emailSending, setEmailSending] = useState(false);\n//   const [toastMsg, setToastMsg] = useState(\"\");\n//   const [jobResult, setJobResult] = useState(\"\");\n//   const [showJobModal, setShowJobModal] = useState(false);\n//   const [isEditorOpen, setEditorOpen] = useState(false);\n//   const [coverLetterContent, setCoverLetterContent] = useState(\n//     `Your default content here...`\n//   );\n//   const [fitExplanation, setFitExplanation] = useState(\"\");\n//   // Add these state variables in your JDInput component\n//   const [emailStats, setEmailStats] = useState({});\n//   const [emailReminders, setEmailReminders] = useState([]);\n//   // Add this function to handle stats updates\n//   const handleEmailStatsUpdate = (data) => {\n//     setEmailStats(data.stats || {});\n//     setEmailReminders(data.reminders || []);\n//   };\n\n//   const [jobCount, setJobCount] = useState(() => {\n//     const saved = localStorage.getItem(\"jobCounter\");\n//     return saved ? parseInt(saved) : 1;\n//   });\n//   const handleNextJob = () => {\n//     const newCount = jobCount + 1;\n//     localStorage.setItem(\"jobCounter\", newCount);\n//     setJobCount(newCount);\n//     window.location.reload(); // Refresh page to start over\n//   };\n\n//   const formattedCoverLetter = coverLetter\n//     .replace(/\\n\\n/g, \"<p>\")\n//     .replace(/\\n/g, \"<br>\");\n\n//   // 📅 Format today's date\n//   const todayDate = new Date().toLocaleDateString(\"en-US\", {\n//     year: \"numeric\",\n//     month: \"long\",\n//     day: \"numeric\",\n//   });\n\n//   useEffect(() => {\n//     const subjectMatch = coldEmail.match(/Subject:\\s*(.*)/i);\n//     setEmailSubject(subjectMatch ? subjectMatch[1].trim() : \"\");\n//     setEmailBody(coldEmail.replace(/Subject:.*\\n?/i, \"\").trim());\n//   }, [coldEmail]);\n\n//   // Toast message function\n//   const showToast = (msg) => {\n//     setToastMsg(msg);\n//     setTimeout(() => setToastMsg(\"\"), 3000); // toast disappears in 3 seconds\n//   };\n\n//   // 📥 Copyable Content Box Renderer\n//   const renderBox = (title, content) => (\n//     <div className=\"content-box\">\n//       <h3>{title}</h3>\n//       <textarea rows=\"8\" value={content} readOnly className=\"textarea\" />\n//       <button\n//         className=\"copy-btn\"\n//         onClick={() => {\n//           navigator.clipboard.writeText(content);\n//         }}\n//       >\n//         Copy the text\n//       </button>\n//     </div>\n//   );\n\n//   // 💡 Feature Functions\n//   const handleJD = async () => {\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n//     if (onJDUpdate) onJDUpdate(jobDesc);\n//     const prompt = buildGeminiPromptForJD({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//     });\n//     const result = await callGeminiAPIforJD(prompt);\n//     setJobResult(result.result || \"\");\n//     setLoading(false);\n//     setShowJobModal(true);\n//   };\n\n//   const handleGenerate = async () => {\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n//     if (onJDUpdate) onJDUpdate(jobDesc);\n//     const prompt = buildGeminiPrompt({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//       coverLetterTemplate,\n//       coldEmailTemplate,\n//     });\n//     const result = await callGeminiAPI(prompt);\n//     setCompanyName(result.companyName || \"\");\n\n//     setSummaryLatex(sanitizeLatexContent(result.summaryLatex || \"\"));\n//     setSkillsLatex(result.skillsLatex || \"\");\n//     setMetlifeLatex(sanitizeLatexContent(result.metlifeLatex || \"\"));\n//     setAdonsLatex(sanitizeLatexContent(result.adonsLatex || \"\"));\n//     setChanges(result.changes || \"\"); // Set changes from the result\n//     setCoverLetter(sanitizeLatexContent(result.coverLetter || \"\"));\n//     setColdEmail(result.coldEmail || \"\");\n//     setFinalResumeLatex(sanitizeLatexContent(result.FinalResumeLatex || \"\"));\n//     setLoading(false);\n//   };\n\n//   const handleLinkedInMessage = async () => {\n//     if (!jobDesc.trim()) return;\n//     console.log(\n//       \"🚀 ~ file: JDInput.js:88 ~ handleLinkedInMessage ~ jobDesc:\",\n//       jobDesc\n//     );\n//     setLoading(true);\n//     const prompt = buildLinkedInMessagePrompt({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//     });\n//     const result = await callGeminiAPIForLinkedInMessage(prompt);\n//     console.log(\"the result in jdinput file is \", result);\n//     setLinkedinMessage(result.linkedinMessage || \"\");\n//     setLoading(false);\n//   };\n\n//   const handleCoverLetterUpdate = async () => {\n//     console.log(\n//       \"the handle cover letter update is called in jd input function\"\n//     );\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n\n//     const prompt = buildCoverLetterUpdatePrompt({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//       coverLetterTemplate,\n//       todayDate,\n//     });\n//     console.log(\"the prompt in jd input file is \", prompt);\n\n//     const { updatedCoverLetter } = await callGeminiAPIForCoverLetterUpdate(\n//       prompt\n//     );\n//     console.log(\"the updated cover letter is \", updatedCoverLetter);\n\n//     setLoading(false);\n//     navigate(\"/cover-letter-update\", {\n//       state: {\n//         template: coverLetterTemplate,\n//         updated: updatedCoverLetter,\n//       },\n//     });\n//   };\n\n//   const handleCompanyNameExtraction = async () => {\n//     const prompt = buildCompanyAndEmailPrompt(jobDesc);\n//     const company = await callGeminiAPIForCompanyAndEmail(prompt);\n//     console.log(\"🧾 Company Extracted:\", company);\n//   };\n\n//   const handleSaveToDB = async () => {\n//     const payload = {\n//       applyDate: new Date().toISOString().split(\"T\")[0],\n//       companyName,\n//       summaryLatex,\n//       skillsLatex,\n//       metlifeLatex,\n//       adonsLatex,\n//       changes,\n//       coverLetter,\n//       coldEmail,\n//       finalResumeLatex: FinalResumeLatex,\n//       jobDescription: jobDesc, // Include job description in payload\n//     };\n\n//     try {\n//       const response = await fetch(\"http://localhost:5001/save-data\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       const result = await response.json();\n//       console.log(\"✅ Backend Response:\", result);\n//       if (response.status === 200) {\n//         alert(\"✅ Saved to DB successfully!\");\n//       } else if (response.status === 409) {\n//         alert(\"⚠️ This data already exists in the database.\");\n//       } else {\n//         alert(`❌ Unexpected error: ${result.message || \"Unknown error\"}`);\n//       }\n\n//       // alert(\"✅ Saved to DB successfully!\");\n//     } catch (error) {\n//       console.error(\"❌ Error saving to DB:\", error);\n//       alert(\"❌ Failed to save to DB.\");\n//     }\n//   };\n\n//   const handleSendEmail = async () => {\n//     const to = document.querySelector(\".gmail-to\").value;\n//     const subject = emailSubject;\n//     const text = emailBody;\n//     const fileInput = document.querySelector(\".gmail-attachment\");\n\n//     let attachmentBase64 = \"\";\n//     let attachmentName = \"\";\n\n//     if (fileInput.files.length > 0) {\n//       const file = fileInput.files[0];\n//       attachmentName = file.name;\n\n//       const reader = new FileReader();\n//       reader.onload = async () => {\n//         // Strip the base64 prefix (e.g., \"data:application/pdf;base64,...\")\n//         attachmentBase64 = reader.result.split(\",\")[1];\n\n//         try {\n//           setEmailSending(true);\n//           const res = await fetch(\"http://localhost:5001/send-email\", {\n//             method: \"POST\",\n//             headers: {\n//               \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify({\n//               to,\n//               subject,\n//               text,\n//               attachmentName,\n//               attachmentBase64,\n//             }),\n//           });\n\n//           const data = await res.json();\n//           if (res.ok) {\n//             // alert(\"📨 Email sent successfully!\");\n//             showToast(\"📨 Email sent successfully!\");\n\n//             setShowEmailModal(false);\n//           } else {\n//             // alert(\"❌ Failed to send email: \" + data.message);\n//             showToast(\"❌ Failed: \" + data.error);\n//           }\n//         } catch (err) {\n//           showToast(\"❌ Network error: \" + err.message);\n//         } finally {\n//           setEmailSending(false); // ✅ stop spinner\n//         }\n//       };\n//       reader.readAsDataURL(file); // Triggers reader.onload above\n//     } else {\n//       // No attachment, just send email\n//       try {\n//         setEmailSending(true);\n//         const res = await fetch(\"http://localhost:5001/send-email\", {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({ to, subject, text }), // no attachment\n//         });\n\n//         const data = await res.json();\n//         if (res.ok) {\n//           showToast(\"📨 Email sent successfully!\");\n//           // alert(\"📨 Email sent successfully!\");\n//           setShowEmailModal(false);\n//         } else {\n//           showToast(\"❌ Failed: \" + data.message);\n//         }\n//       } catch (err) {\n//         showToast(\"❌ Network error: \" + err.message);\n//       } finally {\n//         setEmailSending(false); // ✅ stop spinner\n//       }\n//     }\n//   };\n\n//   const handleGoToResumeGenerator = () => {\n//     // Navigate to resume generation component with the generated data\n//     navigate(\"/resume-generation\", {\n//       state: {\n//         resumeData: {\n//           PROFESSIONAL_SUMMARY: summaryLatex,\n//           TECHNICAL_SKILLS: skillsLatex,\n//           METLIFE_BULLET_POINTS: metlifeLatex,\n//           ADONS_BULLET_POINTS: adonsLatex,\n//         },\n//         jobDescription: jobDesc,\n//         companyName: companyName,\n//       },\n//     });\n//   };\n\n//   const handleFitExplanation = async () => {\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n//     const prompt = buildFitForRolePrompt({\n//       jobDescription: jobDesc,\n//       resumeLatex: FinalResumeLatex || resumeTemplate.full,\n//     });\n\n//     const result = await callGeminiAPIForFitExplanation(prompt);\n//     setFitExplanation(result.fitExplanation || \"\");\n//     setLoading(false);\n//   };\n\n//   // Replace your handleWhyIFitGeneration function with this:\n//   const handleWhyIFitGeneration = async () => {\n//     if (!jobDesc.trim()) {\n//       alert(\"Please enter a job description first\");\n//       return;\n//     }\n\n//     if (!fitExplanation.trim()) {\n//       alert(\n//         \"Please click 'Why I Fit This Role' button first to generate AI analysis\"\n//       );\n//       return;\n//     }\n\n//     // Navigate to the Why I Fit generation page with the data\n//     navigate(\"/why-i-fit-generation\", {\n//       state: {\n//         whyIFitData: fitExplanation,\n//         companyName: companyName,\n//         jobDescription: jobDesc,\n//       },\n//     });\n//   };\n//   const handleGmailManager = () => {\n//     navigate(\"/gmail-manager\");\n//   };\n//   // / Add this function to refresh Gmail and update stats\n//   const handleGmailRefresh = async () => {\n//     try {\n//       const response = await fetch(\n//         \"http://localhost:8080/api/emails/fetch-gmail\",\n//         {\n//           method: \"POST\",\n//         }\n//       );\n//       const result = await response.json();\n\n//       if (result.success) {\n//         showToast(\"Gmail emails fetched successfully!\");\n//         // Refresh the email stats widget\n//         window.location.reload(); // Or trigger a re-render of EmailStatsWidget\n//       } else {\n//         showToast(\"Error fetching Gmail: \" + result.message);\n//       }\n//     } catch (error) {\n//       showToast(\"Gmail fetch error: \" + error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"jd-wrapper\">\n//       <header className=\"header\">\n//         <h1>ResuMe</h1>\n//         <p>\n//           <strong>Resume Update | Cover Letter | Cold Mail</strong>\n//         </p>\n//         <button\n//           onClick={() => {\n//             localStorage.removeItem(\"loggedIn\");\n//             navigate(\"/login\");\n//           }}\n//         >\n//           🚪 Logout\n//         </button>\n//       </header>\n//       {/* ✅ Toast & Spinner */}\n//       {toastMsg && <div className=\"toast-message\">{toastMsg}</div>}\n//       {emailSending && <div className=\"spinner\"></div>}\n//       <div className=\"main\">\n//         <div className=\"left-panel\">\n//           <h2>Job Description</h2>\n//           <textarea\n//             className=\"textarea jd-input\"\n//             rows=\"6\"\n//             placeholder=\"Paste job description here...\"\n//             value={jobDesc}\n//             onChange={(e) => setJobDesc(e.target.value)}\n//           />\n//           <div className=\"button-container\">\n//             <button onClick={handleJD} disabled={loading}>\n//               {loading ? \"Checking Job...\" : \"Job Matching/Unmatching\"}\n//             </button>\n//             <button onClick={handleGenerate} disabled={loading}>\n//               {loading ? \"Generating...\" : \"Generate Tailored Content\"}\n//             </button>\n//             <button\n//               className=\"linkedin-btn\"\n//               onClick={handleLinkedInMessage}\n//               disabled={loading}\n//             >\n//               💬 Generate LinkedIn Message\n//             </button>\n//             <button onClick={() => navigate(\"/ats-analysis\")}>\n//               🔍 Compare Resume with JD (ATS Score)\n//             </button>\n//             <button onClick={handleCoverLetterUpdate} disabled={loading}>\n//               ✉️ Generate Cover Letter\n//             </button>\n//             <button onClick={handleCompanyNameExtraction}>\n//               🧾 Get Company Name\n//             </button>\n//             <button onClick={handleSaveToDB} disabled={loading}>\n//               💾 Save to Database\n//             </button>\n//             {summaryLatex && skillsLatex && metlifeLatex && adonsLatex && (\n//               <button\n//                 onClick={handleGoToResumeGenerator}\n//                 className=\"resume-generator-btn\"\n//               >\n//                 🎯 Go to Resume Generation\n//               </button>\n//             )}\n\n//             <button onClick={handleFitExplanation} disabled={loading}>\n//               Why I Fit This Role\n//             </button>\n//           </div>\n\n//           {jobResult && (\n//             <div className=\"overlay\">\n//               <div className=\"modal job-analysis-modal\">\n//                 <button className=\"close-btn\" onClick={() => setJobResult(\"\")}>\n//                   ×\n//                 </button>\n//                 <h2>🧠 Job Compatibility Analysis</h2>\n//                 <div className=\"modal-content\">\n//                   {jobResult.split(/\\*\\*(.*?)\\*\\*/g).map((chunk, index) =>\n//                     index % 2 === 1 ? (\n//                       <h4 key={index} className=\"highlight-heading\">\n//                         {chunk}\n//                       </h4>\n//                     ) : (\n//                       <p key={index}>{chunk}</p>\n//                     )\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n\n//           {linkedinMessage &&\n//             renderBox(\"LinkedIn Message to Recruiter\", linkedinMessage)}\n\n//           <div className=\"mini-grid\">\n//             {renderBox(\"Summary\", summaryLatex)}\n//             {renderBox(\"Tech Skills\", skillsLatex)}\n//             {renderBox(\"Met Life Work Exp\", metlifeLatex)}\n//             {renderBox(\"Adons Work Exp\", adonsLatex)}\n//           </div>\n//         </div>\n\n//         <div className=\"right-panel\">\n//           <div className=\"job-header\">\n//             <span className=\"job-counter\">🧾 Job #{jobCount}</span>\n//             <div>\n//               <button onClick={handleNextJob}>➕ Next Job</button>\n//               <button\n//                 onClick={() => {\n//                   localStorage.removeItem(\"jobCounter\");\n//                   window.location.reload();\n//                 }}\n//               >\n//                 Reset Counter\n//               </button>\n//             </div>\n//           </div>\n//           <button className=\"gmailManagerButton\" onClick={handleGmailManager}>\n//             <h2>Gmail Manager</h2>\n//           </button>\n//           <EmailStatsWidget onStatsUpdate={handleEmailStatsUpdate} />\n\n//           <div\n//             style={{\n//               display: \"flex\",\n//               alignItems: \"center\",\n//               marginBottom: \"10px\",\n//             }}\n//           >\n//             <label style={{ marginRight: \"10px\", fontWeight: \"bold\" }}>\n//               🏢 Company:\n//             </label>\n//             <input\n//               type=\"text\"\n//               value={companyName}\n//               onChange={(e) => setCompanyName(e.target.value)}\n//               style={{\n//                 padding: \"6px 10px\",\n//                 borderRadius: \"4px\",\n//                 border: \"1px solid #ccc\",\n//                 fontSize: \"1rem\",\n//                 width: \"220px\",\n//               }}\n//             />\n//           </div>\n//           {renderBox(\"Changes Made\", changes)}\n//           {renderBox(\"Final Resume\", FinalResumeLatex)}\n//           {renderBox(\"CoverLetter For Given Job\", coverLetter)}\n\n//           <button\n//             onClick={() => {\n//               if (coverLetter) {\n//                 navigate(\"/cover-letter-generation\", {\n//                   state: {\n//                     coverLetterData: coverLetter,\n//                     companyName: companyName,\n//                     jobDescription: jobDesc,\n//                   },\n//                 });\n//               } else {\n//                 alert(\"Please generate cover letter content first!\");\n//               }\n//             }}\n//             className=\"edit-cover-letter-btn\"\n//           >\n//             ✏️ Edit & Generate Cover Letter PDF\n//           </button>\n\n//           {fitExplanation &&\n//             renderBox(\"🧠 Why I Fit This Role\", fitExplanation)}\n\n//           <button onClick={handleWhyIFitGeneration}>\n//             📄 Edit & Generate Why I Fit Document\n//           </button>\n\n//           {renderBox(\"ColdMail For Given Job\", coldEmail)}\n//           {coldEmail && (\n//             <ColdEmailSender coldEmail={coldEmail} companyName={companyName} />\n//           )}\n//         </div>\n//       </div>\n//       {/* 📄 Resume Paste Modal (LaTeX Resume Modal) */}\n//       {showModal && (\n//         <div className=\"gmail-overlay\">\n//           <div className=\"gmail-compose-box\">\n//             <div className=\"gmail-header\">\n//               <span>Paste Your Full LaTeX Resume</span>\n//               <div className=\"gmail-icons\">\n//                 <span title=\"Minimize\">—</span>\n//                 <span title=\"Full screen\">⧉</span>\n//                 <span\n//                   className=\"gmail-close\"\n//                   onClick={() => setShowModal(false)}\n//                 >\n//                   ×\n//                 </span>\n//               </div>\n//             </div>\n//             <textarea\n//               rows=\"12\"\n//               value={latexResume}\n//               onChange={(e) => setLatexResume(e.target.value)}\n//               placeholder=\"Paste your full LaTeX resume code here...\"\n//               className=\"gmail-body\"\n//             />\n//             <div className=\"gmail-footer\">\n//               <button\n//                 className=\"gmail-send\"\n//                 onClick={() => setShowModal(false)}\n//               >\n//                 Cancel\n//               </button>\n//               <button\n//                 className=\"gmail-send\"\n//                 onClick={() => {\n//                   console.log(\"Submitted Resume:\", latexResume);\n//                   setShowModal(false);\n//                 }}\n//               >\n//                 Submit for Comparison\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//       {/* 📧 Gmail Compose Cold Email Modal */}\n//       {showEmailModal && (\n//         <div className=\"gmail-overlay\">\n//           <div className=\"gmail-compose-box\">\n//             <div className=\"gmail-header\">\n//               <span>New Message</span>\n//               <div className=\"gmail-icons\">\n//                 <span title=\"Minimize\">—</span>\n//                 <span title=\"Full screen\">⧉</span>\n//                 <span\n//                   className=\"gmail-close\"\n//                   onClick={() => setShowEmailModal(false)}\n//                 >\n//                   ×\n//                 </span>\n//               </div>\n//             </div>\n\n//             <div className=\"gmail-fields\">\n//               <input type=\"text\" className=\"gmail-to\" placeholder=\"To\" />\n//               <input\n//                 type=\"text\"\n//                 className=\"gmail-subject\"\n//                 placeholder=\"Subject\"\n//                 value={emailSubject}\n//                 onChange={(e) => setEmailSubject(e.target.value)}\n//               />\n//               <textarea\n//                 className=\"gmail-body\"\n//                 rows=\"10\"\n//                 value={emailBody}\n//                 onChange={(e) => setEmailBody(e.target.value)}\n//               />\n//               <input type=\"file\" className=\"gmail-attachment\" />\n//             </div>\n\n//             <div className=\"gmail-footer\">\n//               <button\n//                 className=\"gmail-send\"\n//                 onClick={handleSendEmail}\n//                 disabled={emailSending}\n//               >\n//                 {emailSending ? \"Sending...\" : \"Send\"}\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default JDInput;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../CSS/JDInput.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction JDInput() {\n  _s();\n  const [jobDescription, setJobDescription] = useState(\"\");\n  const [jobCount, setJobCount] = useState(1);\n  const [companyName, setCompanyName] = useState(\"Your Company Name\");\n  const [editableCompany, setEditableCompany] = useState(false);\n  const [resumeOutput, setResumeOutput] = useState(\"\");\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [whyIFit, setWhyIFit] = useState(\"\");\n\n  // Load job counter from local storage\n  useEffect(() => {\n    const count = localStorage.getItem(\"jobCounter\");\n    if (count) setJobCount(parseInt(count, 10));\n  }, []);\n  const handleNextJob = () => {\n    const nextCount = jobCount + 1;\n    setJobCount(nextCount);\n    localStorage.setItem(\"jobCounter\", nextCount);\n    window.location.reload();\n  };\n  const handleJDChange = e => {\n    setJobDescription(e.target.value);\n  };\n  const toggleCompanyEdit = () => {\n    setEditableCompany(true);\n  };\n  const saveCompanyName = () => {\n    setEditableCompany(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jdinput-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Job Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Paste job description here...\",\n        value: jobDescription,\n        onChange: handleJDChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-btn\",\n          children: \"Generate Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-btn\",\n          children: \"Generate Cover Letter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-btn\",\n          children: \"Generate Why I Fit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-info-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83E\\uDDFE Job #\", jobCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"job-btn\",\n          onClick: handleNextJob,\n          children: \"\\u2795 Next Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"job-btn reset\",\n          onClick: () => {\n            localStorage.removeItem(\"jobCounter\");\n            window.location.reload();\n          },\n          children: \"\\uD83D\\uDD01 Reset Counter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"company-name-edit\",\n        children: editableCompany ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"company-input\",\n            value: companyName,\n            onChange: e => setCompanyName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: saveCompanyName,\n            children: \"\\uD83D\\uDCBE Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"company-name\",\n            onClick: toggleCompanyEdit,\n            children: [\"\\uD83C\\uDFE2 \", companyName, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"edit-hint\",\n              children: \"(edit)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-flow\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDCC4 Resume \\u279D \\uD83D\\uDCDD Cover Letter \\u279D \\uD83D\\uDCCC Why I Fit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 774,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"gmailManagerButton\",\n        children: \"\\uD83D\\uDCEC Gmail Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCC4 Final Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: resumeOutput,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-btn\",\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCDD Cover Letter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: coverLetter,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-btn\",\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCCC Why I Fit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: whyIFit,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-btn\",\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 756,\n    columnNumber: 5\n  }, this);\n}\n_s(JDInput, \"A7gUEJJEhS0bLKhcQoERdUoXLVg=\");\n_c = JDInput;\nexport default JDInput;\nvar _c;\n$RefreshReg$(_c, \"JDInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","JDInput","_s","jobDescription","setJobDescription","jobCount","setJobCount","companyName","setCompanyName","editableCompany","setEditableCompany","resumeOutput","setResumeOutput","coverLetter","setCoverLetter","whyIFit","setWhyIFit","count","localStorage","getItem","parseInt","handleNextJob","nextCount","setItem","window","location","reload","handleJDChange","e","target","value","toggleCompanyEdit","saveCompanyName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","removeItem","readOnly","_c","$RefreshReg$"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/components/JDInput.js"],"sourcesContent":["// // JDInput.js\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   buildGeminiPrompt,\n//   resumeTemplate,\n//   coverLetterTemplate,\n//   coldEmailTemplate,\n//   buildLinkedInMessagePrompt,\n//   buildCoverLetterUpdatePrompt,\n//   buildCompanyAndEmailPrompt,\n//   buildGeminiPromptForJD,\n//   buildFitForRolePrompt,\n// } from \"../utils/promptBuilder\";\n// import {\n//   callGeminiAPIforJD,\n//   callGeminiAPI,\n//   callGeminiAPIForLinkedInMessage,\n//   callGeminiAPIForCoverLetterUpdate,\n//   callGeminiAPIForCompanyAndEmail,\n//   callGeminiAPIForFitExplanation,\n// } from \"../utils/apiHandler\";\n// import {\n//   sanitizeLatexContent,\n//   sanitizeSkillsLatex,\n// } from \"../utils/latexSanitizer\";\n// import \"../CSS/JDInput.css\";\n// import { useResume } from \"../context/ResumeContext\"; // ✅ Add this\n// // Add this import with your other imports\n// import ColdEmailSender from \"../components/ColdEmailSender\";\n\n// // import { whyIFitService } from \"../services/api\";\n\n// // Add these imports at the top of JDInput.js\n// import EmailStatsWidget from \"../components/EmailStatsWidget\";\n// import \"../CSS/EmailStatsWidget.css\";\n\n// function JDInput({ onJDUpdate }) {\n//   // 🌐 Routing\n//   const navigate = useNavigate();\n\n//   // 🔐 Authentication check\n//   useEffect(() => {\n//     const isLoggedIn = localStorage.getItem(\"loggedIn\");\n//     if (isLoggedIn !== \"true\") {\n//       navigate(\"/login\");\n//     }\n//   }, []);\n\n//   const {\n//     jobDesc,\n//     setJobDesc,\n//     summaryLatex,\n//     setSummaryLatex,\n//     skillsLatex,\n//     setSkillsLatex,\n//     metlifeLatex,\n//     setMetlifeLatex,\n//     adonsLatex,\n//     setAdonsLatex,\n//     companyName,\n//     setCompanyName,\n//     FinalResumeLatex,\n//     setFinalResumeLatex,\n//     changes,\n//     setChanges,\n//     coverLetter,\n//     setCoverLetter,\n//     coldEmail,\n//     setColdEmail,\n//     linkedinMessage,\n//     setLinkedinMessage,\n//   } = useResume();\n\n//   const [loading, setLoading] = useState(false);\n\n//   const [showModal, setShowModal] = useState(false);\n//   const [latexResume, setLatexResume] = useState(\"\");\n//   const [showEmailModal, setShowEmailModal] = useState(false);\n//   const [emailSubject, setEmailSubject] = useState(\"\");\n//   const [emailBody, setEmailBody] = useState(\"\");\n//   const [emailSending, setEmailSending] = useState(false);\n//   const [toastMsg, setToastMsg] = useState(\"\");\n//   const [jobResult, setJobResult] = useState(\"\");\n//   const [showJobModal, setShowJobModal] = useState(false);\n//   const [isEditorOpen, setEditorOpen] = useState(false);\n//   const [coverLetterContent, setCoverLetterContent] = useState(\n//     `Your default content here...`\n//   );\n//   const [fitExplanation, setFitExplanation] = useState(\"\");\n//   // Add these state variables in your JDInput component\n//   const [emailStats, setEmailStats] = useState({});\n//   const [emailReminders, setEmailReminders] = useState([]);\n//   // Add this function to handle stats updates\n//   const handleEmailStatsUpdate = (data) => {\n//     setEmailStats(data.stats || {});\n//     setEmailReminders(data.reminders || []);\n//   };\n\n//   const [jobCount, setJobCount] = useState(() => {\n//     const saved = localStorage.getItem(\"jobCounter\");\n//     return saved ? parseInt(saved) : 1;\n//   });\n//   const handleNextJob = () => {\n//     const newCount = jobCount + 1;\n//     localStorage.setItem(\"jobCounter\", newCount);\n//     setJobCount(newCount);\n//     window.location.reload(); // Refresh page to start over\n//   };\n\n//   const formattedCoverLetter = coverLetter\n//     .replace(/\\n\\n/g, \"<p>\")\n//     .replace(/\\n/g, \"<br>\");\n\n//   // 📅 Format today's date\n//   const todayDate = new Date().toLocaleDateString(\"en-US\", {\n//     year: \"numeric\",\n//     month: \"long\",\n//     day: \"numeric\",\n//   });\n\n//   useEffect(() => {\n//     const subjectMatch = coldEmail.match(/Subject:\\s*(.*)/i);\n//     setEmailSubject(subjectMatch ? subjectMatch[1].trim() : \"\");\n//     setEmailBody(coldEmail.replace(/Subject:.*\\n?/i, \"\").trim());\n//   }, [coldEmail]);\n\n//   // Toast message function\n//   const showToast = (msg) => {\n//     setToastMsg(msg);\n//     setTimeout(() => setToastMsg(\"\"), 3000); // toast disappears in 3 seconds\n//   };\n\n//   // 📥 Copyable Content Box Renderer\n//   const renderBox = (title, content) => (\n//     <div className=\"content-box\">\n//       <h3>{title}</h3>\n//       <textarea rows=\"8\" value={content} readOnly className=\"textarea\" />\n//       <button\n//         className=\"copy-btn\"\n//         onClick={() => {\n//           navigator.clipboard.writeText(content);\n//         }}\n//       >\n//         Copy the text\n//       </button>\n//     </div>\n//   );\n\n//   // 💡 Feature Functions\n//   const handleJD = async () => {\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n//     if (onJDUpdate) onJDUpdate(jobDesc);\n//     const prompt = buildGeminiPromptForJD({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//     });\n//     const result = await callGeminiAPIforJD(prompt);\n//     setJobResult(result.result || \"\");\n//     setLoading(false);\n//     setShowJobModal(true);\n//   };\n\n//   const handleGenerate = async () => {\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n//     if (onJDUpdate) onJDUpdate(jobDesc);\n//     const prompt = buildGeminiPrompt({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//       coverLetterTemplate,\n//       coldEmailTemplate,\n//     });\n//     const result = await callGeminiAPI(prompt);\n//     setCompanyName(result.companyName || \"\");\n\n//     setSummaryLatex(sanitizeLatexContent(result.summaryLatex || \"\"));\n//     setSkillsLatex(result.skillsLatex || \"\");\n//     setMetlifeLatex(sanitizeLatexContent(result.metlifeLatex || \"\"));\n//     setAdonsLatex(sanitizeLatexContent(result.adonsLatex || \"\"));\n//     setChanges(result.changes || \"\"); // Set changes from the result\n//     setCoverLetter(sanitizeLatexContent(result.coverLetter || \"\"));\n//     setColdEmail(result.coldEmail || \"\");\n//     setFinalResumeLatex(sanitizeLatexContent(result.FinalResumeLatex || \"\"));\n//     setLoading(false);\n//   };\n\n//   const handleLinkedInMessage = async () => {\n//     if (!jobDesc.trim()) return;\n//     console.log(\n//       \"🚀 ~ file: JDInput.js:88 ~ handleLinkedInMessage ~ jobDesc:\",\n//       jobDesc\n//     );\n//     setLoading(true);\n//     const prompt = buildLinkedInMessagePrompt({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//     });\n//     const result = await callGeminiAPIForLinkedInMessage(prompt);\n//     console.log(\"the result in jdinput file is \", result);\n//     setLinkedinMessage(result.linkedinMessage || \"\");\n//     setLoading(false);\n//   };\n\n//   const handleCoverLetterUpdate = async () => {\n//     console.log(\n//       \"the handle cover letter update is called in jd input function\"\n//     );\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n\n//     const prompt = buildCoverLetterUpdatePrompt({\n//       jobDescription: jobDesc,\n//       resumeTemplate: resumeTemplate.full,\n//       coverLetterTemplate,\n//       todayDate,\n//     });\n//     console.log(\"the prompt in jd input file is \", prompt);\n\n//     const { updatedCoverLetter } = await callGeminiAPIForCoverLetterUpdate(\n//       prompt\n//     );\n//     console.log(\"the updated cover letter is \", updatedCoverLetter);\n\n//     setLoading(false);\n//     navigate(\"/cover-letter-update\", {\n//       state: {\n//         template: coverLetterTemplate,\n//         updated: updatedCoverLetter,\n//       },\n//     });\n//   };\n\n//   const handleCompanyNameExtraction = async () => {\n//     const prompt = buildCompanyAndEmailPrompt(jobDesc);\n//     const company = await callGeminiAPIForCompanyAndEmail(prompt);\n//     console.log(\"🧾 Company Extracted:\", company);\n//   };\n\n//   const handleSaveToDB = async () => {\n//     const payload = {\n//       applyDate: new Date().toISOString().split(\"T\")[0],\n//       companyName,\n//       summaryLatex,\n//       skillsLatex,\n//       metlifeLatex,\n//       adonsLatex,\n//       changes,\n//       coverLetter,\n//       coldEmail,\n//       finalResumeLatex: FinalResumeLatex,\n//       jobDescription: jobDesc, // Include job description in payload\n//     };\n\n//     try {\n//       const response = await fetch(\"http://localhost:5001/save-data\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       const result = await response.json();\n//       console.log(\"✅ Backend Response:\", result);\n//       if (response.status === 200) {\n//         alert(\"✅ Saved to DB successfully!\");\n//       } else if (response.status === 409) {\n//         alert(\"⚠️ This data already exists in the database.\");\n//       } else {\n//         alert(`❌ Unexpected error: ${result.message || \"Unknown error\"}`);\n//       }\n\n//       // alert(\"✅ Saved to DB successfully!\");\n//     } catch (error) {\n//       console.error(\"❌ Error saving to DB:\", error);\n//       alert(\"❌ Failed to save to DB.\");\n//     }\n//   };\n\n//   const handleSendEmail = async () => {\n//     const to = document.querySelector(\".gmail-to\").value;\n//     const subject = emailSubject;\n//     const text = emailBody;\n//     const fileInput = document.querySelector(\".gmail-attachment\");\n\n//     let attachmentBase64 = \"\";\n//     let attachmentName = \"\";\n\n//     if (fileInput.files.length > 0) {\n//       const file = fileInput.files[0];\n//       attachmentName = file.name;\n\n//       const reader = new FileReader();\n//       reader.onload = async () => {\n//         // Strip the base64 prefix (e.g., \"data:application/pdf;base64,...\")\n//         attachmentBase64 = reader.result.split(\",\")[1];\n\n//         try {\n//           setEmailSending(true);\n//           const res = await fetch(\"http://localhost:5001/send-email\", {\n//             method: \"POST\",\n//             headers: {\n//               \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify({\n//               to,\n//               subject,\n//               text,\n//               attachmentName,\n//               attachmentBase64,\n//             }),\n//           });\n\n//           const data = await res.json();\n//           if (res.ok) {\n//             // alert(\"📨 Email sent successfully!\");\n//             showToast(\"📨 Email sent successfully!\");\n\n//             setShowEmailModal(false);\n//           } else {\n//             // alert(\"❌ Failed to send email: \" + data.message);\n//             showToast(\"❌ Failed: \" + data.error);\n//           }\n//         } catch (err) {\n//           showToast(\"❌ Network error: \" + err.message);\n//         } finally {\n//           setEmailSending(false); // ✅ stop spinner\n//         }\n//       };\n//       reader.readAsDataURL(file); // Triggers reader.onload above\n//     } else {\n//       // No attachment, just send email\n//       try {\n//         setEmailSending(true);\n//         const res = await fetch(\"http://localhost:5001/send-email\", {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({ to, subject, text }), // no attachment\n//         });\n\n//         const data = await res.json();\n//         if (res.ok) {\n//           showToast(\"📨 Email sent successfully!\");\n//           // alert(\"📨 Email sent successfully!\");\n//           setShowEmailModal(false);\n//         } else {\n//           showToast(\"❌ Failed: \" + data.message);\n//         }\n//       } catch (err) {\n//         showToast(\"❌ Network error: \" + err.message);\n//       } finally {\n//         setEmailSending(false); // ✅ stop spinner\n//       }\n//     }\n//   };\n\n//   const handleGoToResumeGenerator = () => {\n//     // Navigate to resume generation component with the generated data\n//     navigate(\"/resume-generation\", {\n//       state: {\n//         resumeData: {\n//           PROFESSIONAL_SUMMARY: summaryLatex,\n//           TECHNICAL_SKILLS: skillsLatex,\n//           METLIFE_BULLET_POINTS: metlifeLatex,\n//           ADONS_BULLET_POINTS: adonsLatex,\n//         },\n//         jobDescription: jobDesc,\n//         companyName: companyName,\n//       },\n//     });\n//   };\n\n//   const handleFitExplanation = async () => {\n//     if (!jobDesc.trim()) return;\n//     setLoading(true);\n//     const prompt = buildFitForRolePrompt({\n//       jobDescription: jobDesc,\n//       resumeLatex: FinalResumeLatex || resumeTemplate.full,\n//     });\n\n//     const result = await callGeminiAPIForFitExplanation(prompt);\n//     setFitExplanation(result.fitExplanation || \"\");\n//     setLoading(false);\n//   };\n\n//   // Replace your handleWhyIFitGeneration function with this:\n//   const handleWhyIFitGeneration = async () => {\n//     if (!jobDesc.trim()) {\n//       alert(\"Please enter a job description first\");\n//       return;\n//     }\n\n//     if (!fitExplanation.trim()) {\n//       alert(\n//         \"Please click 'Why I Fit This Role' button first to generate AI analysis\"\n//       );\n//       return;\n//     }\n\n//     // Navigate to the Why I Fit generation page with the data\n//     navigate(\"/why-i-fit-generation\", {\n//       state: {\n//         whyIFitData: fitExplanation,\n//         companyName: companyName,\n//         jobDescription: jobDesc,\n//       },\n//     });\n//   };\n//   const handleGmailManager = () => {\n//     navigate(\"/gmail-manager\");\n//   };\n//   // / Add this function to refresh Gmail and update stats\n//   const handleGmailRefresh = async () => {\n//     try {\n//       const response = await fetch(\n//         \"http://localhost:8080/api/emails/fetch-gmail\",\n//         {\n//           method: \"POST\",\n//         }\n//       );\n//       const result = await response.json();\n\n//       if (result.success) {\n//         showToast(\"Gmail emails fetched successfully!\");\n//         // Refresh the email stats widget\n//         window.location.reload(); // Or trigger a re-render of EmailStatsWidget\n//       } else {\n//         showToast(\"Error fetching Gmail: \" + result.message);\n//       }\n//     } catch (error) {\n//       showToast(\"Gmail fetch error: \" + error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"jd-wrapper\">\n//       <header className=\"header\">\n//         <h1>ResuMe</h1>\n//         <p>\n//           <strong>Resume Update | Cover Letter | Cold Mail</strong>\n//         </p>\n//         <button\n//           onClick={() => {\n//             localStorage.removeItem(\"loggedIn\");\n//             navigate(\"/login\");\n//           }}\n//         >\n//           🚪 Logout\n//         </button>\n//       </header>\n//       {/* ✅ Toast & Spinner */}\n//       {toastMsg && <div className=\"toast-message\">{toastMsg}</div>}\n//       {emailSending && <div className=\"spinner\"></div>}\n//       <div className=\"main\">\n//         <div className=\"left-panel\">\n//           <h2>Job Description</h2>\n//           <textarea\n//             className=\"textarea jd-input\"\n//             rows=\"6\"\n//             placeholder=\"Paste job description here...\"\n//             value={jobDesc}\n//             onChange={(e) => setJobDesc(e.target.value)}\n//           />\n//           <div className=\"button-container\">\n//             <button onClick={handleJD} disabled={loading}>\n//               {loading ? \"Checking Job...\" : \"Job Matching/Unmatching\"}\n//             </button>\n//             <button onClick={handleGenerate} disabled={loading}>\n//               {loading ? \"Generating...\" : \"Generate Tailored Content\"}\n//             </button>\n//             <button\n//               className=\"linkedin-btn\"\n//               onClick={handleLinkedInMessage}\n//               disabled={loading}\n//             >\n//               💬 Generate LinkedIn Message\n//             </button>\n//             <button onClick={() => navigate(\"/ats-analysis\")}>\n//               🔍 Compare Resume with JD (ATS Score)\n//             </button>\n//             <button onClick={handleCoverLetterUpdate} disabled={loading}>\n//               ✉️ Generate Cover Letter\n//             </button>\n//             <button onClick={handleCompanyNameExtraction}>\n//               🧾 Get Company Name\n//             </button>\n//             <button onClick={handleSaveToDB} disabled={loading}>\n//               💾 Save to Database\n//             </button>\n//             {summaryLatex && skillsLatex && metlifeLatex && adonsLatex && (\n//               <button\n//                 onClick={handleGoToResumeGenerator}\n//                 className=\"resume-generator-btn\"\n//               >\n//                 🎯 Go to Resume Generation\n//               </button>\n//             )}\n\n//             <button onClick={handleFitExplanation} disabled={loading}>\n//               Why I Fit This Role\n//             </button>\n//           </div>\n\n//           {jobResult && (\n//             <div className=\"overlay\">\n//               <div className=\"modal job-analysis-modal\">\n//                 <button className=\"close-btn\" onClick={() => setJobResult(\"\")}>\n//                   ×\n//                 </button>\n//                 <h2>🧠 Job Compatibility Analysis</h2>\n//                 <div className=\"modal-content\">\n//                   {jobResult.split(/\\*\\*(.*?)\\*\\*/g).map((chunk, index) =>\n//                     index % 2 === 1 ? (\n//                       <h4 key={index} className=\"highlight-heading\">\n//                         {chunk}\n//                       </h4>\n//                     ) : (\n//                       <p key={index}>{chunk}</p>\n//                     )\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n\n//           {linkedinMessage &&\n//             renderBox(\"LinkedIn Message to Recruiter\", linkedinMessage)}\n\n//           <div className=\"mini-grid\">\n//             {renderBox(\"Summary\", summaryLatex)}\n//             {renderBox(\"Tech Skills\", skillsLatex)}\n//             {renderBox(\"Met Life Work Exp\", metlifeLatex)}\n//             {renderBox(\"Adons Work Exp\", adonsLatex)}\n//           </div>\n//         </div>\n\n//         <div className=\"right-panel\">\n//           <div className=\"job-header\">\n//             <span className=\"job-counter\">🧾 Job #{jobCount}</span>\n//             <div>\n//               <button onClick={handleNextJob}>➕ Next Job</button>\n//               <button\n//                 onClick={() => {\n//                   localStorage.removeItem(\"jobCounter\");\n//                   window.location.reload();\n//                 }}\n//               >\n//                 Reset Counter\n//               </button>\n//             </div>\n//           </div>\n//           <button className=\"gmailManagerButton\" onClick={handleGmailManager}>\n//             <h2>Gmail Manager</h2>\n//           </button>\n//           <EmailStatsWidget onStatsUpdate={handleEmailStatsUpdate} />\n\n//           <div\n//             style={{\n//               display: \"flex\",\n//               alignItems: \"center\",\n//               marginBottom: \"10px\",\n//             }}\n//           >\n//             <label style={{ marginRight: \"10px\", fontWeight: \"bold\" }}>\n//               🏢 Company:\n//             </label>\n//             <input\n//               type=\"text\"\n//               value={companyName}\n//               onChange={(e) => setCompanyName(e.target.value)}\n//               style={{\n//                 padding: \"6px 10px\",\n//                 borderRadius: \"4px\",\n//                 border: \"1px solid #ccc\",\n//                 fontSize: \"1rem\",\n//                 width: \"220px\",\n//               }}\n//             />\n//           </div>\n//           {renderBox(\"Changes Made\", changes)}\n//           {renderBox(\"Final Resume\", FinalResumeLatex)}\n//           {renderBox(\"CoverLetter For Given Job\", coverLetter)}\n\n//           <button\n//             onClick={() => {\n//               if (coverLetter) {\n//                 navigate(\"/cover-letter-generation\", {\n//                   state: {\n//                     coverLetterData: coverLetter,\n//                     companyName: companyName,\n//                     jobDescription: jobDesc,\n//                   },\n//                 });\n//               } else {\n//                 alert(\"Please generate cover letter content first!\");\n//               }\n//             }}\n//             className=\"edit-cover-letter-btn\"\n//           >\n//             ✏️ Edit & Generate Cover Letter PDF\n//           </button>\n\n//           {fitExplanation &&\n//             renderBox(\"🧠 Why I Fit This Role\", fitExplanation)}\n\n//           <button onClick={handleWhyIFitGeneration}>\n//             📄 Edit & Generate Why I Fit Document\n//           </button>\n\n//           {renderBox(\"ColdMail For Given Job\", coldEmail)}\n//           {coldEmail && (\n//             <ColdEmailSender coldEmail={coldEmail} companyName={companyName} />\n//           )}\n//         </div>\n//       </div>\n//       {/* 📄 Resume Paste Modal (LaTeX Resume Modal) */}\n//       {showModal && (\n//         <div className=\"gmail-overlay\">\n//           <div className=\"gmail-compose-box\">\n//             <div className=\"gmail-header\">\n//               <span>Paste Your Full LaTeX Resume</span>\n//               <div className=\"gmail-icons\">\n//                 <span title=\"Minimize\">—</span>\n//                 <span title=\"Full screen\">⧉</span>\n//                 <span\n//                   className=\"gmail-close\"\n//                   onClick={() => setShowModal(false)}\n//                 >\n//                   ×\n//                 </span>\n//               </div>\n//             </div>\n//             <textarea\n//               rows=\"12\"\n//               value={latexResume}\n//               onChange={(e) => setLatexResume(e.target.value)}\n//               placeholder=\"Paste your full LaTeX resume code here...\"\n//               className=\"gmail-body\"\n//             />\n//             <div className=\"gmail-footer\">\n//               <button\n//                 className=\"gmail-send\"\n//                 onClick={() => setShowModal(false)}\n//               >\n//                 Cancel\n//               </button>\n//               <button\n//                 className=\"gmail-send\"\n//                 onClick={() => {\n//                   console.log(\"Submitted Resume:\", latexResume);\n//                   setShowModal(false);\n//                 }}\n//               >\n//                 Submit for Comparison\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//       {/* 📧 Gmail Compose Cold Email Modal */}\n//       {showEmailModal && (\n//         <div className=\"gmail-overlay\">\n//           <div className=\"gmail-compose-box\">\n//             <div className=\"gmail-header\">\n//               <span>New Message</span>\n//               <div className=\"gmail-icons\">\n//                 <span title=\"Minimize\">—</span>\n//                 <span title=\"Full screen\">⧉</span>\n//                 <span\n//                   className=\"gmail-close\"\n//                   onClick={() => setShowEmailModal(false)}\n//                 >\n//                   ×\n//                 </span>\n//               </div>\n//             </div>\n\n//             <div className=\"gmail-fields\">\n//               <input type=\"text\" className=\"gmail-to\" placeholder=\"To\" />\n//               <input\n//                 type=\"text\"\n//                 className=\"gmail-subject\"\n//                 placeholder=\"Subject\"\n//                 value={emailSubject}\n//                 onChange={(e) => setEmailSubject(e.target.value)}\n//               />\n//               <textarea\n//                 className=\"gmail-body\"\n//                 rows=\"10\"\n//                 value={emailBody}\n//                 onChange={(e) => setEmailBody(e.target.value)}\n//               />\n//               <input type=\"file\" className=\"gmail-attachment\" />\n//             </div>\n\n//             <div className=\"gmail-footer\">\n//               <button\n//                 className=\"gmail-send\"\n//                 onClick={handleSendEmail}\n//                 disabled={emailSending}\n//               >\n//                 {emailSending ? \"Sending...\" : \"Send\"}\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default JDInput;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../CSS/JDInput.css\";\n\nfunction JDInput() {\n  const [jobDescription, setJobDescription] = useState(\"\");\n  const [jobCount, setJobCount] = useState(1);\n  const [companyName, setCompanyName] = useState(\"Your Company Name\");\n  const [editableCompany, setEditableCompany] = useState(false);\n  const [resumeOutput, setResumeOutput] = useState(\"\");\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [whyIFit, setWhyIFit] = useState(\"\");\n\n  // Load job counter from local storage\n  useEffect(() => {\n    const count = localStorage.getItem(\"jobCounter\");\n    if (count) setJobCount(parseInt(count, 10));\n  }, []);\n\n  const handleNextJob = () => {\n    const nextCount = jobCount + 1;\n    setJobCount(nextCount);\n    localStorage.setItem(\"jobCounter\", nextCount);\n    window.location.reload();\n  };\n\n  const handleJDChange = (e) => {\n    setJobDescription(e.target.value);\n  };\n\n  const toggleCompanyEdit = () => {\n    setEditableCompany(true);\n  };\n\n  const saveCompanyName = () => {\n    setEditableCompany(false);\n  };\n\n  return (\n    <div className=\"jdinput-container\">\n      {/* LEFT PANEL */}\n      <div className=\"left-panel\">\n        <h2>Job Description</h2>\n        <textarea\n          placeholder=\"Paste job description here...\"\n          value={jobDescription}\n          onChange={handleJDChange}\n        />\n\n        <div className=\"action-buttons\">\n          <button className=\"generate-btn\">Generate Resume</button>\n          <button className=\"generate-btn\">Generate Cover Letter</button>\n          <button className=\"generate-btn\">Generate Why I Fit</button>\n        </div>\n      </div>\n\n      {/* CENTER PANEL */}\n      <div className=\"center-panel\">\n        <div className=\"job-info-bar\">\n          <h2>🧾 Job #{jobCount}</h2>\n          <button className=\"job-btn\" onClick={handleNextJob}>\n            ➕ Next Job\n          </button>\n          <button\n            className=\"job-btn reset\"\n            onClick={() => {\n              localStorage.removeItem(\"jobCounter\");\n              window.location.reload();\n            }}\n          >\n            🔁 Reset Counter\n          </button>\n        </div>\n\n        <div className=\"company-name-edit\">\n          {editableCompany ? (\n            <>\n              <input\n                className=\"company-input\"\n                value={companyName}\n                onChange={(e) => setCompanyName(e.target.value)}\n              />\n              <button className=\"save-btn\" onClick={saveCompanyName}>\n                💾 Save\n              </button>\n            </>\n          ) : (\n            <>\n              <h2 className=\"company-name\" onClick={toggleCompanyEdit}>\n                🏢 {companyName} <span className=\"edit-hint\">(edit)</span>\n              </h2>\n            </>\n          )}\n        </div>\n\n        <div className=\"output-flow\">\n          <p>📄 Resume ➝ 📝 Cover Letter ➝ 📌 Why I Fit</p>\n        </div>\n      </div>\n\n      {/* RIGHT PANEL */}\n      <div className=\"right-panel\">\n        <button className=\"gmailManagerButton\">📬 Gmail Manager</button>\n\n        <div className=\"output-card\">\n          <h3>📄 Final Resume</h3>\n          <textarea value={resumeOutput} readOnly />\n          <button className=\"copy-btn\">Copy</button>\n        </div>\n\n        <div className=\"output-card\">\n          <h3>📝 Cover Letter</h3>\n          <textarea value={coverLetter} readOnly />\n          <button className=\"copy-btn\">Copy</button>\n        </div>\n\n        <div className=\"output-card\">\n          <h3>📌 Why I Fit</h3>\n          <textarea value={whyIFit} readOnly />\n          <button className=\"copy-btn\">Copy</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default JDInput;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}