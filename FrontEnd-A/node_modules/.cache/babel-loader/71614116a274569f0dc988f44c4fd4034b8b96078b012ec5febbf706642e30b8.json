{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { sendCustomEmails } from \"../services/coldEmailService\";\n\n// const ColdEmailModal = ({ isOpen, onClose, coldEmail, companyName }) => {\n//   const [contacts, setContacts] = useState([]);\n//   const [newContact, setNewContact] = useState({\n//     name: \"\",\n//     email: \"\",\n//     title: \"\",\n//   });\n//   const [candidateInfo, setCandidateInfo] = useState({\n//     candidateName: \"Mahaboob Pasha Mohammad\",\n//     candidateEmail: \"mahaboobpashamohammad8@gmail.com\",\n//     candidatePhone: \"3143056056\",\n//   });\n//   const [emailData, setEmailData] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     companyName: companyName || \"\",\n//     hiringManagerName: \"Hiring Manager\",\n//   });\n//   const [attachments, setAttachments] = useState([]);\n//   const [sending, setSending] = useState(false);\n\n//   // Initialize email data when modal opens\n//   useEffect(() => {\n//     if (isOpen && coldEmail) {\n//       const emailSubject =\n//         coldEmail.match(/Subject:\\s*(.*)/i)?.[1]?.trim() || \"Job Application\";\n//       const emailBody = coldEmail.replace(/Subject:.*\\n?/i, \"\").trim();\n\n//       setEmailData({\n//         subject: emailSubject,\n//         body: emailBody,\n//         companyName: companyName || \"\",\n//         hiringManagerName: \"Hiring Manager\",\n//       });\n//     }\n//   }, [isOpen, coldEmail, companyName]);\n\n//   const addContact = () => {\n//     if (newContact.name && newContact.email) {\n//       const contact = {\n//         name: newContact.title\n//           ? `${newContact.name} (${newContact.title})`\n//           : newContact.name,\n//         email: newContact.email,\n//         company: emailData.companyName,\n//       };\n\n//       setContacts([...contacts, contact]);\n//       setNewContact({ name: \"\", email: \"\", title: \"\" });\n//     }\n//   };\n\n//   const removeContact = (index) => {\n//     setContacts(contacts.filter((_, i) => i !== index));\n//   };\n\n//   const handleFileAttachment = (event) => {\n//     const files = Array.from(event.target.files);\n//     const maxSize = 25 * 1024 * 1024; // 25MB limit\n//     const allowedTypes = [\n//       \"application/pdf\",\n//       \"application/msword\",\n//       \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       \"text/plain\",\n//     ];\n\n//     const validFiles = files.filter((file) => {\n//       if (file.size > maxSize) {\n//         alert(`File \"${file.name}\" is too large. Maximum size is 25MB.`);\n//         return false;\n//       }\n//       if (!allowedTypes.includes(file.type)) {\n//         alert(\n//           `File \"${file.name}\" type not supported. Please use PDF, DOC, DOCX, or TXT files.`\n//         );\n//         return false;\n//       }\n//       return true;\n//     });\n\n//     validFiles.forEach((file) => {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         const base64 = reader.result.split(\",\")[1];\n//         setAttachments((prev) => [\n//           ...prev,\n//           {\n//             name: file.name,\n//             type: file.type,\n//             size: file.size,\n//             base64: base64,\n//           },\n//         ]);\n//       };\n//       reader.readAsDataURL(file);\n//     });\n//   };\n\n//   const removeAttachment = (index) => {\n//     setAttachments(attachments.filter((_, i) => i !== index));\n//   };\n\n//   const formatFileSize = (bytes) => {\n//     if (bytes === 0) return \"0 Bytes\";\n//     const k = 1024;\n//     const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n//     const i = Math.floor(Math.log(bytes) / Math.log(k));\n//     return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n//   };\n\n//   const personalizeContentForPreview = (content) => {\n//     const firstContactName =\n//       contacts.length > 0\n//         ? contacts[0].name.replace(/\\s*\\([^)]*\\)/g, \"\").trim()\n//         : emailData.hiringManagerName;\n\n//     return content\n//       .replace(/\\[CANDIDATE_NAME\\]/g, candidateInfo.candidateName)\n//       .replace(/\\{CANDIDATE_NAME\\}/g, candidateInfo.candidateName)\n//       .replace(/\\[RECIPIENT_NAME\\]/g, firstContactName)\n//       .replace(/\\{RECIPIENT_NAME\\}/g, firstContactName)\n//       .replace(/\\[HIRING_MANAGER\\]/g, firstContactName)\n//       .replace(/\\{HIRING_MANAGER\\}/g, firstContactName)\n//       .replace(/\\[Hiring Manager's Name\\]/g, firstContactName)\n//       .replace(/Hiring Manager's Name/g, firstContactName)\n//       .replace(/\\[COMPANY_NAME\\]/g, emailData.companyName)\n//       .replace(/\\{COMPANY_NAME\\}/g, emailData.companyName)\n//       .replace(/\\[Company Name\\]/g, emailData.companyName)\n//       .replace(/Company Name/g, emailData.companyName)\n//       .replace(/\\[company\\s*name\\]/gi, emailData.companyName)\n//       .replace(/\\[hiring\\s*manager\\]/gi, firstContactName)\n//       .replace(/\\[recipient\\s*name\\]/gi, firstContactName);\n//   };\n\n//   const handleSendEmails = async () => {\n//     if (contacts.length === 0) {\n//       alert(\"Please add at least one HR contact.\");\n//       return;\n//     }\n\n//     if (!emailData.companyName.trim()) {\n//       alert(\"Please enter the company name.\");\n//       return;\n//     }\n\n//     setSending(true);\n//     try {\n//       // Send the original template content, let backend handle personalization\n//       const response = await sendCustomEmails({\n//         candidateName: candidateInfo.candidateName,\n//         candidateEmail: candidateInfo.candidateEmail,\n//         candidatePhone: candidateInfo.candidatePhone,\n//         companyName: emailData.companyName,\n//         customSubject: emailData.subject, // Send original template\n//         customBody: emailData.body, // Send original template\n//         selectedContacts: contacts,\n//         attachments: attachments,\n//       });\n\n//       if (response.data.status === \"success\") {\n//         alert(\n//           `✅ Success! ${response.data.successCount} emails sent successfully out of ${response.data.totalEmails} total emails!`\n//         );\n//         onClose();\n//         setContacts([]);\n//         setAttachments([]);\n//       } else {\n//         alert(\n//           `❌ ${\n//             response.data.message ||\n//             \"Some emails failed to send. Check console for details.\"\n//           }`\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Send error:\", error);\n\n//       if (error.response) {\n//         alert(\n//           `❌ Backend error: ${error.response.data.message || \"Unknown error\"}`\n//         );\n//       } else if (error.request) {\n//         alert(\n//           \"❌ Cannot connect to backend. Make sure Spring Boot is running on port 8080.\"\n//         );\n//       } else {\n//         alert(`❌ Error: ${error.message}`);\n//       }\n//     } finally {\n//       setSending(false);\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   // Gmail-style CSS\n//   const styles = {\n//     overlay: {\n//       position: \"fixed\",\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: \"rgba(0, 0, 0, 0.4)\",\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       alignItems: \"center\",\n//       zIndex: 1000,\n//     },\n//     modal: {\n//       backgroundColor: \"white\",\n//       width: \"90%\",\n//       maxWidth: \"900px\",\n//       maxHeight: \"95vh\",\n//       borderRadius: \"8px\",\n//       boxShadow:\n//         \"0 24px 38px 3px rgba(0,0,0,0.14), 0 9px 46px 8px rgba(0,0,0,0.12), 0 11px 15px -7px rgba(0,0,0,0.2)\",\n//       overflow: \"hidden\",\n//       fontFamily:\n//         \"Google Sans, Roboto, RobotoDraft, Helvetica, Arial, sans-serif\",\n//     },\n//     header: {\n//       padding: \"16px 24px\",\n//       borderBottom: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     title: {\n//       fontSize: \"16px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       margin: 0,\n//     },\n//     closeButton: {\n//       background: \"none\",\n//       border: \"none\",\n//       fontSize: \"20px\",\n//       cursor: \"pointer\",\n//       color: \"#5f6368\",\n//       padding: \"8px\",\n//       borderRadius: \"4px\",\n//     },\n//     content: {\n//       padding: \"24px\",\n//       overflowY: \"auto\",\n//       maxHeight: \"calc(95vh - 140px)\",\n//     },\n//     grid: {\n//       display: \"grid\",\n//       gridTemplateColumns: \"1fr 1fr\",\n//       gap: \"24px\",\n//     },\n//     section: {\n//       marginBottom: \"24px\",\n//     },\n//     sectionTitle: {\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       marginBottom: \"12px\",\n//       margin: \"0 0 12px 0\",\n//     },\n//     input: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"inherit\",\n//       outline: \"none\",\n//       transition: \"border-color 0.2s\",\n//     },\n//     textarea: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"Roboto Mono, monospace\",\n//       outline: \"none\",\n//       resize: \"vertical\",\n//       lineHeight: \"1.4\",\n//     },\n//     button: {\n//       padding: \"8px 16px\",\n//       border: \"none\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       cursor: \"pointer\",\n//       transition: \"all 0.2s\",\n//     },\n//     primaryButton: {\n//       backgroundColor: \"#1a73e8\",\n//       color: \"white\",\n//     },\n//     secondaryButton: {\n//       backgroundColor: \"#f8f9fa\",\n//       color: \"#3c4043\",\n//       border: \"1px solid #dadce0\",\n//     },\n//     successButton: {\n//       backgroundColor: \"#137333\",\n//       color: \"white\",\n//     },\n//     contactItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"8px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     attachmentItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"8px 12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"4px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     preview: {\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       padding: \"16px\",\n//       backgroundColor: \"#f8f9fa\",\n//       fontSize: \"13px\",\n//     },\n//     footer: {\n//       padding: \"16px 24px\",\n//       borderTop: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"flex-end\",\n//       gap: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     tip: {\n//       fontSize: \"12px\",\n//       color: \"#5f6368\",\n//       marginTop: \"8px\",\n//       padding: \"12px\",\n//       backgroundColor: \"#e8f0fe\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #d2e3fc\",\n//     },\n//   };\n\n//   return (\n//     <div style={styles.overlay}>\n//       <div style={styles.modal}>\n//         {/* Header */}\n//         <div style={styles.header}>\n//           <h2 style={styles.title}>New Message</h2>\n//           <button\n//             onClick={onClose}\n//             style={styles.closeButton}\n//             onMouseEnter={(e) => (e.target.style.backgroundColor = \"#f1f3f4\")}\n//             onMouseLeave={(e) =>\n//               (e.target.style.backgroundColor = \"transparent\")\n//             }\n//           >\n//             ×\n//           </button>\n//         </div>\n\n//         {/* Content */}\n//         <div style={styles.content}>\n//           <div style={styles.grid}>\n//             {/* Left Column */}\n//             <div>\n//               {/* Candidate Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Your Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Your Name\"\n//                     value={candidateInfo.candidateName}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"Your Email\"\n//                     value={candidateInfo.candidateEmail}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateEmail: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"tel\"\n//                     placeholder=\"Your Phone\"\n//                     value={candidateInfo.candidatePhone}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidatePhone: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Company Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Company Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Company Name\"\n//                     value={emailData.companyName}\n//                     onChange={(e) =>\n//                       setEmailData({\n//                         ...emailData,\n//                         companyName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Add HR Contacts */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Add HR Contacts</h3>\n//                 <div\n//                   style={{ display: \"grid\", gap: \"12px\", marginBottom: \"16px\" }}\n//                 >\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"HR Name\"\n//                     value={newContact.name}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, name: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"HR Email\"\n//                     value={newContact.email}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, email: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Job Title (optional)\"\n//                     value={newContact.title}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, title: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <button\n//                   onClick={addContact}\n//                   disabled={!newContact.name || !newContact.email}\n//                   style={{\n//                     ...styles.button,\n//                     ...styles.successButton,\n//                     opacity: !newContact.name || !newContact.email ? 0.5 : 1,\n//                   }}\n//                 >\n//                   Add Contact\n//                 </button>\n//               </div>\n\n//               {/* Contact List */}\n//               {contacts.length > 0 && (\n//                 <div style={styles.section}>\n//                   <h3 style={styles.sectionTitle}>\n//                     HR Contacts ({contacts.length})\n//                   </h3>\n//                   <div style={{ maxHeight: \"200px\", overflowY: \"auto\" }}>\n//                     {contacts.map((contact, index) => (\n//                       <div key={index} style={styles.contactItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"14px\" }}>\n//                             {contact.name}\n//                           </div>\n//                           <div style={{ fontSize: \"12px\", color: \"#5f6368\" }}>\n//                             {contact.email}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeContact(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Right Column */}\n//             <div>\n//               {/* Email Editor */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Email Content</h3>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Subject:\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     value={emailData.subject}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, subject: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Body:\n//                   </label>\n//                   <textarea\n//                     value={emailData.body}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, body: e.target.value })\n//                     }\n//                     rows=\"10\"\n//                     style={styles.textarea}\n//                   />\n//                 </div>\n//                 <div style={styles.tip}>\n//                   💡 Use placeholders: [CANDIDATE_NAME], [RECIPIENT_NAME],\n//                   [COMPANY_NAME], [HIRING_MANAGER]\n//                 </div>\n//               </div>\n\n//               {/* File Attachments */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Attachments</h3>\n//                 <input\n//                   type=\"file\"\n//                   multiple\n//                   accept=\".pdf,.doc,.docx,.txt\"\n//                   onChange={handleFileAttachment}\n//                   style={{ marginBottom: \"12px\" }}\n//                 />\n//                 <div\n//                   style={{\n//                     fontSize: \"12px\",\n//                     color: \"#5f6368\",\n//                     marginBottom: \"16px\",\n//                   }}\n//                 >\n//                   Supported: PDF, DOC, DOCX, TXT (Max 25MB each)\n//                 </div>\n\n//                 {attachments.length > 0 && (\n//                   <div>\n//                     <h4 style={{ ...styles.sectionTitle, fontSize: \"13px\" }}>\n//                       Attached Files ({attachments.length})\n//                     </h4>\n//                     {attachments.map((file, index) => (\n//                       <div key={index} style={styles.attachmentItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"13px\" }}>\n//                             {file.name}\n//                           </div>\n//                           <div style={{ fontSize: \"11px\", color: \"#5f6368\" }}>\n//                             {formatFileSize(file.size)}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeAttachment(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n\n//               {/* Preview */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Preview (Sample)</h3>\n//                 <div style={styles.preview}>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>To:</strong>{\" \"}\n//                     {contacts.length > 0 ? contacts[0].email : \"HR Email\"}\n//                   </div>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>Subject:</strong>{\" \"}\n//                     {personalizeContentForPreview(emailData.subject)}\n//                   </div>\n//                   <div\n//                     style={{\n//                       whiteSpace: \"pre-line\",\n//                       maxHeight: \"120px\",\n//                       overflow: \"auto\",\n//                     }}\n//                   >\n//                     {personalizeContentForPreview(emailData.body)}\n//                   </div>\n//                   {contacts.length > 1 && (\n//                     <div\n//                       style={{\n//                         marginTop: \"12px\",\n//                         fontSize: \"11px\",\n//                         color: \"#5f6368\",\n//                         fontStyle: \"italic\",\n//                       }}\n//                     >\n//                       Note: Each email will be personalized with the individual\n//                       HR contact's name\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div style={styles.footer}>\n//           <button\n//             onClick={onClose}\n//             style={{\n//               ...styles.button,\n//               ...styles.secondaryButton,\n//             }}\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSendEmails}\n//             disabled={\n//               sending || contacts.length === 0 || !emailData.companyName.trim()\n//             }\n//             style={{\n//               ...styles.button,\n//               ...styles.primaryButton,\n//               opacity:\n//                 contacts.length > 0 && emailData.companyName.trim() ? 1 : 0.5,\n//             }}\n//           >\n//             {sending ? \"Sending...\" : `Send to ${contacts.length} Contact(s)`}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ColdEmailModal;","map":{"version":3,"names":[],"sources":["/Users/maibupash/Desktop/MastersProjects/resuME/ResumeApp/Resume-FrontEnd/src/components/ColdEmailModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { sendCustomEmails } from \"../services/coldEmailService\";\n\n// const ColdEmailModal = ({ isOpen, onClose, coldEmail, companyName }) => {\n//   const [contacts, setContacts] = useState([]);\n//   const [newContact, setNewContact] = useState({\n//     name: \"\",\n//     email: \"\",\n//     title: \"\",\n//   });\n//   const [candidateInfo, setCandidateInfo] = useState({\n//     candidateName: \"Mahaboob Pasha Mohammad\",\n//     candidateEmail: \"mahaboobpashamohammad8@gmail.com\",\n//     candidatePhone: \"3143056056\",\n//   });\n//   const [emailData, setEmailData] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     companyName: companyName || \"\",\n//     hiringManagerName: \"Hiring Manager\",\n//   });\n//   const [attachments, setAttachments] = useState([]);\n//   const [sending, setSending] = useState(false);\n\n//   // Initialize email data when modal opens\n//   useEffect(() => {\n//     if (isOpen && coldEmail) {\n//       const emailSubject =\n//         coldEmail.match(/Subject:\\s*(.*)/i)?.[1]?.trim() || \"Job Application\";\n//       const emailBody = coldEmail.replace(/Subject:.*\\n?/i, \"\").trim();\n\n//       setEmailData({\n//         subject: emailSubject,\n//         body: emailBody,\n//         companyName: companyName || \"\",\n//         hiringManagerName: \"Hiring Manager\",\n//       });\n//     }\n//   }, [isOpen, coldEmail, companyName]);\n\n//   const addContact = () => {\n//     if (newContact.name && newContact.email) {\n//       const contact = {\n//         name: newContact.title\n//           ? `${newContact.name} (${newContact.title})`\n//           : newContact.name,\n//         email: newContact.email,\n//         company: emailData.companyName,\n//       };\n\n//       setContacts([...contacts, contact]);\n//       setNewContact({ name: \"\", email: \"\", title: \"\" });\n//     }\n//   };\n\n//   const removeContact = (index) => {\n//     setContacts(contacts.filter((_, i) => i !== index));\n//   };\n\n//   const handleFileAttachment = (event) => {\n//     const files = Array.from(event.target.files);\n//     const maxSize = 25 * 1024 * 1024; // 25MB limit\n//     const allowedTypes = [\n//       \"application/pdf\",\n//       \"application/msword\",\n//       \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       \"text/plain\",\n//     ];\n\n//     const validFiles = files.filter((file) => {\n//       if (file.size > maxSize) {\n//         alert(`File \"${file.name}\" is too large. Maximum size is 25MB.`);\n//         return false;\n//       }\n//       if (!allowedTypes.includes(file.type)) {\n//         alert(\n//           `File \"${file.name}\" type not supported. Please use PDF, DOC, DOCX, or TXT files.`\n//         );\n//         return false;\n//       }\n//       return true;\n//     });\n\n//     validFiles.forEach((file) => {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         const base64 = reader.result.split(\",\")[1];\n//         setAttachments((prev) => [\n//           ...prev,\n//           {\n//             name: file.name,\n//             type: file.type,\n//             size: file.size,\n//             base64: base64,\n//           },\n//         ]);\n//       };\n//       reader.readAsDataURL(file);\n//     });\n//   };\n\n//   const removeAttachment = (index) => {\n//     setAttachments(attachments.filter((_, i) => i !== index));\n//   };\n\n//   const formatFileSize = (bytes) => {\n//     if (bytes === 0) return \"0 Bytes\";\n//     const k = 1024;\n//     const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n//     const i = Math.floor(Math.log(bytes) / Math.log(k));\n//     return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n//   };\n\n//   const personalizeContentForPreview = (content) => {\n//     const firstContactName =\n//       contacts.length > 0\n//         ? contacts[0].name.replace(/\\s*\\([^)]*\\)/g, \"\").trim()\n//         : emailData.hiringManagerName;\n\n//     return content\n//       .replace(/\\[CANDIDATE_NAME\\]/g, candidateInfo.candidateName)\n//       .replace(/\\{CANDIDATE_NAME\\}/g, candidateInfo.candidateName)\n//       .replace(/\\[RECIPIENT_NAME\\]/g, firstContactName)\n//       .replace(/\\{RECIPIENT_NAME\\}/g, firstContactName)\n//       .replace(/\\[HIRING_MANAGER\\]/g, firstContactName)\n//       .replace(/\\{HIRING_MANAGER\\}/g, firstContactName)\n//       .replace(/\\[Hiring Manager's Name\\]/g, firstContactName)\n//       .replace(/Hiring Manager's Name/g, firstContactName)\n//       .replace(/\\[COMPANY_NAME\\]/g, emailData.companyName)\n//       .replace(/\\{COMPANY_NAME\\}/g, emailData.companyName)\n//       .replace(/\\[Company Name\\]/g, emailData.companyName)\n//       .replace(/Company Name/g, emailData.companyName)\n//       .replace(/\\[company\\s*name\\]/gi, emailData.companyName)\n//       .replace(/\\[hiring\\s*manager\\]/gi, firstContactName)\n//       .replace(/\\[recipient\\s*name\\]/gi, firstContactName);\n//   };\n\n//   const handleSendEmails = async () => {\n//     if (contacts.length === 0) {\n//       alert(\"Please add at least one HR contact.\");\n//       return;\n//     }\n\n//     if (!emailData.companyName.trim()) {\n//       alert(\"Please enter the company name.\");\n//       return;\n//     }\n\n//     setSending(true);\n//     try {\n//       // Send the original template content, let backend handle personalization\n//       const response = await sendCustomEmails({\n//         candidateName: candidateInfo.candidateName,\n//         candidateEmail: candidateInfo.candidateEmail,\n//         candidatePhone: candidateInfo.candidatePhone,\n//         companyName: emailData.companyName,\n//         customSubject: emailData.subject, // Send original template\n//         customBody: emailData.body, // Send original template\n//         selectedContacts: contacts,\n//         attachments: attachments,\n//       });\n\n//       if (response.data.status === \"success\") {\n//         alert(\n//           `✅ Success! ${response.data.successCount} emails sent successfully out of ${response.data.totalEmails} total emails!`\n//         );\n//         onClose();\n//         setContacts([]);\n//         setAttachments([]);\n//       } else {\n//         alert(\n//           `❌ ${\n//             response.data.message ||\n//             \"Some emails failed to send. Check console for details.\"\n//           }`\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Send error:\", error);\n\n//       if (error.response) {\n//         alert(\n//           `❌ Backend error: ${error.response.data.message || \"Unknown error\"}`\n//         );\n//       } else if (error.request) {\n//         alert(\n//           \"❌ Cannot connect to backend. Make sure Spring Boot is running on port 8080.\"\n//         );\n//       } else {\n//         alert(`❌ Error: ${error.message}`);\n//       }\n//     } finally {\n//       setSending(false);\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   // Gmail-style CSS\n//   const styles = {\n//     overlay: {\n//       position: \"fixed\",\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: \"rgba(0, 0, 0, 0.4)\",\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       alignItems: \"center\",\n//       zIndex: 1000,\n//     },\n//     modal: {\n//       backgroundColor: \"white\",\n//       width: \"90%\",\n//       maxWidth: \"900px\",\n//       maxHeight: \"95vh\",\n//       borderRadius: \"8px\",\n//       boxShadow:\n//         \"0 24px 38px 3px rgba(0,0,0,0.14), 0 9px 46px 8px rgba(0,0,0,0.12), 0 11px 15px -7px rgba(0,0,0,0.2)\",\n//       overflow: \"hidden\",\n//       fontFamily:\n//         \"Google Sans, Roboto, RobotoDraft, Helvetica, Arial, sans-serif\",\n//     },\n//     header: {\n//       padding: \"16px 24px\",\n//       borderBottom: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     title: {\n//       fontSize: \"16px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       margin: 0,\n//     },\n//     closeButton: {\n//       background: \"none\",\n//       border: \"none\",\n//       fontSize: \"20px\",\n//       cursor: \"pointer\",\n//       color: \"#5f6368\",\n//       padding: \"8px\",\n//       borderRadius: \"4px\",\n//     },\n//     content: {\n//       padding: \"24px\",\n//       overflowY: \"auto\",\n//       maxHeight: \"calc(95vh - 140px)\",\n//     },\n//     grid: {\n//       display: \"grid\",\n//       gridTemplateColumns: \"1fr 1fr\",\n//       gap: \"24px\",\n//     },\n//     section: {\n//       marginBottom: \"24px\",\n//     },\n//     sectionTitle: {\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       color: \"#3c4043\",\n//       marginBottom: \"12px\",\n//       margin: \"0 0 12px 0\",\n//     },\n//     input: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"inherit\",\n//       outline: \"none\",\n//       transition: \"border-color 0.2s\",\n//     },\n//     textarea: {\n//       width: \"100%\",\n//       padding: \"12px 16px\",\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontFamily: \"Roboto Mono, monospace\",\n//       outline: \"none\",\n//       resize: \"vertical\",\n//       lineHeight: \"1.4\",\n//     },\n//     button: {\n//       padding: \"8px 16px\",\n//       border: \"none\",\n//       borderRadius: \"4px\",\n//       fontSize: \"14px\",\n//       fontWeight: \"500\",\n//       cursor: \"pointer\",\n//       transition: \"all 0.2s\",\n//     },\n//     primaryButton: {\n//       backgroundColor: \"#1a73e8\",\n//       color: \"white\",\n//     },\n//     secondaryButton: {\n//       backgroundColor: \"#f8f9fa\",\n//       color: \"#3c4043\",\n//       border: \"1px solid #dadce0\",\n//     },\n//     successButton: {\n//       backgroundColor: \"#137333\",\n//       color: \"white\",\n//     },\n//     contactItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"8px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     attachmentItem: {\n//       display: \"flex\",\n//       justifyContent: \"space-between\",\n//       alignItems: \"center\",\n//       padding: \"8px 12px\",\n//       backgroundColor: \"#f8f9fa\",\n//       marginBottom: \"4px\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #e8eaed\",\n//     },\n//     preview: {\n//       border: \"1px solid #dadce0\",\n//       borderRadius: \"4px\",\n//       padding: \"16px\",\n//       backgroundColor: \"#f8f9fa\",\n//       fontSize: \"13px\",\n//     },\n//     footer: {\n//       padding: \"16px 24px\",\n//       borderTop: \"1px solid #dadce0\",\n//       display: \"flex\",\n//       justifyContent: \"flex-end\",\n//       gap: \"12px\",\n//       backgroundColor: \"#f8f9fa\",\n//     },\n//     tip: {\n//       fontSize: \"12px\",\n//       color: \"#5f6368\",\n//       marginTop: \"8px\",\n//       padding: \"12px\",\n//       backgroundColor: \"#e8f0fe\",\n//       borderRadius: \"4px\",\n//       border: \"1px solid #d2e3fc\",\n//     },\n//   };\n\n//   return (\n//     <div style={styles.overlay}>\n//       <div style={styles.modal}>\n//         {/* Header */}\n//         <div style={styles.header}>\n//           <h2 style={styles.title}>New Message</h2>\n//           <button\n//             onClick={onClose}\n//             style={styles.closeButton}\n//             onMouseEnter={(e) => (e.target.style.backgroundColor = \"#f1f3f4\")}\n//             onMouseLeave={(e) =>\n//               (e.target.style.backgroundColor = \"transparent\")\n//             }\n//           >\n//             ×\n//           </button>\n//         </div>\n\n//         {/* Content */}\n//         <div style={styles.content}>\n//           <div style={styles.grid}>\n//             {/* Left Column */}\n//             <div>\n//               {/* Candidate Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Your Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Your Name\"\n//                     value={candidateInfo.candidateName}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"Your Email\"\n//                     value={candidateInfo.candidateEmail}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidateEmail: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"tel\"\n//                     placeholder=\"Your Phone\"\n//                     value={candidateInfo.candidatePhone}\n//                     onChange={(e) =>\n//                       setCandidateInfo({\n//                         ...candidateInfo,\n//                         candidatePhone: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Company Info */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Company Information</h3>\n//                 <div style={{ display: \"grid\", gap: \"12px\" }}>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Company Name\"\n//                     value={emailData.companyName}\n//                     onChange={(e) =>\n//                       setEmailData({\n//                         ...emailData,\n//                         companyName: e.target.value,\n//                       })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//               </div>\n\n//               {/* Add HR Contacts */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Add HR Contacts</h3>\n//                 <div\n//                   style={{ display: \"grid\", gap: \"12px\", marginBottom: \"16px\" }}\n//                 >\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"HR Name\"\n//                     value={newContact.name}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, name: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"email\"\n//                     placeholder=\"HR Email\"\n//                     value={newContact.email}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, email: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Job Title (optional)\"\n//                     value={newContact.title}\n//                     onChange={(e) =>\n//                       setNewContact({ ...newContact, title: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <button\n//                   onClick={addContact}\n//                   disabled={!newContact.name || !newContact.email}\n//                   style={{\n//                     ...styles.button,\n//                     ...styles.successButton,\n//                     opacity: !newContact.name || !newContact.email ? 0.5 : 1,\n//                   }}\n//                 >\n//                   Add Contact\n//                 </button>\n//               </div>\n\n//               {/* Contact List */}\n//               {contacts.length > 0 && (\n//                 <div style={styles.section}>\n//                   <h3 style={styles.sectionTitle}>\n//                     HR Contacts ({contacts.length})\n//                   </h3>\n//                   <div style={{ maxHeight: \"200px\", overflowY: \"auto\" }}>\n//                     {contacts.map((contact, index) => (\n//                       <div key={index} style={styles.contactItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"14px\" }}>\n//                             {contact.name}\n//                           </div>\n//                           <div style={{ fontSize: \"12px\", color: \"#5f6368\" }}>\n//                             {contact.email}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeContact(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Right Column */}\n//             <div>\n//               {/* Email Editor */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Email Content</h3>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Subject:\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     value={emailData.subject}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, subject: e.target.value })\n//                     }\n//                     style={styles.input}\n//                   />\n//                 </div>\n//                 <div style={{ marginBottom: \"16px\" }}>\n//                   <label\n//                     style={{\n//                       display: \"block\",\n//                       marginBottom: \"8px\",\n//                       fontSize: \"14px\",\n//                       fontWeight: \"500\",\n//                     }}\n//                   >\n//                     Body:\n//                   </label>\n//                   <textarea\n//                     value={emailData.body}\n//                     onChange={(e) =>\n//                       setEmailData({ ...emailData, body: e.target.value })\n//                     }\n//                     rows=\"10\"\n//                     style={styles.textarea}\n//                   />\n//                 </div>\n//                 <div style={styles.tip}>\n//                   💡 Use placeholders: [CANDIDATE_NAME], [RECIPIENT_NAME],\n//                   [COMPANY_NAME], [HIRING_MANAGER]\n//                 </div>\n//               </div>\n\n//               {/* File Attachments */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Attachments</h3>\n//                 <input\n//                   type=\"file\"\n//                   multiple\n//                   accept=\".pdf,.doc,.docx,.txt\"\n//                   onChange={handleFileAttachment}\n//                   style={{ marginBottom: \"12px\" }}\n//                 />\n//                 <div\n//                   style={{\n//                     fontSize: \"12px\",\n//                     color: \"#5f6368\",\n//                     marginBottom: \"16px\",\n//                   }}\n//                 >\n//                   Supported: PDF, DOC, DOCX, TXT (Max 25MB each)\n//                 </div>\n\n//                 {attachments.length > 0 && (\n//                   <div>\n//                     <h4 style={{ ...styles.sectionTitle, fontSize: \"13px\" }}>\n//                       Attached Files ({attachments.length})\n//                     </h4>\n//                     {attachments.map((file, index) => (\n//                       <div key={index} style={styles.attachmentItem}>\n//                         <div>\n//                           <div style={{ fontWeight: \"500\", fontSize: \"13px\" }}>\n//                             {file.name}\n//                           </div>\n//                           <div style={{ fontSize: \"11px\", color: \"#5f6368\" }}>\n//                             {formatFileSize(file.size)}\n//                           </div>\n//                         </div>\n//                         <button\n//                           onClick={() => removeAttachment(index)}\n//                           style={{\n//                             ...styles.button,\n//                             backgroundColor: \"transparent\",\n//                             color: \"#d93025\",\n//                             padding: \"4px 8px\",\n//                           }}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n\n//               {/* Preview */}\n//               <div style={styles.section}>\n//                 <h3 style={styles.sectionTitle}>Preview (Sample)</h3>\n//                 <div style={styles.preview}>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>To:</strong>{\" \"}\n//                     {contacts.length > 0 ? contacts[0].email : \"HR Email\"}\n//                   </div>\n//                   <div style={{ marginBottom: \"12px\" }}>\n//                     <strong>Subject:</strong>{\" \"}\n//                     {personalizeContentForPreview(emailData.subject)}\n//                   </div>\n//                   <div\n//                     style={{\n//                       whiteSpace: \"pre-line\",\n//                       maxHeight: \"120px\",\n//                       overflow: \"auto\",\n//                     }}\n//                   >\n//                     {personalizeContentForPreview(emailData.body)}\n//                   </div>\n//                   {contacts.length > 1 && (\n//                     <div\n//                       style={{\n//                         marginTop: \"12px\",\n//                         fontSize: \"11px\",\n//                         color: \"#5f6368\",\n//                         fontStyle: \"italic\",\n//                       }}\n//                     >\n//                       Note: Each email will be personalized with the individual\n//                       HR contact's name\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Footer */}\n//         <div style={styles.footer}>\n//           <button\n//             onClick={onClose}\n//             style={{\n//               ...styles.button,\n//               ...styles.secondaryButton,\n//             }}\n//           >\n//             Cancel\n//           </button>\n//           <button\n//             onClick={handleSendEmails}\n//             disabled={\n//               sending || contacts.length === 0 || !emailData.companyName.trim()\n//             }\n//             style={{\n//               ...styles.button,\n//               ...styles.primaryButton,\n//               opacity:\n//                 contacts.length > 0 && emailData.companyName.trim() ? 1 : 0.5,\n//             }}\n//           >\n//             {sending ? \"Sending...\" : `Send to ${contacts.length} Contact(s)`}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ColdEmailModal;\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}