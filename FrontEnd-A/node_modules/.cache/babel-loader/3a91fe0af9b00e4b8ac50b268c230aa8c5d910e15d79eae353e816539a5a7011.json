{"ast":null,"code":"// // src/components/ResumeGeneration.js\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../CSS/ResumeGeneration.css\"; // We'll create this CSS file\n\n// // Function to extract only the content we need for our backend\n// function processGeminiData(rawData) {\n//   const processed = {};\n\n//   // Extract Professional Summary items (remove \\begin{itemize} and \\end{itemize})\n//   if (rawData.PROFESSIONAL_SUMMARY) {\n//     let summary = rawData.PROFESSIONAL_SUMMARY;\n//     // Remove the itemize wrapper\n//     summary = summary.replace(/\\\\begin\\{itemize\\}.*?\\]/g, \"\");\n//     summary = summary.replace(/\\\\end\\{itemize\\}/g, \"\");\n//     // Clean up extra whitespace and ensure proper formatting\n//     summary = summary.trim();\n//     processed.PROFESSIONAL_SUMMARY = summary;\n//   }\n\n//   // Extract Technical Skills table content (remove tabular wrapper)\n//   if (rawData.TECHNICAL_SKILLS) {\n//     let skills = rawData.TECHNICAL_SKILLS;\n//     // Remove everything before the actual table content\n//     skills = skills.replace(/.*\\\\begin\\{tabular\\}[^}]*\\}/s, \"\");\n//     // Remove the end tabular\n//     skills = skills.replace(/\\\\end\\{tabular\\}.*/s, \"\");\n//     // Clean up\n//     skills = skills.trim();\n//     processed.TECHNICAL_SKILLS = skills;\n//   }\n\n//   // Extract MetLife bullet points (remove everything except \\item content)\n//   if (rawData.METLIFE_BULLET_POINTS) {\n//     let metlife = rawData.METLIFE_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     metlife = metlife.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     metlife = metlife.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     metlife = metlife.trim();\n//     processed.METLIFE_BULLET_POINTS = metlife;\n//   }\n\n//   // Extract Adons bullet points (remove everything except \\item content)\n//   if (rawData.ADONS_BULLET_POINTS) {\n//     let adons = rawData.ADONS_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     adons = adons.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     adons = adons.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     adons = adons.trim();\n//     processed.ADONS_BULLET_POINTS = adons;\n//   }\n\n//   console.log(\"🔄 Raw data:\", rawData);\n//   console.log(\"🔄 Processed data for backend:\", processed);\n//   return processed;\n// }\n\n// function ResumeGeneration() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n\n//   // Get the data passed from JDInput\n//   const { resumeData, jobDescription, companyName } = location.state || {};\n\n//   // State for PDF generation\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n//   const [pdfUrl, setPdfUrl] = useState(null);\n//   const [showPDFViewer, setShowPDFViewer] = useState(false);\n\n//   // Check if we have the required data\n//   useEffect(() => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data found. Please generate content first.\");\n//     } else {\n//       setMessage(\"✅ Resume data loaded successfully! Ready to generate PDF.\");\n//     }\n//   }, [resumeData]);\n\n//   // Generate PDF using our Spring Boot backend\n//   const handleGeneratePDF = async () => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data available\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     setMessage(\"\");\n\n//     try {\n//       // Process the Gemini data to extract only what our backend needs\n//       const processedData = processGeminiData(resumeData);\n\n//       console.log(\"🚀 Original Gemini data:\", resumeData);\n//       console.log(\"🔄 Processed data for backend:\", processedData);\n\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/resume/generate\",\n//         processedData,\n//         {\n//           responseType: \"blob\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Create blob and URL for viewing\n//       const blob = new Blob([response.data], { type: \"application/pdf\" });\n//       const url = window.URL.createObjectURL(blob);\n\n//       setPdfUrl(url);\n//       setShowPDFViewer(true);\n\n//       setMessage(\"✅ Resume PDF generated successfully!\");\n//     } catch (error) {\n//       console.error(\"❌ Error generating PDF:\", error);\n//       setMessage(\n//         \"❌ Error generating PDF. Make sure the backend is running on port 8080.\"\n//       );\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Download PDF\n//   const handleDownloadPDF = () => {\n//     if (pdfUrl) {\n//       const link = document.createElement(\"a\");\n//       link.href = pdfUrl;\n//       link.download = `${companyName || \"resume\"}.pdf`;\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//       setMessage(\"📄 PDF downloaded successfully!\");\n//     }\n//   };\n\n//   // Print PDF\n//   const handlePrintPDF = () => {\n//     if (pdfUrl) {\n//       const printWindow = window.open(pdfUrl, \"_blank\");\n//       printWindow.onload = () => {\n//         printWindow.print();\n//       };\n//     }\n//   };\n\n//   // Go back to JDInput\n//   const handleGoBack = () => {\n//     navigate(\"/jdinput\");\n//   };\n\n//   return (\n//     <div className=\"resume-generation-container\">\n//       {/* Header */}\n//       <header className=\"resume-header\">\n//         <h1>ResuMe</h1>\n\n//         <button onClick={handleGoBack} className=\"back-btn\">\n//           ← Back to Job Analysis\n//         </button>\n//       </header>\n\n//       <div className=\"main-content\">\n//         {/* Left Panel - Data Preview */}\n//         <div className=\"data-panel\">\n//           <h2>📋 Generated Content Preview</h2>\n\n//           {companyName && (\n//             <div className=\"info-box\">\n//               <h3>🏢 Target Company</h3>\n//               <p>{companyName}</p>\n//             </div>\n//           )}\n\n//           {resumeData ? (\n//             <>\n//               <div className=\"content-section\">\n//                 <h3>📝 Professional Summary</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.PROFESSIONAL_SUMMARY || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🛠️ Technical Skills</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.TECHNICAL_SKILLS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏢 MetLife Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.METLIFE_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏭 Adons Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.ADONS_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n//             </>\n//           ) : (\n//             <div className=\"no-data\">\n//               <p>\n//                 ❌ No resume data available. Please go back and generate content\n//                 first.\n//               </p>\n//             </div>\n//           )}\n\n//           {/* Action Buttons */}\n//           <div className=\"action-buttons\">\n//             <button\n//               onClick={handleGeneratePDF}\n//               disabled={!resumeData || isLoading}\n//               className=\"generate-btn\"\n//             >\n//               {isLoading ? \"⏳ Generating...\" : \"🎯 Generate PDF Resume\"}\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Right Panel - PDF Viewer */}\n//         {showPDFViewer && (\n//           <div className=\"pdf-panel\">\n//             <div className=\"pdf-header\">\n//               <h2>📄 Generated Resume</h2>\n//               <div className=\"pdf-actions\">\n//                 <button\n//                   onClick={handleDownloadPDF}\n//                   className=\"action-btn download\"\n//                 >\n//                   💾 Download\n//                 </button>\n//                 <button onClick={handlePrintPDF} className=\"action-btn print\">\n//                   🖨️ Print\n//                 </button>\n//                 <button\n//                   onClick={() => setShowPDFViewer(false)}\n//                   className=\"action-btn close\"\n//                 >\n//                   ✕ Close\n//                 </button>\n//               </div>\n//             </div>\n//             <div className=\"pdf-viewer\">\n//               <iframe\n//                 src={pdfUrl}\n//                 width=\"100%\"\n//                 height=\"100%\"\n//                 title=\"Generated Resume\"\n//                 frameBorder=\"0\"\n//               />\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Status Message */}\n//       {message && (\n//         <div\n//           className={`status-message ${\n//             message.includes(\"✅\") ? \"success\" : \"error\"\n//           }`}\n//         >\n//           {message}\n//         </div>\n//       )}\n\n//       {/* Loading Overlay */}\n//       {isLoading && (\n//         <div className=\"loading-overlay\">\n//           <div className=\"loading-content\">\n//             <div className=\"spinner\"></div>\n//             <p>Generating your professional resume... Please wait</p>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ResumeGeneration;","map":{"version":3,"names":[],"sources":["/Users/maibupash/Desktop/MastersProjects/resuME/ResumeApp/Resume-FrontEnd/src/components/ResumeGeneration.js"],"sourcesContent":["// // src/components/ResumeGeneration.js\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../CSS/ResumeGeneration.css\"; // We'll create this CSS file\n\n// // Function to extract only the content we need for our backend\n// function processGeminiData(rawData) {\n//   const processed = {};\n\n//   // Extract Professional Summary items (remove \\begin{itemize} and \\end{itemize})\n//   if (rawData.PROFESSIONAL_SUMMARY) {\n//     let summary = rawData.PROFESSIONAL_SUMMARY;\n//     // Remove the itemize wrapper\n//     summary = summary.replace(/\\\\begin\\{itemize\\}.*?\\]/g, \"\");\n//     summary = summary.replace(/\\\\end\\{itemize\\}/g, \"\");\n//     // Clean up extra whitespace and ensure proper formatting\n//     summary = summary.trim();\n//     processed.PROFESSIONAL_SUMMARY = summary;\n//   }\n\n//   // Extract Technical Skills table content (remove tabular wrapper)\n//   if (rawData.TECHNICAL_SKILLS) {\n//     let skills = rawData.TECHNICAL_SKILLS;\n//     // Remove everything before the actual table content\n//     skills = skills.replace(/.*\\\\begin\\{tabular\\}[^}]*\\}/s, \"\");\n//     // Remove the end tabular\n//     skills = skills.replace(/\\\\end\\{tabular\\}.*/s, \"\");\n//     // Clean up\n//     skills = skills.trim();\n//     processed.TECHNICAL_SKILLS = skills;\n//   }\n\n//   // Extract MetLife bullet points (remove everything except \\item content)\n//   if (rawData.METLIFE_BULLET_POINTS) {\n//     let metlife = rawData.METLIFE_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     metlife = metlife.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     metlife = metlife.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     metlife = metlife.trim();\n//     processed.METLIFE_BULLET_POINTS = metlife;\n//   }\n\n//   // Extract Adons bullet points (remove everything except \\item content)\n//   if (rawData.ADONS_BULLET_POINTS) {\n//     let adons = rawData.ADONS_BULLET_POINTS;\n//     // Remove everything before the first \\item\n//     adons = adons.replace(/.*?(?=\\\\item)/s, \"\");\n//     // Remove \\end{itemize}\n//     adons = adons.replace(/\\\\end\\{itemize\\}.*/s, \"\");\n//     // Clean up\n//     adons = adons.trim();\n//     processed.ADONS_BULLET_POINTS = adons;\n//   }\n\n//   console.log(\"🔄 Raw data:\", rawData);\n//   console.log(\"🔄 Processed data for backend:\", processed);\n//   return processed;\n// }\n\n// function ResumeGeneration() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n\n//   // Get the data passed from JDInput\n//   const { resumeData, jobDescription, companyName } = location.state || {};\n\n//   // State for PDF generation\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n//   const [pdfUrl, setPdfUrl] = useState(null);\n//   const [showPDFViewer, setShowPDFViewer] = useState(false);\n\n//   // Check if we have the required data\n//   useEffect(() => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data found. Please generate content first.\");\n//     } else {\n//       setMessage(\"✅ Resume data loaded successfully! Ready to generate PDF.\");\n//     }\n//   }, [resumeData]);\n\n//   // Generate PDF using our Spring Boot backend\n//   const handleGeneratePDF = async () => {\n//     if (!resumeData) {\n//       setMessage(\"❌ No resume data available\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     setMessage(\"\");\n\n//     try {\n//       // Process the Gemini data to extract only what our backend needs\n//       const processedData = processGeminiData(resumeData);\n\n//       console.log(\"🚀 Original Gemini data:\", resumeData);\n//       console.log(\"🔄 Processed data for backend:\", processedData);\n\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/resume/generate\",\n//         processedData,\n//         {\n//           responseType: \"blob\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Create blob and URL for viewing\n//       const blob = new Blob([response.data], { type: \"application/pdf\" });\n//       const url = window.URL.createObjectURL(blob);\n\n//       setPdfUrl(url);\n//       setShowPDFViewer(true);\n\n//       setMessage(\"✅ Resume PDF generated successfully!\");\n//     } catch (error) {\n//       console.error(\"❌ Error generating PDF:\", error);\n//       setMessage(\n//         \"❌ Error generating PDF. Make sure the backend is running on port 8080.\"\n//       );\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Download PDF\n//   const handleDownloadPDF = () => {\n//     if (pdfUrl) {\n//       const link = document.createElement(\"a\");\n//       link.href = pdfUrl;\n//       link.download = `${companyName || \"resume\"}.pdf`;\n//       document.body.appendChild(link);\n//       link.click();\n//       document.body.removeChild(link);\n//       setMessage(\"📄 PDF downloaded successfully!\");\n//     }\n//   };\n\n//   // Print PDF\n//   const handlePrintPDF = () => {\n//     if (pdfUrl) {\n//       const printWindow = window.open(pdfUrl, \"_blank\");\n//       printWindow.onload = () => {\n//         printWindow.print();\n//       };\n//     }\n//   };\n\n//   // Go back to JDInput\n//   const handleGoBack = () => {\n//     navigate(\"/jdinput\");\n//   };\n\n//   return (\n//     <div className=\"resume-generation-container\">\n//       {/* Header */}\n//       <header className=\"resume-header\">\n//         <h1>ResuMe</h1>\n\n//         <button onClick={handleGoBack} className=\"back-btn\">\n//           ← Back to Job Analysis\n//         </button>\n//       </header>\n\n//       <div className=\"main-content\">\n//         {/* Left Panel - Data Preview */}\n//         <div className=\"data-panel\">\n//           <h2>📋 Generated Content Preview</h2>\n\n//           {companyName && (\n//             <div className=\"info-box\">\n//               <h3>🏢 Target Company</h3>\n//               <p>{companyName}</p>\n//             </div>\n//           )}\n\n//           {resumeData ? (\n//             <>\n//               <div className=\"content-section\">\n//                 <h3>📝 Professional Summary</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.PROFESSIONAL_SUMMARY || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🛠️ Technical Skills</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.TECHNICAL_SKILLS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏢 MetLife Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.METLIFE_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n\n//               <div className=\"content-section\">\n//                 <h3>🏭 Adons Experience</h3>\n//                 <div className=\"latex-preview\">\n//                   {resumeData.ADONS_BULLET_POINTS || \"No content generated\"}\n//                 </div>\n//               </div>\n//             </>\n//           ) : (\n//             <div className=\"no-data\">\n//               <p>\n//                 ❌ No resume data available. Please go back and generate content\n//                 first.\n//               </p>\n//             </div>\n//           )}\n\n//           {/* Action Buttons */}\n//           <div className=\"action-buttons\">\n//             <button\n//               onClick={handleGeneratePDF}\n//               disabled={!resumeData || isLoading}\n//               className=\"generate-btn\"\n//             >\n//               {isLoading ? \"⏳ Generating...\" : \"🎯 Generate PDF Resume\"}\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Right Panel - PDF Viewer */}\n//         {showPDFViewer && (\n//           <div className=\"pdf-panel\">\n//             <div className=\"pdf-header\">\n//               <h2>📄 Generated Resume</h2>\n//               <div className=\"pdf-actions\">\n//                 <button\n//                   onClick={handleDownloadPDF}\n//                   className=\"action-btn download\"\n//                 >\n//                   💾 Download\n//                 </button>\n//                 <button onClick={handlePrintPDF} className=\"action-btn print\">\n//                   🖨️ Print\n//                 </button>\n//                 <button\n//                   onClick={() => setShowPDFViewer(false)}\n//                   className=\"action-btn close\"\n//                 >\n//                   ✕ Close\n//                 </button>\n//               </div>\n//             </div>\n//             <div className=\"pdf-viewer\">\n//               <iframe\n//                 src={pdfUrl}\n//                 width=\"100%\"\n//                 height=\"100%\"\n//                 title=\"Generated Resume\"\n//                 frameBorder=\"0\"\n//               />\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Status Message */}\n//       {message && (\n//         <div\n//           className={`status-message ${\n//             message.includes(\"✅\") ? \"success\" : \"error\"\n//           }`}\n//         >\n//           {message}\n//         </div>\n//       )}\n\n//       {/* Loading Overlay */}\n//       {isLoading && (\n//         <div className=\"loading-overlay\">\n//           <div className=\"loading-content\">\n//             <div className=\"spinner\"></div>\n//             <p>Generating your professional resume... Please wait</p>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ResumeGeneration;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}