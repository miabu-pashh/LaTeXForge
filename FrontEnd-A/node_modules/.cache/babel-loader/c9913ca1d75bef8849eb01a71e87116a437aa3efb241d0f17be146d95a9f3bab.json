{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import \"../CSS/CoverLetter.css\";\n// import html2pdf from \"html2pdf.js\";\n\n// const CoverLetterEditorModal = ({ isOpen, onClose, content, onChange }) => {\n//   const [editorContent, setEditorContent] = useState(content);\n\n//   const pdfRef = useRef();\n//   // üÜï New: Manage the content internally to prevent cursor jumps\n//   useEffect(() => {\n//     setEditorContent(content);\n//   }, [content]);\n//   const handleInput = (e) => {\n//     setEditorContent(e.currentTarget.innerHTML);\n//     // You can optionally call the parent's onChange if you need to sync it.\n//     // For now, let's keep it simple to fix the cursor issue.\n//   };\n\n//   const exportPDF = () => {\n//     const element = pdfRef.current;\n//     if (!element.textContent.trim()) {\n//       alert(\"No content to export!\");\n//       return;\n//     }\n//     const opt = {\n//       margin: 0,\n//       filename: \"CoverLetter.pdf\",\n//       image: { type: \"jpeg\", quality: 0.98 },\n//       html2canvas: { scale: 2 },\n//       jsPDF: { unit: \"in\", format: \"a4\", orientation: \"portrait\" },\n//     };\n//     html2pdf().set(opt).from(element).save();\n//   };\n\n//   const handleCommand = (command, value = null) => {\n//     if (pdfRef.current) {\n//       document.execCommand(command, false, value);\n//       setEditorContent(pdfRef.current.innerHTML);\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"editor-overlay\">\n//       <div className=\"editor-modal-container\">\n//         <div className=\"editor-header\">\n//           <h2>Cover Letter Editor</h2>\n//           <div className=\"action-buttons\">\n//             <button onClick={exportPDF}>üì§ Export PDF</button>\n//             <button onClick={onClose}>‚ùå Close</button>\n//           </div>\n//         </div>\n//         <div className=\"editor-toolbar\">\n//           <button>B</button>\n//           <button>I</button>\n//         </div>\n//         <div className=\"editor-scroll-container\">\n//           <div\n//             className=\"editor-page-view\"\n//             ref={pdfRef}\n//             contentEditable\n//             suppressContentEditableWarning={true}\n//             // 4. Use the internal state and the new handler.\n//             dangerouslySetInnerHTML={{ __html: editorContent }}\n//             onInput={handleInput}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CoverLetterEditorModal;","map":{"version":3,"names":[],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/components/CoverLetterEditorModal.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\n// import \"../CSS/CoverLetter.css\";\n// import html2pdf from \"html2pdf.js\";\n\n// const CoverLetterEditorModal = ({ isOpen, onClose, content, onChange }) => {\n//   const [editorContent, setEditorContent] = useState(content);\n\n//   const pdfRef = useRef();\n//   // üÜï New: Manage the content internally to prevent cursor jumps\n//   useEffect(() => {\n//     setEditorContent(content);\n//   }, [content]);\n//   const handleInput = (e) => {\n//     setEditorContent(e.currentTarget.innerHTML);\n//     // You can optionally call the parent's onChange if you need to sync it.\n//     // For now, let's keep it simple to fix the cursor issue.\n//   };\n\n//   const exportPDF = () => {\n//     const element = pdfRef.current;\n//     if (!element.textContent.trim()) {\n//       alert(\"No content to export!\");\n//       return;\n//     }\n//     const opt = {\n//       margin: 0,\n//       filename: \"CoverLetter.pdf\",\n//       image: { type: \"jpeg\", quality: 0.98 },\n//       html2canvas: { scale: 2 },\n//       jsPDF: { unit: \"in\", format: \"a4\", orientation: \"portrait\" },\n//     };\n//     html2pdf().set(opt).from(element).save();\n//   };\n\n//   const handleCommand = (command, value = null) => {\n//     if (pdfRef.current) {\n//       document.execCommand(command, false, value);\n//       setEditorContent(pdfRef.current.innerHTML);\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"editor-overlay\">\n//       <div className=\"editor-modal-container\">\n//         <div className=\"editor-header\">\n//           <h2>Cover Letter Editor</h2>\n//           <div className=\"action-buttons\">\n//             <button onClick={exportPDF}>üì§ Export PDF</button>\n//             <button onClick={onClose}>‚ùå Close</button>\n//           </div>\n//         </div>\n//         <div className=\"editor-toolbar\">\n//           <button>B</button>\n//           <button>I</button>\n//         </div>\n//         <div className=\"editor-scroll-container\">\n//           <div\n//             className=\"editor-page-view\"\n//             ref={pdfRef}\n//             contentEditable\n//             suppressContentEditableWarning={true}\n//             // 4. Use the internal state and the new handler.\n//             dangerouslySetInnerHTML={{ __html: editorContent }}\n//             onInput={handleInput}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CoverLetterEditorModal;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}