{"ast":null,"code":"export function sanitizeLatexContent(content) {\n  if (!content) return \"\";\n\n  // console.log(\"üîç Original content:\\n\", content);\n\n  // Step 1: Convert Markdown bold with % ‚Üí \\textbf{45\\%}\n  content = content.replace(/\\*\\*(\\d+(\\.\\d+)?)\\%?\\*\\*/g, (_, num) => {\n    console.log(`‚ú® Markdown bold: **${num}%** ‚Üí \\\\textbf{${num}\\\\%}`);\n    return `\\\\textbf{${num}\\\\%}`;\n  });\n\n  // Step 2: Escape unescaped % (if not already escaped)\n  content = content.replace(/(^|[^\\\\])%/g, (match, p1) => {\n    const fixed = `${p1}\\\\%`;\n    console.log(`üö´ Escaped % ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 3: Escape unescaped &\n  content = content.replace(/(^|[^\\\\])&/g, (match, p1) => {\n    const fixed = `${p1}\\\\&`;\n    console.log(`üö´ Escaped & ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 4: Wrap raw 45\\% with \\textbf{} if not already wrapped\n  content = content.replace(/(?<!\\\\textbf{)(\\d+(\\.\\d+)?)\\\\%/g, (_, num) => {\n    const bolded = `\\\\textbf{${num}\\\\%}`;\n    console.log(`üí™ Bold % ‚Üí ${bolded}`);\n    return bolded;\n  });\n\n  // Step 5: Remove double \\textbf nesting\n  content = content.replace(/\\\\textbf\\{(\\d+)\\\\textbf\\{(\\d+)\\\\%\\}\\}/g, (_, a, b) => {\n    const combined = `\\\\textbf{${a}${b}\\\\%}`;\n    console.log(`üßΩ Cleaned nested bold ‚Üí ${combined}`);\n    return combined;\n  });\n\n  // Step 6: Remove trailing backslashes (even on blank lines or spacing lines)\n  content = content.replace(/\\\\\\s*$/gm, match => {\n    console.log(\"üßπ Removed bad trailing slash:\", match);\n    return \"\";\n  });\n  console.log(\"‚úÖ Final sanitized content:\\n\", content);\n  return content;\n}\nexport function sanitizeSkillsLatex(rawSkills) {\n  console.log(\"üîß Raw skills input:\\n\", rawSkills);\n  const lines = rawSkills.split(\"\\n\").map((line, index) => {\n    line = line.trim();\n    if (!line) return \"\";\n\n    // Log the line being processed\n    console.log(`üîπ Line ${index + 1} before fix:`, line);\n\n    // Step 1: Fix the issue with escaped \\& used where only one & should be\n    const ampSplit = line.split(\" & \");\n    if (ampSplit.length >= 2) {\n      const firstColumn = ampSplit[0].replace(/\\\\&/g, \"&\").trim();\n      const secondColumn = ampSplit[1].replace(/\\\\&/g, \"&\").trim();\n      const restColumns = ampSplit.slice(2).map(col => col.trim());\n      let formatted = `${firstColumn} \\\\& ${secondColumn}`;\n      if (restColumns.length > 0) {\n        formatted += \" & \" + restColumns.join(\" & \");\n      }\n      if (!formatted.trim().endsWith(\"\\\\\\\\\")) {\n        formatted += \" \\\\\\\\\";\n      }\n      console.log(`‚úÖ Line ${index + 1} after fix:`, formatted);\n      return formatted;\n    } else {\n      // Log improperly formatted lines\n      console.warn(`‚ö†Ô∏è Line ${index + 1} does not contain '&':`, line);\n      return line;\n    }\n  });\n  const finalResult = lines.join(\"\\n\");\n  console.log(\"‚úÖ Final sanitized skills:\\n\", finalResult);\n  return finalResult;\n}","map":{"version":3,"names":["sanitizeLatexContent","content","replace","_","num","console","log","match","p1","fixed","bolded","a","b","combined","sanitizeSkillsLatex","rawSkills","lines","split","map","line","index","trim","ampSplit","length","firstColumn","secondColumn","restColumns","slice","col","formatted","join","endsWith","warn","finalResult"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/utils/latexSanitizer.js"],"sourcesContent":["export function sanitizeLatexContent(content) {\n  if (!content) return \"\";\n\n  // console.log(\"üîç Original content:\\n\", content);\n\n  // Step 1: Convert Markdown bold with % ‚Üí \\textbf{45\\%}\n  content = content.replace(/\\*\\*(\\d+(\\.\\d+)?)\\%?\\*\\*/g, (_, num) => {\n    console.log(`‚ú® Markdown bold: **${num}%** ‚Üí \\\\textbf{${num}\\\\%}`);\n    return `\\\\textbf{${num}\\\\%}`;\n  });\n\n  // Step 2: Escape unescaped % (if not already escaped)\n  content = content.replace(/(^|[^\\\\])%/g, (match, p1) => {\n    const fixed = `${p1}\\\\%`;\n    console.log(`üö´ Escaped % ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 3: Escape unescaped &\n  content = content.replace(/(^|[^\\\\])&/g, (match, p1) => {\n    const fixed = `${p1}\\\\&`;\n    console.log(`üö´ Escaped & ‚Üí ${fixed}`);\n    return fixed;\n  });\n\n  // Step 4: Wrap raw 45\\% with \\textbf{} if not already wrapped\n  content = content.replace(/(?<!\\\\textbf{)(\\d+(\\.\\d+)?)\\\\%/g, (_, num) => {\n    const bolded = `\\\\textbf{${num}\\\\%}`;\n    console.log(`üí™ Bold % ‚Üí ${bolded}`);\n    return bolded;\n  });\n\n  // Step 5: Remove double \\textbf nesting\n  content = content.replace(\n    /\\\\textbf\\{(\\d+)\\\\textbf\\{(\\d+)\\\\%\\}\\}/g,\n    (_, a, b) => {\n      const combined = `\\\\textbf{${a}${b}\\\\%}`;\n      console.log(`üßΩ Cleaned nested bold ‚Üí ${combined}`);\n      return combined;\n    }\n  );\n\n  // Step 6: Remove trailing backslashes (even on blank lines or spacing lines)\n  content = content.replace(/\\\\\\s*$/gm, (match) => {\n    console.log(\"üßπ Removed bad trailing slash:\", match);\n    return \"\";\n  });\n\n  console.log(\"‚úÖ Final sanitized content:\\n\", content);\n  return content;\n}\nexport function sanitizeSkillsLatex(rawSkills) {\n  console.log(\"üîß Raw skills input:\\n\", rawSkills);\n\n  const lines = rawSkills.split(\"\\n\").map((line, index) => {\n    line = line.trim();\n    if (!line) return \"\";\n\n    // Log the line being processed\n    console.log(`üîπ Line ${index + 1} before fix:`, line);\n\n    // Step 1: Fix the issue with escaped \\& used where only one & should be\n    const ampSplit = line.split(\" & \");\n    if (ampSplit.length >= 2) {\n      const firstColumn = ampSplit[0].replace(/\\\\&/g, \"&\").trim();\n      const secondColumn = ampSplit[1].replace(/\\\\&/g, \"&\").trim();\n      const restColumns = ampSplit.slice(2).map((col) => col.trim());\n\n      let formatted = `${firstColumn} \\\\& ${secondColumn}`;\n      if (restColumns.length > 0) {\n        formatted += \" & \" + restColumns.join(\" & \");\n      }\n      if (!formatted.trim().endsWith(\"\\\\\\\\\")) {\n        formatted += \" \\\\\\\\\";\n      }\n\n      console.log(`‚úÖ Line ${index + 1} after fix:`, formatted);\n      return formatted;\n    } else {\n      // Log improperly formatted lines\n      console.warn(`‚ö†Ô∏è Line ${index + 1} does not contain '&':`, line);\n      return line;\n    }\n  });\n\n  const finalResult = lines.join(\"\\n\");\n  console.log(\"‚úÖ Final sanitized skills:\\n\", finalResult);\n  return finalResult;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}