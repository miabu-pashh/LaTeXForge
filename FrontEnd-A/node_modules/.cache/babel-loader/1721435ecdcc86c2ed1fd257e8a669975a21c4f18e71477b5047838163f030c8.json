{"ast":null,"code":"// import axios from \"axios\";\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n//   console.log(\"the api is called\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split the text into two parts:\n//     // First part: change summary\n//     // Second part: LaTeX\n//     // Split LaTeX and summary using delimiter from prompt (e.g. ===CHANGES===)\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n//     console.log(\"Gemini API Response:\", text);\n//     console.log(\"Changes Summary:\", changesSummary);\n//     console.log(\"Updated LaTeX:\", updatedLatex);\n\n//     return {\n//       // changesSummary: (changesSummary || \"\").trim(),\n//       // updatedLatex: (updatedLatex || \"\").trim(),\n//       updatedLatex: latex.trim(),\n//       changesSummary: summaryRaw.trim().split(\"\\n\").filter(Boolean),\n//     };\n//   } catch (error) {\n//     console.error(\"Gemini API Error:\", error.response?.data || error.message);\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: \"Error generating summary.\",\n//     };\n//   }\n// }\n\n// import axios from \"axios\";\n\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n\n//   console.log(\"üì° Calling Gemini API...\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split LaTeX and changes summary using the delimiter\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n\n//     const updatedLatex = latex.trim();\n//     const changesSummary = summaryRaw\n//       .trim()\n//       .split(\"\\n\")\n//       .map((line) => line.trim())\n//       .filter(Boolean);\n\n//     console.log(\"‚úÖ Gemini LaTeX Output:\", updatedLatex.slice(0, 300) + \"...\");\n//     console.log(\"üìù Gemini Summary:\", changesSummary);\n\n//     return {\n//       updatedLatex,\n//       changesSummary,\n//     };\n//   } catch (error) {\n//     console.error(\n//       \"‚ùå Gemini API Error:\",\n//       error.response?.data || error.message\n//     );\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: [],\n//     };\n//   }\n// }","map":{"version":3,"names":[],"sources":["/Users/maibupash/Desktop/MastersProjects/ResumeApp/resume-tailor/src/utils/apiHandler.js"],"sourcesContent":["// import axios from \"axios\";\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n//   console.log(\"the api is called\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split the text into two parts:\n//     // First part: change summary\n//     // Second part: LaTeX\n//     // Split LaTeX and summary using delimiter from prompt (e.g. ===CHANGES===)\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n//     console.log(\"Gemini API Response:\", text);\n//     console.log(\"Changes Summary:\", changesSummary);\n//     console.log(\"Updated LaTeX:\", updatedLatex);\n\n//     return {\n//       // changesSummary: (changesSummary || \"\").trim(),\n//       // updatedLatex: (updatedLatex || \"\").trim(),\n//       updatedLatex: latex.trim(),\n//       changesSummary: summaryRaw.trim().split(\"\\n\").filter(Boolean),\n//     };\n//   } catch (error) {\n//     console.error(\"Gemini API Error:\", error.response?.data || error.message);\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: \"Error generating summary.\",\n//     };\n//   }\n// }\n\n// import axios from \"axios\";\n\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n\n//   console.log(\"üì° Calling Gemini API...\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split LaTeX and changes summary using the delimiter\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n\n//     const updatedLatex = latex.trim();\n//     const changesSummary = summaryRaw\n//       .trim()\n//       .split(\"\\n\")\n//       .map((line) => line.trim())\n//       .filter(Boolean);\n\n//     console.log(\"‚úÖ Gemini LaTeX Output:\", updatedLatex.slice(0, 300) + \"...\");\n//     console.log(\"üìù Gemini Summary:\", changesSummary);\n\n//     return {\n//       updatedLatex,\n//       changesSummary,\n//     };\n//   } catch (error) {\n//     console.error(\n//       \"‚ùå Gemini API Error:\",\n//       error.response?.data || error.message\n//     );\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: [],\n//     };\n//   }\n// }\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}