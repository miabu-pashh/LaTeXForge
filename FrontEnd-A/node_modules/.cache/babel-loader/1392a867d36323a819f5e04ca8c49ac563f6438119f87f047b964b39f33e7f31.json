{"ast":null,"code":"import axios from \"axios\";\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\nexport async function callGeminiAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY2;\n  try {\n    var _response$data$candid, _response$data$candid2, _response$data$candid3, _response$data$candid4, _response$data$candid5;\n    console.log(\"🛠️ Prompt Sent to Gemini:\\n\");\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(\"📩 Gemini API Response:\\n\"); // 🔍 log the response\n\n    const raw = ((_response$data$candid = response.data.candidates) === null || _response$data$candid === void 0 ? void 0 : (_response$data$candid2 = _response$data$candid[0]) === null || _response$data$candid2 === void 0 ? void 0 : (_response$data$candid3 = _response$data$candid2.content) === null || _response$data$candid3 === void 0 ? void 0 : (_response$data$candid4 = _response$data$candid3.parts) === null || _response$data$candid4 === void 0 ? void 0 : (_response$data$candid5 = _response$data$candid4[0]) === null || _response$data$candid5 === void 0 ? void 0 : _response$data$candid5.text) || \"\";\n    console.log(\"📩 Raw Gemini Response:\\n\", raw); // 🔍 log the raw response\n\n    // 🧹 Clean and parse JSON safely\n    let cleaned = raw.replace(/```json|```/g, \"\").trim();\n    // HEAL JSON: escape unescaped backslashes for JSON safety!\n    cleaned = cleaned.replace(/([^\\\\])\\\\(?![\\\\nt\"\\/bfru])/g, \"$1\\\\\\\\\");\n\n    // console.log(\"cleaned data\", cleaned);\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n      console.log(\"📩 parsed Gemini Response:\\n\", parsed); // 🔍 log the cleaned response\n    } catch (err) {\n      console.error(\"❌ JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned); // 🧪 help spot what's wrong\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    return {\n      companyName: parsed.companyName || \"\",\n      summaryLatex: parsed.summaryLatex || \"\",\n      skillsLatex: parsed.skillsLatex || \"\",\n      metlifeLatex: parsed.metlifeLatex || \"\",\n      adonsLatex: parsed.adonsLatex || \"\",\n      changes: parsed.changes || \"\",\n      // added changes field\n      coverLetter: parsed.coverLetter || \"\",\n      coldEmail: parsed.coldEmail || \"\",\n      FinalResumeLatex: parsed.FinalResumeLatex || \"\"\n    };\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Gemini API Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    alert(\"Gemini API Error: \" + JSON.stringify(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message));\n    return {\n      companyName: \"\",\n      summaryLatex: \"\",\n      skillsLatex: \"\",\n      metlifeLatex: \"\",\n      adonsLatex: \"\",\n      changes: \"\",\n      // added changes field\n      coverLetter: \"\",\n      coldEmail: \"\",\n      FinalResumeLatex: \"\"\n      // analysis: \"\", // fallback in case ATS fails\n    };\n  }\n}\nexport async function callGeminiATSAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data$candid6, _response$data$candid7, _response$data$candid8, _response$data$candid9, _response$data$candid0;\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data$candid6 = response.data.candidates) === null || _response$data$candid6 === void 0 ? void 0 : (_response$data$candid7 = _response$data$candid6[0]) === null || _response$data$candid7 === void 0 ? void 0 : (_response$data$candid8 = _response$data$candid7.content) === null || _response$data$candid8 === void 0 ? void 0 : (_response$data$candid9 = _response$data$candid8.parts) === null || _response$data$candid9 === void 0 ? void 0 : (_response$data$candid0 = _response$data$candid9[0]) === null || _response$data$candid0 === void 0 ? void 0 : _response$data$candid0.text) || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"❌ JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    return {\n      atsScore: parsed.atsScore || \"N/A\",\n      gaps: parsed.gaps || [],\n      improvements: parsed.improvements || [],\n      summary: parsed.summary || \"\"\n    };\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Gemini ATS API Error:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    return {\n      atsScore: \"N/A\",\n      gaps: [],\n      improvements: [],\n      summary: \"\"\n    };\n  }\n}\nexport async function callGeminiAPIforJD(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data$candid1, _response$data$candid10, _response$data$candid11, _response$data$candid12, _response$data$candid13;\n    console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // 🔍 log the prompt\n\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data$candid1 = response.data.candidates) === null || _response$data$candid1 === void 0 ? void 0 : (_response$data$candid10 = _response$data$candid1[0]) === null || _response$data$candid10 === void 0 ? void 0 : (_response$data$candid11 = _response$data$candid10.content) === null || _response$data$candid11 === void 0 ? void 0 : (_response$data$candid12 = _response$data$candid11.parts) === null || _response$data$candid12 === void 0 ? void 0 : (_response$data$candid13 = _response$data$candid12[0]) === null || _response$data$candid13 === void 0 ? void 0 : _response$data$candid13.text) || \"\";\n    // console.log(\"📩 Raw Gemini Response:\\n\", raw); // 🔍 log the raw response\n\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    console.log(\"📩 Cleaned Gemini Response:\\n\", cleaned); // 🔍 log the cleaned response\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"❌ JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n    return {\n      result: parsed.result || cleaned\n    };\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Gemini ATS API Error:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    return {\n      result: \"\"\n    };\n  }\n}\nexport async function callGeminiAPIForLinkedInMessage(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data$candid14, _response$data$candid15, _response$data$candid16, _response$data$candid17, _response$data$candid18;\n    console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // 🔍 log the prompt\n    const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data$candid14 = response.data.candidates) === null || _response$data$candid14 === void 0 ? void 0 : (_response$data$candid15 = _response$data$candid14[0]) === null || _response$data$candid15 === void 0 ? void 0 : (_response$data$candid16 = _response$data$candid15.content) === null || _response$data$candid16 === void 0 ? void 0 : (_response$data$candid17 = _response$data$candid16.parts) === null || _response$data$candid17 === void 0 ? void 0 : (_response$data$candid18 = _response$data$candid17[0]) === null || _response$data$candid18 === void 0 ? void 0 : _response$data$candid18.text) || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n      console.log(\"📩 Cleaned Gemini Response:\\n\", cleaned); // 🔍 log the cleaned response\n    } catch (err) {\n      console.error(\"❌ LinkedIn Message JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse LinkedIn Message response\");\n    }\n    return {\n      linkedinMessage: parsed.linkedinMessage || \"\"\n    };\n  } catch (error) {\n    var _error$response5;\n    console.error(\"Gemini LinkedIn API Error:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    return {\n      linkedinMessage: \"\"\n    };\n  }\n}\nexport async function callGeminiAPIForCoverLetterUpdate(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  console.log(\"🛠️ The api handler functions is triggered\"); // 🔍 log the prompt\n  console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // 🔍 log the prompt\n\n  try {\n    var _response$data, _response$data$candid19, _response$data$candid20, _response$data$candid21, _response$data$candid22, _response$data$candid23;\n    const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$candid19 = _response$data.candidates) === null || _response$data$candid19 === void 0 ? void 0 : (_response$data$candid20 = _response$data$candid19[0]) === null || _response$data$candid20 === void 0 ? void 0 : (_response$data$candid21 = _response$data$candid20.content) === null || _response$data$candid21 === void 0 ? void 0 : (_response$data$candid22 = _response$data$candid21.parts) === null || _response$data$candid22 === void 0 ? void 0 : (_response$data$candid23 = _response$data$candid22[0]) === null || _response$data$candid23 === void 0 ? void 0 : _response$data$candid23.text) || \"\";\n    console.log(\"📩 Updated Cover Letter Response:\\n\", raw);\n    return {\n      updatedCoverLetter: raw\n    };\n  } catch (error) {\n    var _error$response6;\n    console.error(\"❌ Gemini Cover Letter API Error:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    return {\n      updatedCoverLetter: \"Error generating updated cover letter.\"\n    };\n  }\n}\n\n// developed on 06/15/2025 sunday\nexport async function callGeminiAPIForCompanyAndEmail(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // Log prompt\n\n  try {\n    var _response$data2, _response$data2$candi, _response$data2$candi2, _response$data2$candi3, _response$data2$candi4, _response$data2$candi5, _companyLine$split$, _emailLine$split$;\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$candi = _response$data2.candidates) === null || _response$data2$candi === void 0 ? void 0 : (_response$data2$candi2 = _response$data2$candi[0]) === null || _response$data2$candi2 === void 0 ? void 0 : (_response$data2$candi3 = _response$data2$candi2.content) === null || _response$data2$candi3 === void 0 ? void 0 : (_response$data2$candi4 = _response$data2$candi3.parts) === null || _response$data2$candi4 === void 0 ? void 0 : (_response$data2$candi5 = _response$data2$candi4[0]) === null || _response$data2$candi5 === void 0 ? void 0 : _response$data2$candi5.text) || \"\";\n    console.log(\"📤 Gemini Output:\\n\", raw);\n\n    // Parse the output\n    const lines = raw.split(\"\\n\");\n    const companyLine = lines.find(line => line.toLowerCase().includes(\"company name\"));\n    const emailLine = lines.find(line => line.toLowerCase().includes(\"email\"));\n    const companyName = (companyLine === null || companyLine === void 0 ? void 0 : (_companyLine$split$ = companyLine.split(\":\")[1]) === null || _companyLine$split$ === void 0 ? void 0 : _companyLine$split$.trim()) || \"Unknown Company\";\n    const hrEmail = (emailLine === null || emailLine === void 0 ? void 0 : (_emailLine$split$ = emailLine.split(\":\")[1]) === null || _emailLine$split$ === void 0 ? void 0 : _emailLine$split$.trim()) || \"Not available\";\n    return {\n      companyName,\n      hrEmail\n    };\n  } catch (error) {\n    console.error(\"❌ Gemini Company/Email API Error:\", error);\n    return {\n      companyName: \"Unknown Company\",\n      hrEmail: \"Not available\"\n    };\n  }\n}\n\n//added on 08/30/2025 Saturday\n\nexport async function callGeminiAPIForFitExplanation(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    var _response$data3, _response$data3$candi, _response$data3$candi2, _response$data3$candi3, _response$data3$candi4, _response$data3$candi5;\n    const response = await axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\" + apiKey, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const raw = ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$candi = _response$data3.candidates) === null || _response$data3$candi === void 0 ? void 0 : (_response$data3$candi2 = _response$data3$candi[0]) === null || _response$data3$candi2 === void 0 ? void 0 : (_response$data3$candi3 = _response$data3$candi2.content) === null || _response$data3$candi3 === void 0 ? void 0 : (_response$data3$candi4 = _response$data3$candi3.parts) === null || _response$data3$candi4 === void 0 ? void 0 : (_response$data3$candi5 = _response$data3$candi4[0]) === null || _response$data3$candi5 === void 0 ? void 0 : _response$data3$candi5.text) || \"\";\n    return {\n      fitExplanation: raw\n    };\n  } catch (error) {\n    console.error(\"❌ Gemini Fit Explanation API Error:\", error);\n    return {\n      fitExplanation: \"Error generating fit explanation.\"\n    };\n  }\n}","map":{"version":3,"names":["axios","GEMINI_API_URL","callGeminiAPI","prompt","apiKey","process","env","REACT_APP_GEMINI_API_KEY2","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","console","log","response","post","contents","role","parts","text","headers","raw","data","candidates","content","cleaned","replace","trim","parsed","JSON","parse","err","error","Error","companyName","summaryLatex","skillsLatex","metlifeLatex","adonsLatex","changes","coverLetter","coldEmail","FinalResumeLatex","_error$response","_error$response2","message","alert","stringify","callGeminiATSAPI","REACT_APP_GEMINI_API_KEY","_response$data$candid6","_response$data$candid7","_response$data$candid8","_response$data$candid9","_response$data$candid0","atsScore","gaps","improvements","summary","_error$response3","callGeminiAPIforJD","_response$data$candid1","_response$data$candid10","_response$data$candid11","_response$data$candid12","_response$data$candid13","result","_error$response4","callGeminiAPIForLinkedInMessage","_response$data$candid14","_response$data$candid15","_response$data$candid16","_response$data$candid17","_response$data$candid18","linkedinMessage","_error$response5","callGeminiAPIForCoverLetterUpdate","_response$data","_response$data$candid19","_response$data$candid20","_response$data$candid21","_response$data$candid22","_response$data$candid23","updatedCoverLetter","_error$response6","callGeminiAPIForCompanyAndEmail","_response$data2","_response$data2$candi","_response$data2$candi2","_response$data2$candi3","_response$data2$candi4","_response$data2$candi5","_companyLine$split$","_emailLine$split$","lines","split","companyLine","find","line","toLowerCase","includes","emailLine","hrEmail","callGeminiAPIForFitExplanation","_response$data3","_response$data3$candi","_response$data3$candi2","_response$data3$candi3","_response$data3$candi4","_response$data3$candi5","fitExplanation"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/utils/apiHandler.js"],"sourcesContent":["import axios from \"axios\";\n\nconst GEMINI_API_URL =\n  \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\nexport async function callGeminiAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY2;\n\n  try {\n    console.log(\"🛠️ Prompt Sent to Gemini:\\n\"); \n\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    console.log(\"📩 Gemini API Response:\\n\"); // 🔍 log the response\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    console.log(\"📩 Raw Gemini Response:\\n\", raw); // 🔍 log the raw response\n\n    // 🧹 Clean and parse JSON safely\n    let cleaned = raw.replace(/```json|```/g, \"\").trim();\n    // HEAL JSON: escape unescaped backslashes for JSON safety!\n    cleaned = cleaned.replace(/([^\\\\])\\\\(?![\\\\nt\"\\/bfru])/g, \"$1\\\\\\\\\");\n\n    // console.log(\"cleaned data\", cleaned);\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n      console.log(\"📩 parsed Gemini Response:\\n\", parsed); // 🔍 log the cleaned response\n    } catch (err) {\n      console.error(\"❌ JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned); // 🧪 help spot what's wrong\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n\n    return {\n      companyName: parsed.companyName || \"\",\n      summaryLatex: parsed.summaryLatex || \"\",\n      skillsLatex: parsed.skillsLatex || \"\",\n      metlifeLatex: parsed.metlifeLatex || \"\",\n      adonsLatex: parsed.adonsLatex || \"\",\n      changes: parsed.changes || \"\", // added changes field\n      coverLetter: parsed.coverLetter || \"\",\n      coldEmail: parsed.coldEmail || \"\",\n      FinalResumeLatex: parsed.FinalResumeLatex || \"\",\n    };\n  } catch (error) {\n    console.error(\"Gemini API Error:\", error.response?.data || error.message);\n    alert(\n      \"Gemini API Error: \" +\n        JSON.stringify(error.response?.data || error.message)\n    );\n    return {\n      companyName: \"\",\n      summaryLatex: \"\",\n      skillsLatex: \"\",\n      metlifeLatex: \"\",\n      adonsLatex: \"\",\n      changes: \"\", // added changes field\n      coverLetter: \"\",\n      coldEmail: \"\",\n      FinalResumeLatex: \"\",\n      // analysis: \"\", // fallback in case ATS fails\n    };\n  }\n}\n\nexport async function callGeminiATSAPI(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n\n  try {\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"❌ JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n\n    return {\n      atsScore: parsed.atsScore || \"N/A\",\n      gaps: parsed.gaps || [],\n      improvements: parsed.improvements || [],\n      summary: parsed.summary || \"\",\n    };\n  } catch (error) {\n    console.error(\n      \"Gemini ATS API Error:\",\n      error.response?.data || error.message\n    );\n    return {\n      atsScore: \"N/A\",\n      gaps: [],\n      improvements: [],\n      summary: \"\",\n    };\n  }\n}\n\nexport async function callGeminiAPIforJD(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n\n  try {\n    console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // 🔍 log the prompt\n\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    // console.log(\"📩 Raw Gemini Response:\\n\", raw); // 🔍 log the raw response\n\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n    console.log(\"📩 Cleaned Gemini Response:\\n\", cleaned); // 🔍 log the cleaned response\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n    } catch (err) {\n      console.error(\"❌ JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse Gemini JSON response\");\n    }\n\n    return {\n      result: parsed.result || cleaned,\n    };\n  } catch (error) {\n    console.error(\n      \"Gemini ATS API Error:\",\n      error.response?.data || error.message\n    );\n    return {\n      result: \"\",\n    };\n  }\n}\n\nexport async function callGeminiAPIForLinkedInMessage(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  try {\n    console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // 🔍 log the prompt\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    const cleaned = raw.replace(/```json|```/g, \"\").trim();\n\n    let parsed = {};\n    try {\n      parsed = JSON.parse(cleaned);\n      console.log(\"📩 Cleaned Gemini Response:\\n\", cleaned); // 🔍 log the cleaned response\n    } catch (err) {\n      console.error(\"❌ LinkedIn Message JSON Parse Error:\", err);\n      console.error(\"❓ Problematic Response:\\n\", cleaned);\n      throw new Error(\"Failed to parse LinkedIn Message response\");\n    }\n\n    return {\n      linkedinMessage: parsed.linkedinMessage || \"\",\n    };\n  } catch (error) {\n    console.error(\n      \"Gemini LinkedIn API Error:\",\n      error.response?.data || error.message\n    );\n    return {\n      linkedinMessage: \"\",\n    };\n  }\n}\n\nexport async function callGeminiAPIForCoverLetterUpdate(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  console.log(\"🛠️ The api handler functions is triggered\"); // 🔍 log the prompt\n  console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // 🔍 log the prompt\n\n  try {\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    console.log(\"📩 Updated Cover Letter Response:\\n\", raw);\n\n    return { updatedCoverLetter: raw };\n  } catch (error) {\n    console.error(\n      \"❌ Gemini Cover Letter API Error:\",\n      error.response?.data || error.message\n    );\n    return { updatedCoverLetter: \"Error generating updated cover letter.\" };\n  }\n}\n\n// developed on 06/15/2025 sunday\nexport async function callGeminiAPIForCompanyAndEmail(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n  console.log(\"🛠️ Prompt Sent to Gemini:\\n\", prompt); // Log prompt\n\n  try {\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const raw = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    console.log(\"📤 Gemini Output:\\n\", raw);\n\n    // Parse the output\n    const lines = raw.split(\"\\n\");\n    const companyLine = lines.find((line) =>\n      line.toLowerCase().includes(\"company name\")\n    );\n    const emailLine = lines.find((line) =>\n      line.toLowerCase().includes(\"email\")\n    );\n\n    const companyName = companyLine?.split(\":\")[1]?.trim() || \"Unknown Company\";\n    const hrEmail = emailLine?.split(\":\")[1]?.trim() || \"Not available\";\n\n    return { companyName, hrEmail };\n  } catch (error) {\n    console.error(\"❌ Gemini Company/Email API Error:\", error);\n    return { companyName: \"Unknown Company\", hrEmail: \"Not available\" };\n  }\n}\n\n//added on 08/30/2025 Saturday\n\nexport async function callGeminiAPIForFitExplanation(prompt) {\n  const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n\n  try {\n    const response = await axios.post(\n      \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\" +\n        apiKey,\n      {\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }],\n      },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n\n    const raw = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    return { fitExplanation: raw };\n  } catch (error) {\n    console.error(\"❌ Gemini Fit Explanation API Error:\", error);\n    return { fitExplanation: \"Error generating fit explanation.\" };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}