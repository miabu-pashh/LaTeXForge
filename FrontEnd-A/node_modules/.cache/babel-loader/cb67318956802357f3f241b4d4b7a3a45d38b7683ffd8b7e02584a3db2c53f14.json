{"ast":null,"code":"export function sanitizeLatexContent(content) {\n  if (!content) return \"\";\n\n  // Escape unescaped % manually (no lookbehind)\n  content = content.replace(/(^|[^\\\\])%/g, (match, p1) => `${p1}\\\\%`);\n\n  // Escape unescaped &\n  content = content.replace(/(^|[^\\\\])&/g, (match, p1) => `${p1}\\\\&`);\n\n  // Replace double asterisks around percentages with LaTeX bold\n  content = content.replace(/\\*\\*(\\d+(\\.\\d+)?)%?\\*\\*/g, (_, num) => `\\\\textbf{${num}\\\\%}`);\n\n  // Convert 45% to \\textbf{45\\%} if not already bolded\n  content = content.replace(/(\\d+(\\.\\d+)?)%/g, (_, num) => `\\\\textbf{${num}\\\\%}`);\n\n  // Remove any standalone \\ at end of line (not valid in LaTeX)\n  content = content.replace(/\\\\\\s*$/gm, \"\");\n  return content;\n}\nfunction sanitizeSkillsLatex(rawSkills) {\n  return rawSkills.split(\"\\n\").map(line => {\n    // Replace all `\\&` except the first one with plain `&`\n    const parts = line.split(\"\\\\&\");\n    if (parts.length === 1) return line.trim(); // no `\\&` found\n\n    const first = parts[0].trim();\n    const second = parts[1].trim();\n    const rest = parts.slice(2).map(part => part.trim()).join(\" & \");\n\n    // Join everything with proper LaTeX tabular format\n    let cleaned = `${first} \\\\& ${second}`;\n    if (rest) cleaned += ` & ${rest}`;\n    if (!cleaned.trim().endsWith(\"\\\\\\\\\")) cleaned += \" \\\\\\\\\";\n    return cleaned;\n  }).join(\"\\n\");\n}","map":{"version":3,"names":["sanitizeLatexContent","content","replace","match","p1","_","num","sanitizeSkillsLatex","rawSkills","split","map","line","parts","length","trim","first","second","rest","slice","part","join","cleaned","endsWith"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/utils/latexSanitizer.js"],"sourcesContent":["export function sanitizeLatexContent(content) {\n  if (!content) return \"\";\n\n  // Escape unescaped % manually (no lookbehind)\n  content = content.replace(/(^|[^\\\\])%/g, (match, p1) => `${p1}\\\\%`);\n\n  // Escape unescaped &\n  content = content.replace(/(^|[^\\\\])&/g, (match, p1) => `${p1}\\\\&`);\n\n  // Replace double asterisks around percentages with LaTeX bold\n  content = content.replace(\n    /\\*\\*(\\d+(\\.\\d+)?)%?\\*\\*/g,\n    (_, num) => `\\\\textbf{${num}\\\\%}`\n  );\n\n  // Convert 45% to \\textbf{45\\%} if not already bolded\n  content = content.replace(\n    /(\\d+(\\.\\d+)?)%/g,\n    (_, num) => `\\\\textbf{${num}\\\\%}`\n  );\n\n  // Remove any standalone \\ at end of line (not valid in LaTeX)\n  content = content.replace(/\\\\\\s*$/gm, \"\");\n\n  return content;\n}\nfunction sanitizeSkillsLatex(rawSkills) {\n  return rawSkills\n    .split(\"\\n\")\n    .map((line) => {\n      // Replace all `\\&` except the first one with plain `&`\n      const parts = line.split(\"\\\\&\");\n      if (parts.length === 1) return line.trim(); // no `\\&` found\n\n      const first = parts[0].trim();\n      const second = parts[1].trim();\n\n      const rest = parts\n        .slice(2)\n        .map((part) => part.trim())\n        .join(\" & \");\n\n      // Join everything with proper LaTeX tabular format\n      let cleaned = `${first} \\\\& ${second}`;\n      if (rest) cleaned += ` & ${rest}`;\n      if (!cleaned.trim().endsWith(\"\\\\\\\\\")) cleaned += \" \\\\\\\\\";\n\n      return cleaned;\n    })\n    .join(\"\\n\");\n}\n"],"mappings":"AAAA,OAAO,SAASA,oBAAoBA,CAACC,OAAO,EAAE;EAC5C,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;;EAEvB;EACAA,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,aAAa,EAAE,CAACC,KAAK,EAAEC,EAAE,KAAK,GAAGA,EAAE,KAAK,CAAC;;EAEnE;EACAH,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,aAAa,EAAE,CAACC,KAAK,EAAEC,EAAE,KAAK,GAAGA,EAAE,KAAK,CAAC;;EAEnE;EACAH,OAAO,GAAGA,OAAO,CAACC,OAAO,CACvB,0BAA0B,EAC1B,CAACG,CAAC,EAAEC,GAAG,KAAK,YAAYA,GAAG,MAC7B,CAAC;;EAED;EACAL,OAAO,GAAGA,OAAO,CAACC,OAAO,CACvB,iBAAiB,EACjB,CAACG,CAAC,EAAEC,GAAG,KAAK,YAAYA,GAAG,MAC7B,CAAC;;EAED;EACAL,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EAEzC,OAAOD,OAAO;AAChB;AACA,SAASM,mBAAmBA,CAACC,SAAS,EAAE;EACtC,OAAOA,SAAS,CACbC,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAEC,IAAI,IAAK;IACb;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACF,KAAK,CAAC,KAAK,CAAC;IAC/B,IAAIG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOF,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;;IAE5C,MAAMC,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;IAC7B,MAAME,MAAM,GAAGJ,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;IAE9B,MAAMG,IAAI,GAAGL,KAAK,CACfM,KAAK,CAAC,CAAC,CAAC,CACRR,GAAG,CAAES,IAAI,IAAKA,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAC1BM,IAAI,CAAC,KAAK,CAAC;;IAEd;IACA,IAAIC,OAAO,GAAG,GAAGN,KAAK,QAAQC,MAAM,EAAE;IACtC,IAAIC,IAAI,EAAEI,OAAO,IAAI,MAAMJ,IAAI,EAAE;IACjC,IAAI,CAACI,OAAO,CAACP,IAAI,CAAC,CAAC,CAACQ,QAAQ,CAAC,MAAM,CAAC,EAAED,OAAO,IAAI,OAAO;IAExD,OAAOA,OAAO;EAChB,CAAC,CAAC,CACDD,IAAI,CAAC,IAAI,CAAC;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}