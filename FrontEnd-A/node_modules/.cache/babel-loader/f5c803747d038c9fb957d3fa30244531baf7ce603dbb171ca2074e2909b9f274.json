{"ast":null,"code":"// import axios from \"axios\";\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n//   console.log(\"the api is called\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split the text into two parts:\n//     // First part: change summary\n//     // Second part: LaTeX\n//     // Split LaTeX and summary using delimiter from prompt (e.g. ===CHANGES===)\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n//     console.log(\"Gemini API Response:\", text);\n//     console.log(\"Changes Summary:\", changesSummary);\n//     console.log(\"Updated LaTeX:\", updatedLatex);\n\n//     return {\n//       // changesSummary: (changesSummary || \"\").trim(),\n//       // updatedLatex: (updatedLatex || \"\").trim(),\n//       updatedLatex: latex.trim(),\n//       changesSummary: summaryRaw.trim().split(\"\\n\").filter(Boolean),\n//     };\n//   } catch (error) {\n//     console.error(\"Gemini API Error:\", error.response?.data || error.message);\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: \"Error generating summary.\",\n//     };\n//   }\n// }\n\n///last part of the code\n\n// import axios from \"axios\";\n\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n\n//   console.log(\"üì° Calling Gemini API...\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split LaTeX and changes summary using the delimiter\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n\n//     const updatedLatex = latex.trim();\n//     const changesSummary = summaryRaw\n//       .trim()\n//       .split(\"\\n\")\n//       .map((line) => line.trim())\n//       .filter(Boolean);\n\n//     console.log(\"‚úÖ Gemini LaTeX Output:\", updatedLatex.slice(0, 300) + \"...\");\n//     console.log(\"üìù Gemini Summary:\", changesSummary);\n\n//     return {\n//       updatedLatex,\n//       changesSummary,\n//     };\n//   } catch (error) {\n//     console.error(\n//       \"‚ùå Gemini API Error:\",\n//       error.response?.data || error.message\n//     );\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: [],\n//     };\n//   }\n// }\n\nimport axios from \"axios\";\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\nexport async function callGeminiAPI(prompt) {\n  const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\";\n  try {\n    var _response$data$candid, _response$data$candid2, _response$data$candid3, _response$data$candid4, _response$data$candid5;\n    const response = await axios.post(`${GEMINI_API_URL}?key=${apiKey}`, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const fullText = ((_response$data$candid = response.data.candidates) === null || _response$data$candid === void 0 ? void 0 : (_response$data$candid2 = _response$data$candid[0]) === null || _response$data$candid2 === void 0 ? void 0 : (_response$data$candid3 = _response$data$candid2.content) === null || _response$data$candid3 === void 0 ? void 0 : (_response$data$candid4 = _response$data$candid3.parts) === null || _response$data$candid4 === void 0 ? void 0 : (_response$data$candid5 = _response$data$candid4[0]) === null || _response$data$candid5 === void 0 ? void 0 : _response$data$candid5.text) || \"\";\n    console.log(\"üîÅ Full Gemini Response:\", fullText);\n\n    // Step 1: Strip ```json ... ``` if present\n    const cleaned = fullText.replace(/```json|```/g, \"\").trim();\n\n    // Step 2: Try to extract updatedLatex and changesSummary manually\n    const latexMatch = cleaned.match(/\"updatedLatex\"\\s*:\\s*\"([\\s\\S]+?)\"\\s*,\\s*\"changesSummary\"/);\n    const summaryMatch = cleaned.match(/\"changesSummary\"\\s*:\\s*\\[(.*?)\\]/s);\n    const updatedLatex = latexMatch ? latexMatch[1].replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\") : \"\";\n    const summaryRaw = summaryMatch ? summaryMatch[1].split(\",\").map(line => line.replace(/^[\"\\s]+|[\"\\s]+$/g, \"\")).filter(Boolean) : [];\n    console.log(\"‚úÖ Extracted LaTeX Part:\", updatedLatex.slice(0, 300));\n    console.log(\"üìù Extracted Changes Summary:\", summaryRaw);\n    return {\n      updatedLatex,\n      changesSummary: summaryRaw\n    };\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Gemini API Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    alert(\"Gemini API Error: \" + JSON.stringify(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message));\n    return {\n      updatedLatex: \"Error generating LaTeX.\",\n      changesSummary: []\n    };\n  }\n}","map":{"version":3,"names":["axios","GEMINI_API_URL","callGeminiAPI","prompt","apiKey","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","response","post","contents","role","parts","text","headers","fullText","data","candidates","content","console","log","cleaned","replace","trim","latexMatch","match","summaryMatch","updatedLatex","summaryRaw","split","map","line","filter","Boolean","slice","changesSummary","error","_error$response","_error$response2","message","alert","JSON","stringify"],"sources":["/Users/maibupash/Desktop/MastersProjects/ResumeApp/resume-tailor/src/utils/apiHandler.js"],"sourcesContent":["// import axios from \"axios\";\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n//   console.log(\"the api is called\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split the text into two parts:\n//     // First part: change summary\n//     // Second part: LaTeX\n//     // Split LaTeX and summary using delimiter from prompt (e.g. ===CHANGES===)\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n//     console.log(\"Gemini API Response:\", text);\n//     console.log(\"Changes Summary:\", changesSummary);\n//     console.log(\"Updated LaTeX:\", updatedLatex);\n\n//     return {\n//       // changesSummary: (changesSummary || \"\").trim(),\n//       // updatedLatex: (updatedLatex || \"\").trim(),\n//       updatedLatex: latex.trim(),\n//       changesSummary: summaryRaw.trim().split(\"\\n\").filter(Boolean),\n//     };\n//   } catch (error) {\n//     console.error(\"Gemini API Error:\", error.response?.data || error.message);\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: \"Error generating summary.\",\n//     };\n//   }\n// }\n\n///last part of the code\n\n// import axios from \"axios\";\n\n// const GEMINI_API_URL =\n//   \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// export async function callGeminiAPI(prompt) {\n//   const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\"; // Replace if needed\n\n//   console.log(\"üì° Calling Gemini API...\");\n\n//   try {\n//     const response = await axios.post(\n//       `${GEMINI_API_URL}?key=${apiKey}`,\n//       {\n//         contents: [\n//           {\n//             role: \"user\",\n//             parts: [{ text: prompt }],\n//           },\n//         ],\n//       },\n//       {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       }\n//     );\n\n//     const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n//     // Split LaTeX and changes summary using the delimiter\n//     const [latex, summaryRaw = \"\"] = text.split(\"===CHANGES===\");\n\n//     const updatedLatex = latex.trim();\n//     const changesSummary = summaryRaw\n//       .trim()\n//       .split(\"\\n\")\n//       .map((line) => line.trim())\n//       .filter(Boolean);\n\n//     console.log(\"‚úÖ Gemini LaTeX Output:\", updatedLatex.slice(0, 300) + \"...\");\n//     console.log(\"üìù Gemini Summary:\", changesSummary);\n\n//     return {\n//       updatedLatex,\n//       changesSummary,\n//     };\n//   } catch (error) {\n//     console.error(\n//       \"‚ùå Gemini API Error:\",\n//       error.response?.data || error.message\n//     );\n//     alert(\n//       \"Gemini API Error: \" +\n//         JSON.stringify(error.response?.data || error.message)\n//     );\n//     return {\n//       updatedLatex: \"Error generating LaTeX.\",\n//       changesSummary: [],\n//     };\n//   }\n// }\n\nimport axios from \"axios\";\n\nconst GEMINI_API_URL =\n  \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\nexport async function callGeminiAPI(prompt) {\n  const apiKey = \"AIzaSyB1mo0mYLvRkle-6OCLUFpS0rbaSdIHiHI\";\n\n  try {\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            role: \"user\",\n            parts: [{ text: prompt }],\n          },\n        ],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const fullText =\n      response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n    console.log(\"üîÅ Full Gemini Response:\", fullText);\n\n    // Step 1: Strip ```json ... ``` if present\n    const cleaned = fullText.replace(/```json|```/g, \"\").trim();\n\n    // Step 2: Try to extract updatedLatex and changesSummary manually\n    const latexMatch = cleaned.match(\n      /\"updatedLatex\"\\s*:\\s*\"([\\s\\S]+?)\"\\s*,\\s*\"changesSummary\"/\n    );\n    const summaryMatch = cleaned.match(/\"changesSummary\"\\s*:\\s*\\[(.*?)\\]/s);\n\n    const updatedLatex = latexMatch\n      ? latexMatch[1].replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\")\n      : \"\";\n\n    const summaryRaw = summaryMatch\n      ? summaryMatch[1]\n          .split(\",\")\n          .map((line) => line.replace(/^[\"\\s]+|[\"\\s]+$/g, \"\"))\n          .filter(Boolean)\n      : [];\n\n    console.log(\"‚úÖ Extracted LaTeX Part:\", updatedLatex.slice(0, 300));\n    console.log(\"üìù Extracted Changes Summary:\", summaryRaw);\n\n    return {\n      updatedLatex,\n      changesSummary: summaryRaw,\n    };\n  } catch (error) {\n    console.error(\"Gemini API Error:\", error.response?.data || error.message);\n    alert(\n      \"Gemini API Error: \" +\n        JSON.stringify(error.response?.data || error.message)\n    );\n    return {\n      updatedLatex: \"Error generating LaTeX.\",\n      changesSummary: [],\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}