{"ast":null,"code":"// utils/latexSanitizer.js\n\nexport function sanitizeLatexContent(text) {\n  let output = text;\n\n  // ✅ Convert markdown-style bold percentage like **45%**\n  output = output.replace(/\\*\\*(\\d+)%\\*\\*/g, \"\\\\textbf{$1\\\\%}\");\n\n  // ✅ Escape LaTeX special characters\n  const specialChars = {\n    \"&\": \"\\\\&\",\n    \"%\": \"\\\\%\",\n    $: \"\\\\$\",\n    \"#\": \"\\\\#\",\n    _: \"\\\\_\",\n    \"{\": \"\\\\{\",\n    \"}\": \"\\\\}\",\n    \"~\": \"\\\\textasciitilde{}\",\n    \"^\": \"\\\\textasciicircum{}\",\n    \"\\\\\": \"\\\\textbackslash{}\"\n  };\n  for (const [char, escaped] of Object.entries(specialChars)) {\n    const regex = new RegExp(`(?<!\\\\\\\\)${char}`, \"g\"); // ignore already escaped\n    output = output.replace(regex, escaped);\n  }\n\n  // ✅ Fix \\textbf{45%} to \\textbf{45\\%}\n  output = output.replace(/\\\\textbf{([^}]*)%}/g, (_, content) => `\\\\textbf{${content}\\\\%}`);\n\n  // ✅ Remove lone trailing backslashes\n  output = output.replace(/\\\\\\s*$/gm, \"\");\n\n  // ✅ Normalize line breaks\n  output = output.replace(/\\r?\\n\\s*\\r?\\n/g, \"\\n\");\n  return output.trim();\n}","map":{"version":3,"names":["sanitizeLatexContent","text","output","replace","specialChars","$","_","char","escaped","Object","entries","regex","RegExp","content","trim"],"sources":["/Users/maibupash/Desktop/MastersProjects/LaTeXForge/FrontEnd-A/src/utils/latexSanitizer.js"],"sourcesContent":["// utils/latexSanitizer.js\n\nexport function sanitizeLatexContent(text) {\n  let output = text;\n\n  // ✅ Convert markdown-style bold percentage like **45%**\n  output = output.replace(/\\*\\*(\\d+)%\\*\\*/g, \"\\\\textbf{$1\\\\%}\");\n\n  // ✅ Escape LaTeX special characters\n  const specialChars = {\n    \"&\": \"\\\\&\",\n    \"%\": \"\\\\%\",\n    $: \"\\\\$\",\n    \"#\": \"\\\\#\",\n    _: \"\\\\_\",\n    \"{\": \"\\\\{\",\n    \"}\": \"\\\\}\",\n    \"~\": \"\\\\textasciitilde{}\",\n    \"^\": \"\\\\textasciicircum{}\",\n    \"\\\\\": \"\\\\textbackslash{}\",\n  };\n\n  for (const [char, escaped] of Object.entries(specialChars)) {\n    const regex = new RegExp(`(?<!\\\\\\\\)${char}`, \"g\"); // ignore already escaped\n    output = output.replace(regex, escaped);\n  }\n\n  // ✅ Fix \\textbf{45%} to \\textbf{45\\%}\n  output = output.replace(\n    /\\\\textbf{([^}]*)%}/g,\n    (_, content) => `\\\\textbf{${content}\\\\%}`\n  );\n\n  // ✅ Remove lone trailing backslashes\n  output = output.replace(/\\\\\\s*$/gm, \"\");\n\n  // ✅ Normalize line breaks\n  output = output.replace(/\\r?\\n\\s*\\r?\\n/g, \"\\n\");\n\n  return output.trim();\n}\n"],"mappings":"AAAA;;AAEA,OAAO,SAASA,oBAAoBA,CAACC,IAAI,EAAE;EACzC,IAAIC,MAAM,GAAGD,IAAI;;EAEjB;EACAC,MAAM,GAAGA,MAAM,CAACC,OAAO,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;;EAE7D;EACA,MAAMC,YAAY,GAAG;IACnB,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,KAAK;IACVC,CAAC,EAAE,KAAK;IACR,GAAG,EAAE,KAAK;IACVC,CAAC,EAAE,KAAK;IACR,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,qBAAqB;IAC1B,IAAI,EAAE;EACR,CAAC;EAED,KAAK,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,YAAY,CAAC,EAAE;IAC1D,MAAMO,KAAK,GAAG,IAAIC,MAAM,CAAC,YAAYL,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;IACnDL,MAAM,GAAGA,MAAM,CAACC,OAAO,CAACQ,KAAK,EAAEH,OAAO,CAAC;EACzC;;EAEA;EACAN,MAAM,GAAGA,MAAM,CAACC,OAAO,CACrB,qBAAqB,EACrB,CAACG,CAAC,EAAEO,OAAO,KAAK,YAAYA,OAAO,MACrC,CAAC;;EAED;EACAX,MAAM,GAAGA,MAAM,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;;EAEvC;EACAD,MAAM,GAAGA,MAAM,CAACC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC;EAE/C,OAAOD,MAAM,CAACY,IAAI,CAAC,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}